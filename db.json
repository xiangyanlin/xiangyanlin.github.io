{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/Deadpool.jpg","path":"images/Deadpool.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/aliReward.jpg","path":"images/aliReward.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatReward.jpg","path":"images/wechatReward.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1596253417259},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1596253417259},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1596253417260},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1596253417266},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1596253417266},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1596253417267},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1596253417267},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1596253417268},{"_id":"themes/next/_config.yml","hash":"df55446bb823013f7a16810eb0b10e6f89a9adcb","modified":1596253417268},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1596253417345},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1596253417380},{"_id":"source/_posts/14种常见的HTTP返回状态码.md","hash":"35e5cbd31cccc9f1cf2b1d8e1505301395638cef","modified":1596253409243},{"_id":"source/_posts/Docker-Compose的使用.md","hash":"30fb9a7b32168aabb97be6bdfccaaffb9775330a","modified":1596253417249},{"_id":"source/_posts/Dockerfile指令详解.md","hash":"9317ed10bb19b5d8ca03cf093b9d25330f5123a6","modified":1596253417249},{"_id":"source/_posts/Docker基础.md","hash":"272fe78b050fc5d43d08336bbbca1db544f7403f","modified":1596253417250},{"_id":"source/_posts/Mybatis-缓存-的知识点.md","hash":"90c9b59820e8ce5434c43016b7af645b060ea6fe","modified":1596253417250},{"_id":"source/_posts/Spring-声明式事务注解-Transactional.md","hash":"8b632aabb6d9a34a1e1edc4c461c9dbb9eca154f","modified":1596253417251},{"_id":"source/_posts/Spring-编程式事务.md","hash":"30941ff0f5489cd73f6935f24f01b2eef2f86326","modified":1596253417251},{"_id":"source/_posts/SpringCloud的学习与使用.md","hash":"4fc0a9d1cb74d7e5a8ac31f70a9572730df8c6b8","modified":1603009464259},{"_id":"source/_posts/docker-安装使用oracle.md","hash":"6be5aa96f47c3442f568259c1019f9bcc26d48fd","modified":1603010894587},{"_id":"source/_posts/hello-world.md","hash":"e32917c15a112c5d92ab95143d62d7e92876b998","modified":1596253409243},{"_id":"source/_posts/mybatic初学环境搭建.md","hash":"1b0462bef83d5d9fe3bbb7541df32deb33745230","modified":1596253417251},{"_id":"source/_posts/java8学习笔记.md","hash":"ff08f032c8d63346c4fb13b777fde784f4c79288","modified":1603009464259},{"_id":"source/_posts/mybatis-延迟加载和立即加载的实现.md","hash":"889f17c36e314871ad495091aa0e5947ad25aa7c","modified":1596253417252},{"_id":"source/_posts/mybatis表间关系，多表联查如何定义实体和返回类型.md","hash":"c86cfee984114edfe76cfaee81cebb6d0ef332ec","modified":1596253417252},{"_id":"source/_posts/mysql删除database报错ERROR-1010-HY000-Error-dropping-database-can-t-rmdir-library-errno.md","hash":"af4d97a788aed1b230ab8751040b0a2b14aeaec9","modified":1596253417252},{"_id":"source/_posts/mybatis连接池的3种配置方式.md","hash":"6c5380498598180fbad09bf634d444029548ddd9","modified":1596253417252},{"_id":"source/_posts/mysql联合主键.md","hash":"d6546280fa99a46ec2cdd5204eb825db66025104","modified":1596253417253},{"_id":"source/_posts/org-xml-sax-SAXNotRecognizedException-Feature-http-apache-org-xml-features-val.md","hash":"3d428a3b278c568c8343a4be66d09f63b302b237","modified":1596253417253},{"_id":"source/_posts/sql获取当前插入表的id.md","hash":"f1b01287565fa56d7bac2713fe09b3a2c6a6bd29","modified":1596253417253},{"_id":"source/_posts/swagger接口文档UI界面的方法点不开，只能点统一展开，关闭.md","hash":"8a0f1c5451a3ca40fe3aab7c079e99e6e1c22cea","modified":1596253417253},{"_id":"source/_posts/《thinking-in-java》读书笔记.md","hash":"471d6ac7b68931336c25f3c9b3d8f3f85955b6b2","modified":1596253417254},{"_id":"source/_posts/windows下升级node-js-在cmd-运行n-stable报错bash不是内部或外部命令，也不是可运行的程序-或批处理文件.md","hash":"a682c87664d85127430cd7f9602ec6f5bc76d5a6","modified":1596253417254},{"_id":"source/_posts/《thinking-in-java》读书笔记2：对象.md","hash":"125be7a757f581980739fcc456016fb84a87e351","modified":1596253417254},{"_id":"source/_posts/使用dhcp始终无法连接mysql的问题解决.md","hash":"73870d9090c739e05f57ea7fcbbdf42409526d68","modified":1596253417254},{"_id":"source/_posts/使用eclipse导入myeclipse项目无法识别为web项目问题的解决.md","hash":"b76df1b63ab037eb194ed58574df71de5e43c327","modified":1596253417255},{"_id":"source/_posts/分布式锁.md","hash":"4710b88f5e980f707147e7ced31925569d16da76","modified":1596253417255},{"_id":"source/_posts/区分项目中的数据实体目录-entity，dto-vo.md","hash":"03620370fa75feda9cbc04c70c94d1d551d03081","modified":1596253417255},{"_id":"source/_posts/区块链和Hyperledger-Fabric入门.md","hash":"31326f3c3dd9e03d86fc705a41bda0bc3122cf6e","modified":1596253417256},{"_id":"source/_posts/定时任务框架quartz.md","hash":"ee8bdc845532781e430864e18f2a49c560615230","modified":1599841756188},{"_id":"source/_posts/在学Spring-Aop-发现的注意点.md","hash":"a081eeb765aa36688369502a994fd893cc644ed9","modified":1596253417256},{"_id":"source/_posts/工作流activiti.md","hash":"fc703c57184a657ddb60b5f6b1d847354f4819fb","modified":1603009464260},{"_id":"source/_posts/戴尔惠普华硕笔记本Fn键反了，按F1、F2等键出来Fn-F1、F2的效果.md","hash":"b922f672c60be168eaf281c0cce2161e086d6b96","modified":1596253417256},{"_id":"source/_posts/消息队列和rabbitMQ.md","hash":"a1cd9cf7805b37967d603070ec9e9f5b025cb8b6","modified":1599841912956},{"_id":"source/_posts/阿里云centos7-运行tomcat-之后远程无法访问的解决.md","hash":"83d49dba751fdaf1dece2c6b358c00654a104b13","modified":1596253417257},{"_id":"source/_posts/解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题.md","hash":"a2bb718a556616bd01267f48a600e99ab00d077e","modified":1596253417256},{"_id":"source/_posts/阿里巴巴java开发手册-编程规约.md","hash":"14d1fc1caac3d0a693851fb93aee8d46532d0541","modified":1599452653735},{"_id":"source/categories/index.md","hash":"23dd124bbb7e99c9d363523bd2e9380e840a7b8a","modified":1596253417258},{"_id":"source/about/index.md","hash":"e51c823c445c840a42482a384feac6969b3c0d98","modified":1596253417258},{"_id":"source/tags/index.md","hash":"db56fb75a0ba726d74eb556ebcd41a50293d054e","modified":1596253417259},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1596253417263},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1596253417260},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1596253417260},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1596253417263},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1596253417264},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1596253417265},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1596253417265},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1596253417265},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1596253417266},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1596253417265},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1596253417266},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1596253417269},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1596253417270},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1596253417270},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1596253417270},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1596253417271},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1596253417271},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1596253417271},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1596253417272},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1596253417347},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1596253417346},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1596253417347},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1596253417346},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1596253417347},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1596253417348},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1596253417348},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1596253417349},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1596253417349},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1596253417349},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1596253417350},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1596253417350},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1596253417350},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1596253417350},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1596253417351},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1596253417351},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1596253417351},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1596253417351},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1596253417352},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1596253417352},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1596253417352},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1596253417353},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1596253417353},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1596253417377},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1596253417378},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1596253417379},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1596253417378},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1596253417379},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1596253417379},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1596253417389},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1596253417269},{"_id":"source/_posts/java8学习笔记/image-20200911102914791.png","hash":"389d66ed5149e140f5370621fa5061dc4f637943","modified":1599841756187},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1596253417261},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1596253417261},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1596253417262},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1596253417262},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1596253417272},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1596253417272},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1596253417273},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1596253417273},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1596253417274},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1596253417274},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1596253417274},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1596253417274},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1596253417343},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1596253417275},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1596253417344},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1596253417344},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1596253417345},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1596253417354},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1596253417354},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1596253417354},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1596253417355},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0e650e97d5fadc4b8a9a0fec00fe7db642dc3f76","modified":1596253417355},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1596253417358},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1596253417360},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1596253417364},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1596253417364},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1596253417365},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1596253417365},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1596253417367},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1596253417367},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1596253417369},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1596253417372},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1596253417373},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1596253417373},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1596253417380},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1596253417386},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1596253417386},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1596253417386},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1596253417387},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1596253417387},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1596253417388},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1596253417388},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1596253417388},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1596253417388},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1596253417389},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1596253417389},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1596253417390},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1596253417390},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1596253417390},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1596253417390},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1596253417391},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1596253417391},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1596253417392},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1596253417392},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1596253417392},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1596253417416},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1596253417425},{"_id":"themes/next/source/images/Deadpool.jpg","hash":"7fdbe7b7a68556d510e595962c11f06743fc5b3f","modified":1596253417426},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1596253417426},{"_id":"themes/next/source/images/aliReward.jpg","hash":"12c7d07723ad7ac16daef63c2399fbd21d0b85ce","modified":1596253417427},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1596253417427},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1596253417428},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1596253417429},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1596253417429},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1596253417430},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1596253417431},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1596253417431},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1596253417431},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1596253417432},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1596253417433},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1596253417432},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1596253417433},{"_id":"themes/next/source/images/wechatReward.jpg","hash":"bf5ce68d793e84674b2e8c821692e66b2d4d9865","modified":1596253417433},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1596253417433},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1596253417434},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1596253417433},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1596253417434},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1596253417434},{"_id":"themes/next/source/js/utils.js","hash":"53ce574c301a8b958e7f825beb193c77fb975e33","modified":1596253417436},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1596253417436},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1596253417356},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1596253417356},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1596253417356},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1596253417357},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1596253417357},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1596253417357},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1596253417358},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1596253417359},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1596253417359},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1596253417360},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1596253417360},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1596253417361},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1596253417361},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1596253417361},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1596253417362},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1596253417362},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1596253417363},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1596253417364},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1596253417365},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1596253417366},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1596253417366},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1596253417366},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1596253417366},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1596253417368},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1596253417368},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1596253417368},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1596253417369},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1596253417369},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1596253417370},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1596253417370},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1596253417370},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1596253417371},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1596253417371},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1596253417371},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1596253417371},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1596253417372},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1596253417372},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1596253417373},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1596253417374},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1596253417374},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1596253417374},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1596253417375},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1596253417375},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1596253417376},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1596253417376},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1596253417376},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1596253417377},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1596253417377},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1596253417381},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1596253417382},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1596253417383},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1596253417383},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1596253417383},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1596253417384},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1596253417384},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1596253417384},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1596253417385},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1596253417385},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1596253417385},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1596253417423},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1596253417424},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1596253417424},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1596253417424},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1596253417425},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1596253417435},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1596253417435},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1596253417439},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1596253417440},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1596253417393},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1596253417393},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1596253417394},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1596253417400},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1596253417405},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1596253417405},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1596253417409},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1596253417410},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1596253417410},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1596253417412},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1596253417413},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1596253417412},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1596253417413},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1596253417416},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1596253417417},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1596253417418},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1596253417418},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1596253417418},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1596253417418},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1596253417419},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1596253417419},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1596253417419},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1596253417419},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1596253417420},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1596253417420},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1596253417420},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1596253417421},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1596253417422},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1596253417422},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1596253417422},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1596253417423},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1596253417438},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1596253417421},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1596253417437},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1596253417438},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1596253417439},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1596253417394},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1596253417394},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1596253417395},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1596253417395},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1596253417395},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1596253417396},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1596253417396},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1596253417397},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1596253417397},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1596253417397},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1596253417398},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1596253417398},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1596253417399},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1596253417399},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1596253417398},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1596253417399},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1596253417400},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1596253417400},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1596253417401},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1596253417401},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1596253417401},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1596253417402},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1596253417402},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1596253417402},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1596253417403},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1596253417403},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1596253417403},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1596253417404},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1596253417404},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1596253417404},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1596253417405},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1596253417406},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1596253417406},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1596253417407},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1596253417407},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1596253417407},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1596253417408},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1596253417408},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1596253417408},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1596253417409},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1596253417409},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1596253417410},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1596253417411},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1596253417411},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1596253417411},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1596253417414},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1596253417414},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1596253417414},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1596253417415},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1596253417415},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1596253417415},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1596253417416},{"_id":"public/search.xml","hash":"cee82bcd0c60abace3df0414def8f7d683ecf80d","modified":1603010921525},{"_id":"public/categories/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/about/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/10/18/docker-安装使用oracle/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/09/24/工作流activiti/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/09/04/定时任务框架quartz/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/08/23/SpringCloud的学习与使用/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/08/14/阿里巴巴java开发手册-编程规约/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/08/02/java8学习笔记/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/08/02/消息队列和rabbitMQ/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/08/01/hello-world/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/07/14/分布式锁/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/07/09/区块链和Hyperledger-Fabric入门/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/07/07/Docker-Compose的使用/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/07/04/Dockerfile指令详解/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/07/04/Docker基础/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/05/15/使用eclipse导入myeclipse项目无法识别为web项目问题的解决/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/05/15/org-xml-sax-SAXNotRecognizedException-Feature-http-apache-org-xml-features-val/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/03/06/区分项目中的数据实体目录-entity，dto-vo/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/03/02/戴尔惠普华硕笔记本Fn键反了，按F1、F2等键出来Fn-F1、F2的效果/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/02/27/mysql删除database报错ERROR-1010-HY000-Error-dropping-database-can-t-rmdir-library-errno/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/02/22/Mybatis-缓存-的知识点/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/01/17/阿里云centos7-运行tomcat-之后远程无法访问的解决/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/01/08/mybatis-延迟加载和立即加载的实现/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/01/08/windows下升级node-js-在cmd-运行n-stable报错bash不是内部或外部命令，也不是可运行的程序-或批处理文件/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2020/01/07/mysql联合主键/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2019/12/17/mybatis表间关系，多表联查如何定义实体和返回类型/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2019/12/11/mybatis连接池的3种配置方式/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2019/12/08/解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2019/12/05/sql获取当前插入表的id/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2019/12/05/swagger接口文档UI界面的方法点不开，只能点统一展开，关闭/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2019/12/04/《thinking-in-java》读书笔记2：对象/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2019/12/02/《thinking-in-java》读书笔记/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2019/11/21/Spring-编程式事务/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2019/11/21/使用dhcp始终无法连接mysql的问题解决/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2019/11/21/Spring-声明式事务注解-Transactional/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2019/11/19/mybatic初学环境搭建/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2019/11/18/在学Spring-Aop-发现的注意点/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/2019/11/17/14种常见的HTTP返回状态码/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/http/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/docker/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/mybatis/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/微服务-SpringCloud/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/Spring/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/Oracle/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/jak/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/mysql/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/jdk/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/swagger/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/读书笔记-thinKing-in-java/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/node/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/微服务-理论/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/eclipse/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/java规范/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/中间件/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/区块链-Hyperledger-Fabric/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/电脑问题-键盘/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/工作流/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/消息队列/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/linux-centos/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/categories/java开发手册/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/page/4/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/2019/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/2019/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/2019/11/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/2019/12/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/2020/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/2020/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/2020/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/2020/01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/2020/02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/2020/03/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/2020/07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/2020/05/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/2020/08/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/2020/09/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/archives/2020/10/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/page/4/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/http/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/Docker-Compose/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/docker/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/Dockerfile/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/mybatis/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/SpringCloud/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/Spring/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/docker-oracle/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/java8/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/mysql/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/jdk/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/swagger/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/笔记/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/node/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/eclipse/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/分布式锁/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/java规范/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/Hyperledger-Fabric/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/quartz/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/键盘/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/activiti/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/rabbitMQ/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/阿里云服务器/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/tags/编程规约/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603010921525},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1603010921525},{"_id":"public/images/Deadpool.jpg","hash":"7fdbe7b7a68556d510e595962c11f06743fc5b3f","modified":1603010921525},{"_id":"public/images/aliReward.jpg","hash":"12c7d07723ad7ac16daef63c2399fbd21d0b85ce","modified":1603010921525},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1603010921525},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1603010921525},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1603010921525},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1603010921525},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1603010921525},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1603010921525},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1603010921525},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1603010921525},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1603010921525},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1603010921525},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1603010921525},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1603010921525},{"_id":"public/images/wechatReward.jpg","hash":"bf5ce68d793e84674b2e8c821692e66b2d4d9865","modified":1603010921525},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1603010921525},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1603010921525},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1603010921525},{"_id":"public/2020/08/02/java8学习笔记/image-20200911102914791.png","hash":"389d66ed5149e140f5370621fa5061dc4f637943","modified":1603010921525},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1603010921525},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1603010921525},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1603010921525},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1603010921525},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1603010921525},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1603010921525},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1603010921525},{"_id":"public/js/utils.js","hash":"2c6e6b4d9a592fbb4bf04689524db2cdfcd94ca7","modified":1603010921525},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1603010921525},{"_id":"public/css/main.css","hash":"fcb427fcdf9224d163ccf6ae4788ace2545e57b2","modified":1603010921525},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1603010921525},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1603010921525},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1603010921525}],"Category":[{"name":"http","_id":"ckgevbbmg0002g0v874tx3wtp"},{"name":"docker","_id":"ckgevbbmj0007g0v8cp88b5k5"},{"name":"mybatis","_id":"ckgevbbmt000og0v8e2s48zgu"},{"name":"微服务 - SpringCloud","_id":"ckgevbbmv000vg0v8cqhw729m"},{"name":"Spring","_id":"ckgevbbmx0012g0v809rt9frj"},{"name":"Oracle","_id":"ckgevbbn7001pg0v89wp49vhe"},{"name":"jak","_id":"ckgevbbn9001wg0v827o97yqw"},{"name":"mysql","_id":"ckgevbbnb0022g0v8d3g85qaw"},{"name":"jdk","_id":"ckgevbbnf002dg0v87j0th8ej"},{"name":"swagger","_id":"ckgevbbnl002sg0v80nz35gin"},{"name":"读书笔记 - thinKing in java","_id":"ckgevbbnm002xg0v850sg9754"},{"name":"node","_id":"ckgevbbnn0033g0v8d7i6brmn"},{"name":"微服务 - 理论","_id":"ckgevbbnq003eg0v83c5x1snm"},{"name":"eclipse","_id":"ckgevbbnq003jg0v84c1g5l0h"},{"name":"java规范","_id":"ckgevbbnr003ng0v82mku9uz7"},{"name":"区块链 - Hyperledger Fabric","_id":"ckgevbbns003rg0v8bnuf3j65"},{"name":"中间件","_id":"ckgevbbns003vg0v8hueofywv"},{"name":"电脑问题 - 键盘","_id":"ckgevbbnt003zg0v8fm97dn27"},{"name":"工作流","_id":"ckgevbbnu0043g0v8f51ea7o9"},{"name":"消息队列","_id":"ckgevbbnv0047g0v8e9qs8vpj"},{"name":"linux - centos","_id":"ckgevbbnw004bg0v84gt1dwp9"},{"name":"java开发手册","_id":"ckgevbbp1004kg0v82kwld6qg"}],"Data":[],"Page":[{"title":"分类","type":"categories","_content":"","source":"categories/index.md","raw":"title: \"分类\"\ntype: \"categories\"\n---\n","date":"2020-08-01T03:43:37.258Z","updated":"2020-08-01T03:43:37.258Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckgevbbox004ig0v847uvfgmo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: \"关于\"\ntype: \"about\"\n---\n","date":"2020-08-01T03:43:37.258Z","updated":"2020-08-01T03:43:37.258Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckgevbboz004jg0v87501cvwj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","type":"tags","_content":"","source":"tags/index.md","raw":"title: \"标签\"\ntype: \"tags\"\n---","date":"2020-08-01T03:43:37.259Z","updated":"2020-08-01T03:43:37.259Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckgevbbp1004mg0v81kyv4bjr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"14种常见的HTTP返回状态码","date":"2019-11-17T13:08:39.000Z","_content":"\n今天学习了一下HTTP状态码，把自己的理解记录一下，如有不对之处，欢迎指正\n\n<!--more-->\n## 2开头：成功\n### 200:ok\n成功\n### 204：No Content\n    请求成功，但是没有东西（资源）可以返回（响应）\n### 206: Partial Content\n    范围请求的成功返回状态码\n## 3开头：重定向\n### 301：Moved Permanently\n    永久性重定向。就是书签一样的\n### 302： Found\n    临时性重定向。告知本次请求使用新的URL.\n### 303 ：See Other\n    告知请求对应的资源存在着另一个 URI，使用Get请求去访问这个新的URI.\n### 　304： Not Modified\n    304 虽然被划分在 3XX 类别中，但是和重定向没有关 系。\n发送附带条件的请求时，资源已找到。但不满足条件。\n### 　307： Temporary Redirect \n    临时重定向，该状态码与 302 Found 有着相同的含义。但是307 会遵照浏览器标准，不会从 POST 变成 GET。防止重定向时改变请求方式。\n\n## 　4开头：客户端错误\n    表示发出请求的客服端发生错误\n### 　400： Bad Request\n    400表示请求报文中存在语法错误。当错误发生时，需修改请求的内容。\n### 401： Unauthorized\n    请求的资源需要通过认证。第一次返回401，会弹出认证用的对话窗口。第二次返回401，表示认证失败\n### 　403： Forbidden\n    因为访问权限等问题，服务器拒绝对资源的访问，服务器在实体的主体部分说明，用户以看到该说明。\n ### 　404 Not Found\n    这个出现的比较多。\n    该状态码表明服务器上无法找到请求的资源。\n    除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。\n## 5开头：服务器错误\n### 500: Internal Server Error\n    服务器端在执行请求时发生了错误。一般是代码逻辑错误，各种异常\n### 　503 ：Service Unavailable\n    服务器超负荷\n##### 当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200\n###### 参考阅读《HTTP图解》一书","source":"_posts/14种常见的HTTP返回状态码.md","raw":"---\ntitle: 14种常见的HTTP返回状态码\ndate: 2019-11-17 21:08:39\ncategories: \n  - http\ntags:\n  - http\n\n---\n\n今天学习了一下HTTP状态码，把自己的理解记录一下，如有不对之处，欢迎指正\n\n<!--more-->\n## 2开头：成功\n### 200:ok\n成功\n### 204：No Content\n    请求成功，但是没有东西（资源）可以返回（响应）\n### 206: Partial Content\n    范围请求的成功返回状态码\n## 3开头：重定向\n### 301：Moved Permanently\n    永久性重定向。就是书签一样的\n### 302： Found\n    临时性重定向。告知本次请求使用新的URL.\n### 303 ：See Other\n    告知请求对应的资源存在着另一个 URI，使用Get请求去访问这个新的URI.\n### 　304： Not Modified\n    304 虽然被划分在 3XX 类别中，但是和重定向没有关 系。\n发送附带条件的请求时，资源已找到。但不满足条件。\n### 　307： Temporary Redirect \n    临时重定向，该状态码与 302 Found 有着相同的含义。但是307 会遵照浏览器标准，不会从 POST 变成 GET。防止重定向时改变请求方式。\n\n## 　4开头：客户端错误\n    表示发出请求的客服端发生错误\n### 　400： Bad Request\n    400表示请求报文中存在语法错误。当错误发生时，需修改请求的内容。\n### 401： Unauthorized\n    请求的资源需要通过认证。第一次返回401，会弹出认证用的对话窗口。第二次返回401，表示认证失败\n### 　403： Forbidden\n    因为访问权限等问题，服务器拒绝对资源的访问，服务器在实体的主体部分说明，用户以看到该说明。\n ### 　404 Not Found\n    这个出现的比较多。\n    该状态码表明服务器上无法找到请求的资源。\n    除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。\n## 5开头：服务器错误\n### 500: Internal Server Error\n    服务器端在执行请求时发生了错误。一般是代码逻辑错误，各种异常\n### 　503 ：Service Unavailable\n    服务器超负荷\n##### 当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200\n###### 参考阅读《HTTP图解》一书","slug":"14种常见的HTTP返回状态码","published":1,"updated":"2020-08-01T03:43:29.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbma0000g0v81alm3rf6","content":"<p>今天学习了一下HTTP状态码，把自己的理解记录一下，如有不对之处，欢迎指正</p>\n<a id=\"more\"></a>\n<h2 id=\"2开头：成功\"><a href=\"#2开头：成功\" class=\"headerlink\" title=\"2开头：成功\"></a>2开头：成功</h2><h3 id=\"200-ok\"><a href=\"#200-ok\" class=\"headerlink\" title=\"200:ok\"></a>200:ok</h3><p>成功</p>\n<h3 id=\"204：No-Content\"><a href=\"#204：No-Content\" class=\"headerlink\" title=\"204：No Content\"></a>204：No Content</h3><pre><code>请求成功，但是没有东西（资源）可以返回（响应）</code></pre><h3 id=\"206-Partial-Content\"><a href=\"#206-Partial-Content\" class=\"headerlink\" title=\"206: Partial Content\"></a>206: Partial Content</h3><pre><code>范围请求的成功返回状态码</code></pre><h2 id=\"3开头：重定向\"><a href=\"#3开头：重定向\" class=\"headerlink\" title=\"3开头：重定向\"></a>3开头：重定向</h2><h3 id=\"301：Moved-Permanently\"><a href=\"#301：Moved-Permanently\" class=\"headerlink\" title=\"301：Moved Permanently\"></a>301：Moved Permanently</h3><pre><code>永久性重定向。就是书签一样的</code></pre><h3 id=\"302：-Found\"><a href=\"#302：-Found\" class=\"headerlink\" title=\"302： Found\"></a>302： Found</h3><pre><code>临时性重定向。告知本次请求使用新的URL.</code></pre><h3 id=\"303-：See-Other\"><a href=\"#303-：See-Other\" class=\"headerlink\" title=\"303 ：See Other\"></a>303 ：See Other</h3><pre><code>告知请求对应的资源存在着另一个 URI，使用Get请求去访问这个新的URI.</code></pre><h3 id=\"304：-Not-Modified\"><a href=\"#304：-Not-Modified\" class=\"headerlink\" title=\"　304： Not Modified\"></a>　304： Not Modified</h3><pre><code>304 虽然被划分在 3XX 类别中，但是和重定向没有关 系。</code></pre><p>发送附带条件的请求时，资源已找到。但不满足条件。</p>\n<h3 id=\"307：-Temporary-Redirect\"><a href=\"#307：-Temporary-Redirect\" class=\"headerlink\" title=\"　307： Temporary Redirect\"></a>　307： Temporary Redirect</h3><pre><code>临时重定向，该状态码与 302 Found 有着相同的含义。但是307 会遵照浏览器标准，不会从 POST 变成 GET。防止重定向时改变请求方式。</code></pre><h2 id=\"4开头：客户端错误\"><a href=\"#4开头：客户端错误\" class=\"headerlink\" title=\"　4开头：客户端错误\"></a>　4开头：客户端错误</h2><pre><code>表示发出请求的客服端发生错误</code></pre><h3 id=\"400：-Bad-Request\"><a href=\"#400：-Bad-Request\" class=\"headerlink\" title=\"　400： Bad Request\"></a>　400： Bad Request</h3><pre><code>400表示请求报文中存在语法错误。当错误发生时，需修改请求的内容。</code></pre><h3 id=\"401：-Unauthorized\"><a href=\"#401：-Unauthorized\" class=\"headerlink\" title=\"401： Unauthorized\"></a>401： Unauthorized</h3><pre><code>请求的资源需要通过认证。第一次返回401，会弹出认证用的对话窗口。第二次返回401，表示认证失败</code></pre><h3 id=\"403：-Forbidden\"><a href=\"#403：-Forbidden\" class=\"headerlink\" title=\"　403： Forbidden\"></a>　403： Forbidden</h3><pre><code>因为访问权限等问题，服务器拒绝对资源的访问，服务器在实体的主体部分说明，用户以看到该说明。</code></pre><h3 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"　404 Not Found\"></a>　404 Not Found</h3><pre><code>这个出现的比较多。\n该状态码表明服务器上无法找到请求的资源。\n除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</code></pre><h2 id=\"5开头：服务器错误\"><a href=\"#5开头：服务器错误\" class=\"headerlink\" title=\"5开头：服务器错误\"></a>5开头：服务器错误</h2><h3 id=\"500-Internal-Server-Error\"><a href=\"#500-Internal-Server-Error\" class=\"headerlink\" title=\"500: Internal Server Error\"></a>500: Internal Server Error</h3><pre><code>服务器端在执行请求时发生了错误。一般是代码逻辑错误，各种异常</code></pre><h3 id=\"503-：Service-Unavailable\"><a href=\"#503-：Service-Unavailable\" class=\"headerlink\" title=\"　503 ：Service Unavailable\"></a>　503 ：Service Unavailable</h3><pre><code>服务器超负荷</code></pre><h5 id=\"当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200\"><a href=\"#当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200\" class=\"headerlink\" title=\"当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200\"></a>当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200</h5><h6 id=\"参考阅读《HTTP图解》一书\"><a href=\"#参考阅读《HTTP图解》一书\" class=\"headerlink\" title=\"参考阅读《HTTP图解》一书\"></a>参考阅读《HTTP图解》一书</h6>","site":{"data":{}},"excerpt":"<p>今天学习了一下HTTP状态码，把自己的理解记录一下，如有不对之处，欢迎指正</p>","more":"<h2 id=\"2开头：成功\"><a href=\"#2开头：成功\" class=\"headerlink\" title=\"2开头：成功\"></a>2开头：成功</h2><h3 id=\"200-ok\"><a href=\"#200-ok\" class=\"headerlink\" title=\"200:ok\"></a>200:ok</h3><p>成功</p>\n<h3 id=\"204：No-Content\"><a href=\"#204：No-Content\" class=\"headerlink\" title=\"204：No Content\"></a>204：No Content</h3><pre><code>请求成功，但是没有东西（资源）可以返回（响应）</code></pre><h3 id=\"206-Partial-Content\"><a href=\"#206-Partial-Content\" class=\"headerlink\" title=\"206: Partial Content\"></a>206: Partial Content</h3><pre><code>范围请求的成功返回状态码</code></pre><h2 id=\"3开头：重定向\"><a href=\"#3开头：重定向\" class=\"headerlink\" title=\"3开头：重定向\"></a>3开头：重定向</h2><h3 id=\"301：Moved-Permanently\"><a href=\"#301：Moved-Permanently\" class=\"headerlink\" title=\"301：Moved Permanently\"></a>301：Moved Permanently</h3><pre><code>永久性重定向。就是书签一样的</code></pre><h3 id=\"302：-Found\"><a href=\"#302：-Found\" class=\"headerlink\" title=\"302： Found\"></a>302： Found</h3><pre><code>临时性重定向。告知本次请求使用新的URL.</code></pre><h3 id=\"303-：See-Other\"><a href=\"#303-：See-Other\" class=\"headerlink\" title=\"303 ：See Other\"></a>303 ：See Other</h3><pre><code>告知请求对应的资源存在着另一个 URI，使用Get请求去访问这个新的URI.</code></pre><h3 id=\"304：-Not-Modified\"><a href=\"#304：-Not-Modified\" class=\"headerlink\" title=\"　304： Not Modified\"></a>　304： Not Modified</h3><pre><code>304 虽然被划分在 3XX 类别中，但是和重定向没有关 系。</code></pre><p>发送附带条件的请求时，资源已找到。但不满足条件。</p>\n<h3 id=\"307：-Temporary-Redirect\"><a href=\"#307：-Temporary-Redirect\" class=\"headerlink\" title=\"　307： Temporary Redirect\"></a>　307： Temporary Redirect</h3><pre><code>临时重定向，该状态码与 302 Found 有着相同的含义。但是307 会遵照浏览器标准，不会从 POST 变成 GET。防止重定向时改变请求方式。</code></pre><h2 id=\"4开头：客户端错误\"><a href=\"#4开头：客户端错误\" class=\"headerlink\" title=\"　4开头：客户端错误\"></a>　4开头：客户端错误</h2><pre><code>表示发出请求的客服端发生错误</code></pre><h3 id=\"400：-Bad-Request\"><a href=\"#400：-Bad-Request\" class=\"headerlink\" title=\"　400： Bad Request\"></a>　400： Bad Request</h3><pre><code>400表示请求报文中存在语法错误。当错误发生时，需修改请求的内容。</code></pre><h3 id=\"401：-Unauthorized\"><a href=\"#401：-Unauthorized\" class=\"headerlink\" title=\"401： Unauthorized\"></a>401： Unauthorized</h3><pre><code>请求的资源需要通过认证。第一次返回401，会弹出认证用的对话窗口。第二次返回401，表示认证失败</code></pre><h3 id=\"403：-Forbidden\"><a href=\"#403：-Forbidden\" class=\"headerlink\" title=\"　403： Forbidden\"></a>　403： Forbidden</h3><pre><code>因为访问权限等问题，服务器拒绝对资源的访问，服务器在实体的主体部分说明，用户以看到该说明。</code></pre><h3 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"　404 Not Found\"></a>　404 Not Found</h3><pre><code>这个出现的比较多。\n该状态码表明服务器上无法找到请求的资源。\n除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</code></pre><h2 id=\"5开头：服务器错误\"><a href=\"#5开头：服务器错误\" class=\"headerlink\" title=\"5开头：服务器错误\"></a>5开头：服务器错误</h2><h3 id=\"500-Internal-Server-Error\"><a href=\"#500-Internal-Server-Error\" class=\"headerlink\" title=\"500: Internal Server Error\"></a>500: Internal Server Error</h3><pre><code>服务器端在执行请求时发生了错误。一般是代码逻辑错误，各种异常</code></pre><h3 id=\"503-：Service-Unavailable\"><a href=\"#503-：Service-Unavailable\" class=\"headerlink\" title=\"　503 ：Service Unavailable\"></a>　503 ：Service Unavailable</h3><pre><code>服务器超负荷</code></pre><h5 id=\"当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200\"><a href=\"#当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200\" class=\"headerlink\" title=\"当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200\"></a>当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200</h5><h6 id=\"参考阅读《HTTP图解》一书\"><a href=\"#参考阅读《HTTP图解》一书\" class=\"headerlink\" title=\"参考阅读《HTTP图解》一书\"></a>参考阅读《HTTP图解》一书</h6>"},{"title":"Docker Compose的使用","date":"2020-07-07T02:50:16.000Z","_content":"\n####  Docker Compose\n\n<!--more-->\n\n##### 安装\n\ncentos安装（使用root用户或者sudo）：\n\n从 [官方 GitHub Release](https://github.com/docker/compose/releases) 处直接下载编译好的二进制文件：\n\n```\ncurl -L https://github.com/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n```\n\n\n\n给予执行权限：\n\n```\n chmod +x /usr/local/bin/docker-compose\n```\n\n\n\n### docker-compose.yml\n\n编写 `docker-compose.yml` 文件，这个是 Compose 使用的主模板文件。\n\n```yaml\nversion: '3'\n\nservices:\n  tomcat:\n    restart: always\n    image: tomcat\n    container_name: tomcat\n    ports:\n     - 8080:8080\n\n```\n\n\n\n\n\n对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。\n\n执行 `docker-compose [COMMAND] --help` 或者 `docker-compose help [COMMAND]` 可以查看具体某个命令的使用格式。\n\n`docker-compose` 命令的基本的使用格式是\n\n```bash\ndocker-compose [-f=<arg>...] [options] [COMMAND] [ARGS...]\n```\n\n\n\n## [#](https://www.funtl.com/zh/docs-docker/Docker-Compose-命令说明.html#命令选项)命令选项\n\n- `-f, --file FILE` 指定使用的 Compose 模板文件，默认为 `docker-compose.yml`，可以多次指定。\n- `-p, --project-name NAME` 指定项目名称，默认将使用所在目录名称作为项目名。\n- `--x-networking` 使用 Docker 的可拔插网络后端特性\n- `--x-network-driver DRIVER` 指定网络后端的驱动，默认为 `bridge`\n- `--verbose` 输出更多调试信息。\n- `-v, --version` 打印版本并退出。\n\n\n\n","source":"_posts/Docker-Compose的使用.md","raw":"---\ntitle: Docker Compose的使用\ndate: 2020-07-07 10:50:16\ncategories: docker\ntags: Docker Compose\n---\n\n####  Docker Compose\n\n<!--more-->\n\n##### 安装\n\ncentos安装（使用root用户或者sudo）：\n\n从 [官方 GitHub Release](https://github.com/docker/compose/releases) 处直接下载编译好的二进制文件：\n\n```\ncurl -L https://github.com/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n```\n\n\n\n给予执行权限：\n\n```\n chmod +x /usr/local/bin/docker-compose\n```\n\n\n\n### docker-compose.yml\n\n编写 `docker-compose.yml` 文件，这个是 Compose 使用的主模板文件。\n\n```yaml\nversion: '3'\n\nservices:\n  tomcat:\n    restart: always\n    image: tomcat\n    container_name: tomcat\n    ports:\n     - 8080:8080\n\n```\n\n\n\n\n\n对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。\n\n执行 `docker-compose [COMMAND] --help` 或者 `docker-compose help [COMMAND]` 可以查看具体某个命令的使用格式。\n\n`docker-compose` 命令的基本的使用格式是\n\n```bash\ndocker-compose [-f=<arg>...] [options] [COMMAND] [ARGS...]\n```\n\n\n\n## [#](https://www.funtl.com/zh/docs-docker/Docker-Compose-命令说明.html#命令选项)命令选项\n\n- `-f, --file FILE` 指定使用的 Compose 模板文件，默认为 `docker-compose.yml`，可以多次指定。\n- `-p, --project-name NAME` 指定项目名称，默认将使用所在目录名称作为项目名。\n- `--x-networking` 使用 Docker 的可拔插网络后端特性\n- `--x-network-driver DRIVER` 指定网络后端的驱动，默认为 `bridge`\n- `--verbose` 输出更多调试信息。\n- `-v, --version` 打印版本并退出。\n\n\n\n","slug":"Docker-Compose的使用","published":1,"updated":"2020-08-01T03:43:37.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbme0001g0v83bvt2s9z","content":"<h4 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h4><a id=\"more\"></a>\n\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><p>centos安装（使用root用户或者sudo）：</p>\n<p>从 <a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\">官方 GitHub Release</a> 处直接下载编译好的二进制文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.26.2&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure>\n\n\n\n<p>给予执行权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"docker-compose-yml\"><a href=\"#docker-compose-yml\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h3><p>编写 <code>docker-compose.yml</code> 文件，这个是 Compose 使用的主模板文件。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">tomcat:</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">tomcat</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">tomcat</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"number\">8080</span><span class=\"string\">:8080</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p>\n<p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p>\n<p><code>docker-compose</code> 命令的基本的使用格式是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"命令选项\"><a href=\"#命令选项\" class=\"headerlink\" title=\"#命令选项\"></a><a href=\"https://www.funtl.com/zh/docs-docker/Docker-Compose-命令说明.html#命令选项\" target=\"_blank\" rel=\"noopener\">#</a>命令选项</h2><ul>\n<li><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</li>\n<li><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</li>\n<li><code>--x-networking</code> 使用 Docker 的可拔插网络后端特性</li>\n<li><code>--x-network-driver DRIVER</code> 指定网络后端的驱动，默认为 <code>bridge</code></li>\n<li><code>--verbose</code> 输出更多调试信息。</li>\n<li><code>-v, --version</code> 打印版本并退出。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h4>","more":"<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><p>centos安装（使用root用户或者sudo）：</p>\n<p>从 <a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\">官方 GitHub Release</a> 处直接下载编译好的二进制文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.26.2&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure>\n\n\n\n<p>给予执行权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"docker-compose-yml\"><a href=\"#docker-compose-yml\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h3><p>编写 <code>docker-compose.yml</code> 文件，这个是 Compose 使用的主模板文件。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">tomcat:</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">tomcat</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">tomcat</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"number\">8080</span><span class=\"string\">:8080</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p>\n<p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p>\n<p><code>docker-compose</code> 命令的基本的使用格式是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"命令选项\"><a href=\"#命令选项\" class=\"headerlink\" title=\"#命令选项\"></a><a href=\"https://www.funtl.com/zh/docs-docker/Docker-Compose-命令说明.html#命令选项\" target=\"_blank\" rel=\"noopener\">#</a>命令选项</h2><ul>\n<li><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</li>\n<li><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</li>\n<li><code>--x-networking</code> 使用 Docker 的可拔插网络后端特性</li>\n<li><code>--x-network-driver DRIVER</code> 指定网络后端的驱动，默认为 <code>bridge</code></li>\n<li><code>--verbose</code> 输出更多调试信息。</li>\n<li><code>-v, --version</code> 打印版本并退出。</li>\n</ul>"},{"title":"Dockerfile指令详解","date":"2020-07-04T06:32:26.000Z","_content":"\nDockerfile的常用指令：FROM,RUN,COPY,ADD,CMD等等\n\n<!--more-->\n\n\n\n###  FROM 指定基础镜像\n\n构建一个新的镜像是指定的基础镜像，一般为所需要的的环境\n\n如：\n\n```\nfrom Java：8\n```\n\n\n\n###  RUN 执行命令\n\n`RUN` 指令是用来执行命令行命令的。由于命令行的强大能力，`RUN` 指令在定制镜像时是最常用的指令之一。其格式有两种：\n\n- *shell* 格式：`RUN <命令>`，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 `RUN` 指令就是这种格式。\n\n```dockerfile\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n```\n\n\n\n- *exec* 格式：`RUN [\"可执行文件\", \"参数1\", \"参数2\"]`，这更像是函数调用中的格式。\n\n既然 `RUN` 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：\n\n```dockerfile\nFROM debian:jessie\n\nRUN apt-get update\nRUN apt-get install -y gcc libc6-dev make\nRUN wget -O redis.tar.gz \"http://download.redis.io/releases/redis-3.2.5.tar.gz\"\nRUN mkdir -p /usr/src/redis\nRUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1\nRUN make -C /usr/src/redis\nRUN make -C /usr/src/redis install\n```\n\n\n\n### CMD 容器启动命令\n\n`CMD` 指令就是用于指定默认的容器主进程的启动命令的。\n\n`CMD` 指令的格式和 `RUN` 相似，也是两种格式：\n\n- `shell` 格式：`CMD <命令>`\n- `exec` 格式：`CMD [\"可执行文件\", \"参数1\", \"参数2\"...]`\n- 参数列表格式：`CMD [\"参数1\", \"参数2\"...]`。在指定了 `ENTRYPOINT` 指令后，用 `CMD` 指定具体的参数。\n\n如：\n\n```ockerfile\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\n\n\n如果使用 `shell` 格式的话，实际的命令会被包装为 `sh -c` 的参数的形式进行执行。比如：\n\n```dockerfile\nCMD echo $HOME\n```\n\n\n\n在实际执行中，会将其变更为：\n\n```dockerfile\nCMD [ \"sh\", \"-c\", \"echo $HOME\" ]\n```\n\n\n\n### COPY 复制文件\n\n格式：\n\n- `COPY <源路径>... <目标路径>`\n\n- `COPY [\"<源路径1>\",... \"<目标路径>\"]`\n\n  `COPY` 指令将从构建上下文目录中 `<源路径>` 的文件/目录复制到新的一层的镜像内的 `<目标路径>` 位置。比如：\n\n  ```dockerfile\n  COPY package.json /usr/src/app/\n  ```\n\n  1\n\n  `<源路径>` 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 [`filepath.Match`](https://golang.org/pkg/path/filepath/#Match) 规则，如：\n\n  ```dockerfle\n  COPY hom* /mydir/\n  COPY hom?.txt /mydir/\n  ```\n\n\n\n### ADD 更高级的复制文件\n\n`ADD` 指令和 `COPY` 的格式和性质基本一致。但是在 `COPY` 基础上增加了一些功能。\n\n比如 `<源路径>` 可以是一个 `URL`，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 `<目标路径>` 去。\n\n另外需要注意的是，`ADD` 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。\n\n因此在 `COPY` 和 `ADD` 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 `COPY` 指令，仅在需要自动解压缩的场合使用 `ADD`。\n\n\n\n### WORKDIR 指定工作目录\n\n格式为 `WORKDIR <工作目录路径>`\n\n使用 `WORKDIR` 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，`WORKDIR` 会帮你建立目录。\n\n\n\n###  EXPOSE 暴露端口\n\n格式为 `EXPOSE <端口1> [<端口2>...]`\n\n`EXPOSE` 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 `docker run -P` 时，会自动随机映射 `EXPOSE` 的端口。\n\n`EXPOSE` 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。\n\n\n\n###  ENV 设置环境变量\n\n格式有两种：\n\n- `ENV <key> <value>`\n- `ENV <key1>=<value1> <key2>=<value2>...`\n\n这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 `RUN`，还是运行时的应用，都可以直接使用这里定义的环境变量。\n\n\n\n### ARG 构建参数\n\n格式：`ARG <参数名>[=<默认值>]`\n\n构建参数和 `ENV` 的效果一样，都是设置环境变量。所不同的是，`ARG` 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 `ARG` 保存密码之类的信息，因为 `docker history` 还是可以看到所有值的。\n\n`Dockerfile` 中的 `ARG` 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 `docker build` 中用 `--build-arg <参数名>=<值>` 来覆盖。\n\n在 1.13 之前的版本，要求 `--build-arg` 中的参数名，必须在 `Dockerfile` 中用 `ARG` 定义过了，换句话说，就是 `--build-arg` 指定的参数，必须在 `Dockerfile` 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 `Dockerfile` 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。\n\n## \n\n\n\n### VOLUME 定义匿名卷\n\n- `VOLUME [\"<路径1>\", \"<路径2>\"...]`\n- `VOLUME <路径>`\n\n之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 `Dockerfile` 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。\n\n```dockerfile\nVOLUME /data\n```\n\n\n\n这里的 `/data` 目录就会在运行时自动挂载为匿名卷，任何向 `/data` 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：\n\n```bash\ndocker run -d -v mydata:/data xxxx\n```\n\n\n\n在这行命令中，就使用了 `mydata` 这个命名卷挂载到了 `/data` 这个位置，替代了 `Dockerfile` 中定义的匿名卷的挂载配置。\n\n\n\n###  ENTRYPOINT 入口点\n\n`ENTRYPOINT` 的格式和 `RUN` 指令格式一样，分为 `exec` 格式和 `shell` 格式。\n\n`ENTRYPOINT` 的目的和 `CMD` 一样，都是在指定容器启动程序及参数。`ENTRYPOINT` 在运行时也可以替代，不过比 `CMD` 要略显繁琐，需要通过 `docker run` 的参数 `--entrypoint` 来指定\n\n当指定了 `ENTRYPOINT` 后，`CMD` 的含义就发生了改变，不再是直接的运行其命令，而是将 `CMD` 的内容作为参数传给 `ENTRYPOINT` 指令，换句话说实际执行时，将变为：\n\n```bash\n<ENTRYPOINT> \"<CMD>\"\n```\n\n\n\n### ONBUILD 为他人作嫁衣\n\n格式：`ONBUILD <其它指令>`。\n\n`ONBUILD` 是一个特殊的指令，它后面跟的是其它指令，比如 `RUN`, `COPY` 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。\n\n`Dockerfile` 中的其它指令都是为了定制当前镜像而准备的，唯有 `ONBUILD` 是为了帮助别人定制自己而准备的。\n\n假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 `npm` 进行包管理，所有依赖、配置、启动信息等会放到 `package.json` 文件里。在拿到程序代码后，需要先进行 `npm install` 才可以获得所有需要的依赖。然后就可以通过 `npm start` 来启动应用。因此，一般来说会这样写 `Dockerfile`：\n\n```dockerfile\nFROM node:slim\nRUN mkdir /app\nWORKDIR /app\nCOPY ./package.json /app\nRUN [ \"npm\", \"install\" ]\nCOPY . /app/\nCMD [ \"npm\", \"start\" ]\n```\n\n\n\n\n把这个 `Dockerfile` 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 `Dockerfile` 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。\n\n如果第一个 Node.js 项目在开发过程中，发现这个 `Dockerfile` 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 `Dockerfile`，再次构建，问题解决。\b第一个项目没问题了，但是第二个项目呢？虽然最初 `Dockerfile` 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 `Dockerfile`，而第二个项目的 `Dockerfile` 就会被自动修复。\n\n那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 `Dockerfile` 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 `Dockerfile` 就会变为：\n\n```dockerfile\nFROM node:slim\nRUN mkdir /app\nWORKDIR /app\nCMD [ \"npm\", \"start\" ]\n```\n\n\n\n这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 `my-node` 的话，各个项目内的自己的 `Dockerfile` 就变为：\n\n```dockerfile\nFROM my-node\nCOPY ./package.json /app\nRUN [ \"npm\", \"install\" ]\nCOPY . /app/\n```\n\n\n\n基础镜像变化后，各个项目都用这个 `Dockerfile` 重新构建镜像，会继承基础镜像的更新。\n\n那么，问题解决了么？没有。准确说，只解决了一半。如果这个 `Dockerfile` 里面有些东西需要调整呢？比如 `npm install` 都需要加一些参数，那怎么办？这一行 `RUN` 是不可能放入基础镜像的，因为涉及到了当前项目的 `./package.json`，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 `Dockerfile` 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。\n\n`ONBUILD` 可以解决这个问题。让我们用 `ONBUILD` 重新写一下基础镜像的 `Dockerfile`:\n\n```dockerfile\nFROM node:slim\nRUN mkdir /app\nWORKDIR /app\nONBUILD COPY ./package.json /app\nONBUILD RUN [ \"npm\", \"install\" ]\nONBUILD COPY . /app/\nCMD [ \"npm\", \"start\" ]\n```\n\n\n\n这次我们回到原始的 `Dockerfile`，但是这次将项目相关的指令加上 `ONBUILD`，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 `Dockerfile` 就变成了简单地：\n\n```dockerfile\nFROM my-node\n```\n\n\n\n是的，只有这么一行。当在各个项目目录中，用这个只有一行的 `Dockerfile` 构建镜像时，之前基础镜像的那三行 `ONBUILD` 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 `npm install`，生成应用镜像。\n\n","source":"_posts/Dockerfile指令详解.md","raw":"---\ntitle: Dockerfile指令详解\ndate: 2020-07-04 14:32:26\ncategories: docker\ntags: Dockerfile\n---\n\nDockerfile的常用指令：FROM,RUN,COPY,ADD,CMD等等\n\n<!--more-->\n\n\n\n###  FROM 指定基础镜像\n\n构建一个新的镜像是指定的基础镜像，一般为所需要的的环境\n\n如：\n\n```\nfrom Java：8\n```\n\n\n\n###  RUN 执行命令\n\n`RUN` 指令是用来执行命令行命令的。由于命令行的强大能力，`RUN` 指令在定制镜像时是最常用的指令之一。其格式有两种：\n\n- *shell* 格式：`RUN <命令>`，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 `RUN` 指令就是这种格式。\n\n```dockerfile\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n```\n\n\n\n- *exec* 格式：`RUN [\"可执行文件\", \"参数1\", \"参数2\"]`，这更像是函数调用中的格式。\n\n既然 `RUN` 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：\n\n```dockerfile\nFROM debian:jessie\n\nRUN apt-get update\nRUN apt-get install -y gcc libc6-dev make\nRUN wget -O redis.tar.gz \"http://download.redis.io/releases/redis-3.2.5.tar.gz\"\nRUN mkdir -p /usr/src/redis\nRUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1\nRUN make -C /usr/src/redis\nRUN make -C /usr/src/redis install\n```\n\n\n\n### CMD 容器启动命令\n\n`CMD` 指令就是用于指定默认的容器主进程的启动命令的。\n\n`CMD` 指令的格式和 `RUN` 相似，也是两种格式：\n\n- `shell` 格式：`CMD <命令>`\n- `exec` 格式：`CMD [\"可执行文件\", \"参数1\", \"参数2\"...]`\n- 参数列表格式：`CMD [\"参数1\", \"参数2\"...]`。在指定了 `ENTRYPOINT` 指令后，用 `CMD` 指定具体的参数。\n\n如：\n\n```ockerfile\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\n\n\n如果使用 `shell` 格式的话，实际的命令会被包装为 `sh -c` 的参数的形式进行执行。比如：\n\n```dockerfile\nCMD echo $HOME\n```\n\n\n\n在实际执行中，会将其变更为：\n\n```dockerfile\nCMD [ \"sh\", \"-c\", \"echo $HOME\" ]\n```\n\n\n\n### COPY 复制文件\n\n格式：\n\n- `COPY <源路径>... <目标路径>`\n\n- `COPY [\"<源路径1>\",... \"<目标路径>\"]`\n\n  `COPY` 指令将从构建上下文目录中 `<源路径>` 的文件/目录复制到新的一层的镜像内的 `<目标路径>` 位置。比如：\n\n  ```dockerfile\n  COPY package.json /usr/src/app/\n  ```\n\n  1\n\n  `<源路径>` 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 [`filepath.Match`](https://golang.org/pkg/path/filepath/#Match) 规则，如：\n\n  ```dockerfle\n  COPY hom* /mydir/\n  COPY hom?.txt /mydir/\n  ```\n\n\n\n### ADD 更高级的复制文件\n\n`ADD` 指令和 `COPY` 的格式和性质基本一致。但是在 `COPY` 基础上增加了一些功能。\n\n比如 `<源路径>` 可以是一个 `URL`，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 `<目标路径>` 去。\n\n另外需要注意的是，`ADD` 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。\n\n因此在 `COPY` 和 `ADD` 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 `COPY` 指令，仅在需要自动解压缩的场合使用 `ADD`。\n\n\n\n### WORKDIR 指定工作目录\n\n格式为 `WORKDIR <工作目录路径>`\n\n使用 `WORKDIR` 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，`WORKDIR` 会帮你建立目录。\n\n\n\n###  EXPOSE 暴露端口\n\n格式为 `EXPOSE <端口1> [<端口2>...]`\n\n`EXPOSE` 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 `docker run -P` 时，会自动随机映射 `EXPOSE` 的端口。\n\n`EXPOSE` 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。\n\n\n\n###  ENV 设置环境变量\n\n格式有两种：\n\n- `ENV <key> <value>`\n- `ENV <key1>=<value1> <key2>=<value2>...`\n\n这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 `RUN`，还是运行时的应用，都可以直接使用这里定义的环境变量。\n\n\n\n### ARG 构建参数\n\n格式：`ARG <参数名>[=<默认值>]`\n\n构建参数和 `ENV` 的效果一样，都是设置环境变量。所不同的是，`ARG` 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 `ARG` 保存密码之类的信息，因为 `docker history` 还是可以看到所有值的。\n\n`Dockerfile` 中的 `ARG` 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 `docker build` 中用 `--build-arg <参数名>=<值>` 来覆盖。\n\n在 1.13 之前的版本，要求 `--build-arg` 中的参数名，必须在 `Dockerfile` 中用 `ARG` 定义过了，换句话说，就是 `--build-arg` 指定的参数，必须在 `Dockerfile` 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 `Dockerfile` 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。\n\n## \n\n\n\n### VOLUME 定义匿名卷\n\n- `VOLUME [\"<路径1>\", \"<路径2>\"...]`\n- `VOLUME <路径>`\n\n之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 `Dockerfile` 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。\n\n```dockerfile\nVOLUME /data\n```\n\n\n\n这里的 `/data` 目录就会在运行时自动挂载为匿名卷，任何向 `/data` 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：\n\n```bash\ndocker run -d -v mydata:/data xxxx\n```\n\n\n\n在这行命令中，就使用了 `mydata` 这个命名卷挂载到了 `/data` 这个位置，替代了 `Dockerfile` 中定义的匿名卷的挂载配置。\n\n\n\n###  ENTRYPOINT 入口点\n\n`ENTRYPOINT` 的格式和 `RUN` 指令格式一样，分为 `exec` 格式和 `shell` 格式。\n\n`ENTRYPOINT` 的目的和 `CMD` 一样，都是在指定容器启动程序及参数。`ENTRYPOINT` 在运行时也可以替代，不过比 `CMD` 要略显繁琐，需要通过 `docker run` 的参数 `--entrypoint` 来指定\n\n当指定了 `ENTRYPOINT` 后，`CMD` 的含义就发生了改变，不再是直接的运行其命令，而是将 `CMD` 的内容作为参数传给 `ENTRYPOINT` 指令，换句话说实际执行时，将变为：\n\n```bash\n<ENTRYPOINT> \"<CMD>\"\n```\n\n\n\n### ONBUILD 为他人作嫁衣\n\n格式：`ONBUILD <其它指令>`。\n\n`ONBUILD` 是一个特殊的指令，它后面跟的是其它指令，比如 `RUN`, `COPY` 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。\n\n`Dockerfile` 中的其它指令都是为了定制当前镜像而准备的，唯有 `ONBUILD` 是为了帮助别人定制自己而准备的。\n\n假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 `npm` 进行包管理，所有依赖、配置、启动信息等会放到 `package.json` 文件里。在拿到程序代码后，需要先进行 `npm install` 才可以获得所有需要的依赖。然后就可以通过 `npm start` 来启动应用。因此，一般来说会这样写 `Dockerfile`：\n\n```dockerfile\nFROM node:slim\nRUN mkdir /app\nWORKDIR /app\nCOPY ./package.json /app\nRUN [ \"npm\", \"install\" ]\nCOPY . /app/\nCMD [ \"npm\", \"start\" ]\n```\n\n\n\n\n把这个 `Dockerfile` 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 `Dockerfile` 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。\n\n如果第一个 Node.js 项目在开发过程中，发现这个 `Dockerfile` 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 `Dockerfile`，再次构建，问题解决。\b第一个项目没问题了，但是第二个项目呢？虽然最初 `Dockerfile` 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 `Dockerfile`，而第二个项目的 `Dockerfile` 就会被自动修复。\n\n那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 `Dockerfile` 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 `Dockerfile` 就会变为：\n\n```dockerfile\nFROM node:slim\nRUN mkdir /app\nWORKDIR /app\nCMD [ \"npm\", \"start\" ]\n```\n\n\n\n这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 `my-node` 的话，各个项目内的自己的 `Dockerfile` 就变为：\n\n```dockerfile\nFROM my-node\nCOPY ./package.json /app\nRUN [ \"npm\", \"install\" ]\nCOPY . /app/\n```\n\n\n\n基础镜像变化后，各个项目都用这个 `Dockerfile` 重新构建镜像，会继承基础镜像的更新。\n\n那么，问题解决了么？没有。准确说，只解决了一半。如果这个 `Dockerfile` 里面有些东西需要调整呢？比如 `npm install` 都需要加一些参数，那怎么办？这一行 `RUN` 是不可能放入基础镜像的，因为涉及到了当前项目的 `./package.json`，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 `Dockerfile` 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。\n\n`ONBUILD` 可以解决这个问题。让我们用 `ONBUILD` 重新写一下基础镜像的 `Dockerfile`:\n\n```dockerfile\nFROM node:slim\nRUN mkdir /app\nWORKDIR /app\nONBUILD COPY ./package.json /app\nONBUILD RUN [ \"npm\", \"install\" ]\nONBUILD COPY . /app/\nCMD [ \"npm\", \"start\" ]\n```\n\n\n\n这次我们回到原始的 `Dockerfile`，但是这次将项目相关的指令加上 `ONBUILD`，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 `Dockerfile` 就变成了简单地：\n\n```dockerfile\nFROM my-node\n```\n\n\n\n是的，只有这么一行。当在各个项目目录中，用这个只有一行的 `Dockerfile` 构建镜像时，之前基础镜像的那三行 `ONBUILD` 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 `npm install`，生成应用镜像。\n\n","slug":"Dockerfile指令详解","published":1,"updated":"2020-08-01T03:43:37.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbmh0004g0v830fbhzg7","content":"<p>Dockerfile的常用指令：FROM,RUN,COPY,ADD,CMD等等</p>\n<a id=\"more\"></a>\n\n\n\n<h3 id=\"FROM-指定基础镜像\"><a href=\"#FROM-指定基础镜像\" class=\"headerlink\" title=\"FROM 指定基础镜像\"></a>FROM 指定基础镜像</h3><p>构建一个新的镜像是指定的基础镜像，一般为所需要的的环境</p>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Java：8</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"RUN-执行命令\"><a href=\"#RUN-执行命令\" class=\"headerlink\" title=\"RUN 执行命令\"></a>RUN 执行命令</h3><p><code>RUN</code> 指令是用来执行命令行命令的。由于命令行的强大能力，<code>RUN</code> 指令在定制镜像时是最常用的指令之一。其格式有两种：</p>\n<ul>\n<li><em>shell</em> 格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 <code>RUN</code> 指令就是这种格式。</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><em>exec</em> 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</li>\n</ul>\n<p>既然 <code>RUN</code> 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> debian:jessie</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get install -y gcc libc6-dev make</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> wget -O redis.tar.gz <span class=\"string\">\"http://download.redis.io/releases/redis-3.2.5.tar.gz\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir -p /usr/src/redis</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> make -C /usr/src/redis</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> make -C /usr/src/redis install</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"CMD-容器启动命令\"><a href=\"#CMD-容器启动命令\" class=\"headerlink\" title=\"CMD 容器启动命令\"></a>CMD 容器启动命令</h3><p><code>CMD</code> 指令就是用于指定默认的容器主进程的启动命令的。</p>\n<p><code>CMD</code> 指令的格式和 <code>RUN</code> 相似，也是两种格式：</p>\n<ul>\n<li><code>shell</code> 格式：<code>CMD &lt;命令&gt;</code></li>\n<li><code>exec</code> 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code></li>\n<li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数。</li>\n</ul>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果使用 <code>shell</code> 格式的话，实际的命令会被包装为 <code>sh -c</code> 的参数的形式进行执行。比如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$HOME</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在实际执行中，会将其变更为：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [ <span class=\"string\">\"sh\"</span>, <span class=\"string\">\"-c\"</span>, <span class=\"string\">\"echo <span class=\"variable\">$HOME</span>\"</span> ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"COPY-复制文件\"><a href=\"#COPY-复制文件\" class=\"headerlink\" title=\"COPY 复制文件\"></a>COPY 复制文件</h3><p>格式：</p>\n<ul>\n<li><p><code>COPY &lt;源路径&gt;... &lt;目标路径&gt;</code></p>\n</li>\n<li><p><code>COPY [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></p>\n<p><code>COPY</code> 指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件/目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置。比如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> package.json /usr/src/app/</span></span><br></pre></td></tr></table></figure>\n\n<p>1</p>\n<p><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 <a href=\"https://golang.org/pkg/path/filepath/#Match\" target=\"_blank\" rel=\"noopener\"><code>filepath.Match</code></a> 规则，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY hom* &#x2F;mydir&#x2F;</span><br><span class=\"line\">COPY hom?.txt &#x2F;mydir&#x2F;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"ADD-更高级的复制文件\"><a href=\"#ADD-更高级的复制文件\" class=\"headerlink\" title=\"ADD 更高级的复制文件\"></a>ADD 更高级的复制文件</h3><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了一些功能。</p>\n<p>比如 <code>&lt;源路径&gt;</code> 可以是一个 <code>URL</code>，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 <code>&lt;目标路径&gt;</code> 去。</p>\n<p>另外需要注意的是，<code>ADD</code> 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。</p>\n<p>因此在 <code>COPY</code> 和 <code>ADD</code> 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code>。</p>\n<h3 id=\"WORKDIR-指定工作目录\"><a href=\"#WORKDIR-指定工作目录\" class=\"headerlink\" title=\"WORKDIR 指定工作目录\"></a>WORKDIR 指定工作目录</h3><p>格式为 <code>WORKDIR &lt;工作目录路径&gt;</code></p>\n<p>使用 <code>WORKDIR</code> 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。</p>\n<h3 id=\"EXPOSE-暴露端口\"><a href=\"#EXPOSE-暴露端口\" class=\"headerlink\" title=\"EXPOSE 暴露端口\"></a>EXPOSE 暴露端口</h3><p>格式为 <code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></p>\n<p><code>EXPOSE</code> 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口。</p>\n<p><code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p>\n<h3 id=\"ENV-设置环境变量\"><a href=\"#ENV-设置环境变量\" class=\"headerlink\" title=\"ENV 设置环境变量\"></a>ENV 设置环境变量</h3><p>格式有两种：</p>\n<ul>\n<li><code>ENV &lt;key&gt; &lt;value&gt;</code></li>\n<li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li>\n</ul>\n<p>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 <code>RUN</code>，还是运行时的应用，都可以直接使用这里定义的环境变量。</p>\n<h3 id=\"ARG-构建参数\"><a href=\"#ARG-构建参数\" class=\"headerlink\" title=\"ARG 构建参数\"></a>ARG 构建参数</h3><p>格式：<code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p>\n<p>构建参数和 <code>ENV</code> 的效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 <code>ARG</code> 保存密码之类的信息，因为 <code>docker history</code> 还是可以看到所有值的。</p>\n<p><code>Dockerfile</code> 中的 <code>ARG</code> 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p>\n<p>在 1.13 之前的版本，要求 <code>--build-arg</code> 中的参数名，必须在 <code>Dockerfile</code> 中用 <code>ARG</code> 定义过了，换句话说，就是 <code>--build-arg</code> 指定的参数，必须在 <code>Dockerfile</code> 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 <code>Dockerfile</code> 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h3 id=\"VOLUME-定义匿名卷\"><a href=\"#VOLUME-定义匿名卷\" class=\"headerlink\" title=\"VOLUME 定义匿名卷\"></a>VOLUME 定义匿名卷</h3><ul>\n<li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li>\n<li><code>VOLUME &lt;路径&gt;</code></li>\n</ul>\n<p>之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 <code>Dockerfile</code> 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">VOLUME</span><span class=\"bash\"> /data</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里的 <code>/data</code> 目录就会在运行时自动挂载为匿名卷，任何向 <code>/data</code> 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -v mydata:/data xxxx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在这行命令中，就使用了 <code>mydata</code> 这个命名卷挂载到了 <code>/data</code> 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置。</p>\n<h3 id=\"ENTRYPOINT-入口点\"><a href=\"#ENTRYPOINT-入口点\" class=\"headerlink\" title=\"ENTRYPOINT 入口点\"></a>ENTRYPOINT 入口点</h3><p><code>ENTRYPOINT</code> 的格式和 <code>RUN</code> 指令格式一样，分为 <code>exec</code> 格式和 <code>shell</code> 格式。</p>\n<p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定</p>\n<p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ENTRYPOINT&gt; <span class=\"string\">\"&lt;CMD&gt;\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ONBUILD-为他人作嫁衣\"><a href=\"#ONBUILD-为他人作嫁衣\" class=\"headerlink\" title=\"ONBUILD 为他人作嫁衣\"></a>ONBUILD 为他人作嫁衣</h3><p>格式：<code>ONBUILD &lt;其它指令&gt;</code>。</p>\n<p><code>ONBUILD</code> 是一个特殊的指令，它后面跟的是其它指令，比如 <code>RUN</code>, <code>COPY</code> 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p>\n<p><code>Dockerfile</code> 中的其它指令都是为了定制当前镜像而准备的，唯有 <code>ONBUILD</code> 是为了帮助别人定制自己而准备的。</p>\n<p>假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 <code>npm</code> 进行包管理，所有依赖、配置、启动信息等会放到 <code>package.json</code> 文件里。在拿到程序代码后，需要先进行 <code>npm install</code> 才可以获得所有需要的依赖。然后就可以通过 <code>npm start</code> 来启动应用。因此，一般来说会这样写 <code>Dockerfile</code>：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:slim</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir /app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"install\"</span> ]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . /app/</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"start\"</span> ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<p>把这个 <code>Dockerfile</code> 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 <code>Dockerfile</code> 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。</p>\n<p>如果第一个 Node.js 项目在开发过程中，发现这个 <code>Dockerfile</code> 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 <code>Dockerfile</code>，再次构建，问题解决。\b第一个项目没问题了，但是第二个项目呢？虽然最初 <code>Dockerfile</code> 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 <code>Dockerfile</code>，而第二个项目的 <code>Dockerfile</code> 就会被自动修复。</p>\n<p>那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 <code>Dockerfile</code> 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 <code>Dockerfile</code> 就会变为：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:slim</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir /app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"start\"</span> ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 <code>my-node</code> 的话，各个项目内的自己的 <code>Dockerfile</code> 就变为：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> my-node</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"install\"</span> ]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . /app/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>基础镜像变化后，各个项目都用这个 <code>Dockerfile</code> 重新构建镜像，会继承基础镜像的更新。</p>\n<p>那么，问题解决了么？没有。准确说，只解决了一半。如果这个 <code>Dockerfile</code> 里面有些东西需要调整呢？比如 <code>npm install</code> 都需要加一些参数，那怎么办？这一行 <code>RUN</code> 是不可能放入基础镜像的，因为涉及到了当前项目的 <code>./package.json</code>，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 <code>Dockerfile</code> 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。</p>\n<p><code>ONBUILD</code> 可以解决这个问题。让我们用 <code>ONBUILD</code> 重新写一下基础镜像的 <code>Dockerfile</code>:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:slim</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir /app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">RUN</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"install\"</span> ]</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">COPY</span><span class=\"bash\"> . /app/</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"start\"</span> ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这次我们回到原始的 <code>Dockerfile</code>，但是这次将项目相关的指令加上 <code>ONBUILD</code>，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 <code>Dockerfile</code> 就变成了简单地：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> my-node</span><br></pre></td></tr></table></figure>\n\n\n\n<p>是的，只有这么一行。当在各个项目目录中，用这个只有一行的 <code>Dockerfile</code> 构建镜像时，之前基础镜像的那三行 <code>ONBUILD</code> 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 <code>npm install</code>，生成应用镜像。</p>\n","site":{"data":{}},"excerpt":"<p>Dockerfile的常用指令：FROM,RUN,COPY,ADD,CMD等等</p>","more":"<h3 id=\"FROM-指定基础镜像\"><a href=\"#FROM-指定基础镜像\" class=\"headerlink\" title=\"FROM 指定基础镜像\"></a>FROM 指定基础镜像</h3><p>构建一个新的镜像是指定的基础镜像，一般为所需要的的环境</p>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Java：8</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"RUN-执行命令\"><a href=\"#RUN-执行命令\" class=\"headerlink\" title=\"RUN 执行命令\"></a>RUN 执行命令</h3><p><code>RUN</code> 指令是用来执行命令行命令的。由于命令行的强大能力，<code>RUN</code> 指令在定制镜像时是最常用的指令之一。其格式有两种：</p>\n<ul>\n<li><em>shell</em> 格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 <code>RUN</code> 指令就是这种格式。</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><em>exec</em> 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</li>\n</ul>\n<p>既然 <code>RUN</code> 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> debian:jessie</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get install -y gcc libc6-dev make</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> wget -O redis.tar.gz <span class=\"string\">\"http://download.redis.io/releases/redis-3.2.5.tar.gz\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir -p /usr/src/redis</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> make -C /usr/src/redis</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> make -C /usr/src/redis install</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"CMD-容器启动命令\"><a href=\"#CMD-容器启动命令\" class=\"headerlink\" title=\"CMD 容器启动命令\"></a>CMD 容器启动命令</h3><p><code>CMD</code> 指令就是用于指定默认的容器主进程的启动命令的。</p>\n<p><code>CMD</code> 指令的格式和 <code>RUN</code> 相似，也是两种格式：</p>\n<ul>\n<li><code>shell</code> 格式：<code>CMD &lt;命令&gt;</code></li>\n<li><code>exec</code> 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code></li>\n<li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数。</li>\n</ul>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果使用 <code>shell</code> 格式的话，实际的命令会被包装为 <code>sh -c</code> 的参数的形式进行执行。比如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$HOME</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在实际执行中，会将其变更为：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [ <span class=\"string\">\"sh\"</span>, <span class=\"string\">\"-c\"</span>, <span class=\"string\">\"echo <span class=\"variable\">$HOME</span>\"</span> ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"COPY-复制文件\"><a href=\"#COPY-复制文件\" class=\"headerlink\" title=\"COPY 复制文件\"></a>COPY 复制文件</h3><p>格式：</p>\n<ul>\n<li><p><code>COPY &lt;源路径&gt;... &lt;目标路径&gt;</code></p>\n</li>\n<li><p><code>COPY [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></p>\n<p><code>COPY</code> 指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件/目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置。比如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> package.json /usr/src/app/</span></span><br></pre></td></tr></table></figure>\n\n<p>1</p>\n<p><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 <a href=\"https://golang.org/pkg/path/filepath/#Match\" target=\"_blank\" rel=\"noopener\"><code>filepath.Match</code></a> 规则，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY hom* &#x2F;mydir&#x2F;</span><br><span class=\"line\">COPY hom?.txt &#x2F;mydir&#x2F;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"ADD-更高级的复制文件\"><a href=\"#ADD-更高级的复制文件\" class=\"headerlink\" title=\"ADD 更高级的复制文件\"></a>ADD 更高级的复制文件</h3><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了一些功能。</p>\n<p>比如 <code>&lt;源路径&gt;</code> 可以是一个 <code>URL</code>，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 <code>&lt;目标路径&gt;</code> 去。</p>\n<p>另外需要注意的是，<code>ADD</code> 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。</p>\n<p>因此在 <code>COPY</code> 和 <code>ADD</code> 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code>。</p>\n<h3 id=\"WORKDIR-指定工作目录\"><a href=\"#WORKDIR-指定工作目录\" class=\"headerlink\" title=\"WORKDIR 指定工作目录\"></a>WORKDIR 指定工作目录</h3><p>格式为 <code>WORKDIR &lt;工作目录路径&gt;</code></p>\n<p>使用 <code>WORKDIR</code> 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。</p>\n<h3 id=\"EXPOSE-暴露端口\"><a href=\"#EXPOSE-暴露端口\" class=\"headerlink\" title=\"EXPOSE 暴露端口\"></a>EXPOSE 暴露端口</h3><p>格式为 <code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></p>\n<p><code>EXPOSE</code> 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口。</p>\n<p><code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p>\n<h3 id=\"ENV-设置环境变量\"><a href=\"#ENV-设置环境变量\" class=\"headerlink\" title=\"ENV 设置环境变量\"></a>ENV 设置环境变量</h3><p>格式有两种：</p>\n<ul>\n<li><code>ENV &lt;key&gt; &lt;value&gt;</code></li>\n<li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li>\n</ul>\n<p>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 <code>RUN</code>，还是运行时的应用，都可以直接使用这里定义的环境变量。</p>\n<h3 id=\"ARG-构建参数\"><a href=\"#ARG-构建参数\" class=\"headerlink\" title=\"ARG 构建参数\"></a>ARG 构建参数</h3><p>格式：<code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p>\n<p>构建参数和 <code>ENV</code> 的效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 <code>ARG</code> 保存密码之类的信息，因为 <code>docker history</code> 还是可以看到所有值的。</p>\n<p><code>Dockerfile</code> 中的 <code>ARG</code> 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p>\n<p>在 1.13 之前的版本，要求 <code>--build-arg</code> 中的参数名，必须在 <code>Dockerfile</code> 中用 <code>ARG</code> 定义过了，换句话说，就是 <code>--build-arg</code> 指定的参数，必须在 <code>Dockerfile</code> 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 <code>Dockerfile</code> 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h3 id=\"VOLUME-定义匿名卷\"><a href=\"#VOLUME-定义匿名卷\" class=\"headerlink\" title=\"VOLUME 定义匿名卷\"></a>VOLUME 定义匿名卷</h3><ul>\n<li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li>\n<li><code>VOLUME &lt;路径&gt;</code></li>\n</ul>\n<p>之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 <code>Dockerfile</code> 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">VOLUME</span><span class=\"bash\"> /data</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里的 <code>/data</code> 目录就会在运行时自动挂载为匿名卷，任何向 <code>/data</code> 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -v mydata:/data xxxx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在这行命令中，就使用了 <code>mydata</code> 这个命名卷挂载到了 <code>/data</code> 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置。</p>\n<h3 id=\"ENTRYPOINT-入口点\"><a href=\"#ENTRYPOINT-入口点\" class=\"headerlink\" title=\"ENTRYPOINT 入口点\"></a>ENTRYPOINT 入口点</h3><p><code>ENTRYPOINT</code> 的格式和 <code>RUN</code> 指令格式一样，分为 <code>exec</code> 格式和 <code>shell</code> 格式。</p>\n<p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定</p>\n<p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ENTRYPOINT&gt; <span class=\"string\">\"&lt;CMD&gt;\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ONBUILD-为他人作嫁衣\"><a href=\"#ONBUILD-为他人作嫁衣\" class=\"headerlink\" title=\"ONBUILD 为他人作嫁衣\"></a>ONBUILD 为他人作嫁衣</h3><p>格式：<code>ONBUILD &lt;其它指令&gt;</code>。</p>\n<p><code>ONBUILD</code> 是一个特殊的指令，它后面跟的是其它指令，比如 <code>RUN</code>, <code>COPY</code> 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p>\n<p><code>Dockerfile</code> 中的其它指令都是为了定制当前镜像而准备的，唯有 <code>ONBUILD</code> 是为了帮助别人定制自己而准备的。</p>\n<p>假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 <code>npm</code> 进行包管理，所有依赖、配置、启动信息等会放到 <code>package.json</code> 文件里。在拿到程序代码后，需要先进行 <code>npm install</code> 才可以获得所有需要的依赖。然后就可以通过 <code>npm start</code> 来启动应用。因此，一般来说会这样写 <code>Dockerfile</code>：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:slim</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir /app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"install\"</span> ]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . /app/</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"start\"</span> ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<p>把这个 <code>Dockerfile</code> 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 <code>Dockerfile</code> 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。</p>\n<p>如果第一个 Node.js 项目在开发过程中，发现这个 <code>Dockerfile</code> 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 <code>Dockerfile</code>，再次构建，问题解决。\b第一个项目没问题了，但是第二个项目呢？虽然最初 <code>Dockerfile</code> 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 <code>Dockerfile</code>，而第二个项目的 <code>Dockerfile</code> 就会被自动修复。</p>\n<p>那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 <code>Dockerfile</code> 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 <code>Dockerfile</code> 就会变为：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:slim</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir /app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"start\"</span> ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 <code>my-node</code> 的话，各个项目内的自己的 <code>Dockerfile</code> 就变为：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> my-node</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"install\"</span> ]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . /app/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>基础镜像变化后，各个项目都用这个 <code>Dockerfile</code> 重新构建镜像，会继承基础镜像的更新。</p>\n<p>那么，问题解决了么？没有。准确说，只解决了一半。如果这个 <code>Dockerfile</code> 里面有些东西需要调整呢？比如 <code>npm install</code> 都需要加一些参数，那怎么办？这一行 <code>RUN</code> 是不可能放入基础镜像的，因为涉及到了当前项目的 <code>./package.json</code>，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 <code>Dockerfile</code> 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。</p>\n<p><code>ONBUILD</code> 可以解决这个问题。让我们用 <code>ONBUILD</code> 重新写一下基础镜像的 <code>Dockerfile</code>:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:slim</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir /app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">RUN</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"install\"</span> ]</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">COPY</span><span class=\"bash\"> . /app/</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"start\"</span> ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这次我们回到原始的 <code>Dockerfile</code>，但是这次将项目相关的指令加上 <code>ONBUILD</code>，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 <code>Dockerfile</code> 就变成了简单地：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> my-node</span><br></pre></td></tr></table></figure>\n\n\n\n<p>是的，只有这么一行。当在各个项目目录中，用这个只有一行的 <code>Dockerfile</code> 构建镜像时，之前基础镜像的那三行 <code>ONBUILD</code> 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 <code>npm install</code>，生成应用镜像。</p>"},{"title":"Docker基础-镜像","date":"2020-07-04T02:25:47.000Z","_content":"\n#### Docker 镜像\n\n<!--more-->\n\n##### 分层存储\n\n\n\n因为镜像包含操作系统完整的 `root` 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 [Union FS](https://en.wikipedia.org/wiki/Union_mount) 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。\n\n镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。\n\n分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。\n\n\n\n##### 虚悬镜像\n\n\n\n一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 `<none>`。：\n\n```bash\n<none>               <none>              00285df0df87        5 days ago          342 MB\n```\n\n1\n\n这个镜像原本是有镜像名和标签的，原来为 `mongo:3.2`，随着官方镜像维护，发布了新版本后，重新 `docker pull mongo:3.2` 时，`mongo:3.2` 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 `<none>`。除了 `docker pull` 可能导致这种情况，`docker build` 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 `<none>` 的镜像。这类无标签镜像也被称为 **虚悬镜像(dangling image)** ，可以用下面的命令专门显示这类镜像：\n\n```bash\n$ docker image ls -f dangling=true\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n<none>              <none>              00285df0df87        5 days ago          342 MB\n```\n\n\n\n一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。\n\n```bash\n$ docker image prune\n```\n\n\n\n##### DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）\n\n\n\n如果注意，会看到 `docker build` 命令最后有一个 `.`。`.` 表示当前目录，而 `Dockerfile` 就在当前目录，因此不少初学者以为这个路径是在指定 `Dockerfile` 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定**上下文路径**。那么什么是上下文呢？\n\n首先我们要理解 `docker build` 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 [Docker Remote API](https://docs.docker.com/engine/reference/api/docker_remote_api/)，而如 `docker` 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 `docker` 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。\n\n当我们进行镜像构建的时候，并非所有定制都会通过 `RUN` 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 `COPY` 指令、`ADD` 指令等。而 `docker build` 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？\n\n这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，`docker build` 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。\n\n如果在 `Dockerfile` 中这么写：\n\n```dockerfile\nCOPY ./package.json /app/\n```\n\n\n\n这并不是要复制执行 `docker build` 命令所在的目录下的 `package.json`，也不是复制 `Dockerfile` 所在目录下的 `package.json`，而是复制 **上下文（context）** 目录下的 `package.json`。\n\n因此，`COPY` 这类指令中的源文件的路径都是*相对路径*。这也是初学者经常会问的为什么 `COPY ../package.json /app` 或者 `COPY /opt/xxxx /app` 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。\n\n现在就可以理解刚才的命令 `docker build -t nginx:v3 .` 中的这个 `.`，实际上是在指定上下文的目录，`docker build` 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。\n\n如果观察 `docker build` 输出，我们其实已经看到了这个发送上下文的过程：\n\n```bash\n$ docker build -t nginx:v3 .\nSending build context to Docker daemon 2.048 kB\n...\n```\n\n\n\n理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 `COPY /opt/xxxx /app` 不工作后，于是干脆将 `Dockerfile` 放到了硬盘根目录去构建，结果发现 `docker build` 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 `docker build` 打包整个硬盘，这显然是使用错误。\n\n一般来说，应该会将 `Dockerfile` 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 `.gitignore` 一样的语法写一个 `.dockerignore`，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。\n\n那么为什么会有人误以为 `.` 是指定 `Dockerfile` 所在目录呢？这是因为在默认情况下，如果不额外指定 `Dockerfile` 的话，会将上下文目录下的名为 `Dockerfile` 的文件作为 Dockerfile。\n\n这只是默认行为，实际上 `Dockerfile` 的文件名并不要求必须为 `Dockerfile`，而且并不要求必须位于上下文目录中，比如可以用 `-f ../Dockerfile.php` 参数指定某个文件作为 `Dockerfile`。\n\n当然，一般大家习惯性的会使用默认的文件名 `Dockerfile`，以及会将其置于镜像构建上下文目录中。\n\n## [#](https://www.funtl.com/zh/docs-docker/Docker-使用-Dockerfile-定制镜像.html#其它-docker-build-的用法)其它 `docker build` 的用法\n\n### [#](https://www.funtl.com/zh/docs-docker/Docker-使用-Dockerfile-定制镜像.html#直接用-git-repo-进行构建)直接用 Git repo 进行构建\n\n或许你已经注意到了，`docker build` 还支持从 URL 构建，比如可以直接从 Git repo 中构建：\n\n```bash\n$ docker build https://github.com/twang2218/gitlab-ce-zh.git#:8.14\ndocker build https://github.com/twang2218/gitlab-ce-zh.git\\#:8.14\nSending build context to Docker daemon 2.048 kB\nStep 1 : FROM gitlab/gitlab-ce:8.14.0-ce.0\n8.14.0-ce.0: Pulling from gitlab/gitlab-ce\naed15891ba52: Already exists\n773ae8583d14: Already exists\n...\n```\n\n\n\n这行命令指定了构建所需的 Git repo，并且指定默认的 `master` 分支，构建目录为 `/8.14/`，然后 Docker 就会自己去 `git clone` 这个项目、切换到指定分支、并进入到指定目录后开始构建。","source":"_posts/Docker基础.md","raw":"---\ntitle: Docker基础-镜像\ndate: 2020-07-04 10:25:47\ncategories: docker \ntags: docker\n---\n\n#### Docker 镜像\n\n<!--more-->\n\n##### 分层存储\n\n\n\n因为镜像包含操作系统完整的 `root` 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 [Union FS](https://en.wikipedia.org/wiki/Union_mount) 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。\n\n镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。\n\n分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。\n\n\n\n##### 虚悬镜像\n\n\n\n一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 `<none>`。：\n\n```bash\n<none>               <none>              00285df0df87        5 days ago          342 MB\n```\n\n1\n\n这个镜像原本是有镜像名和标签的，原来为 `mongo:3.2`，随着官方镜像维护，发布了新版本后，重新 `docker pull mongo:3.2` 时，`mongo:3.2` 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 `<none>`。除了 `docker pull` 可能导致这种情况，`docker build` 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 `<none>` 的镜像。这类无标签镜像也被称为 **虚悬镜像(dangling image)** ，可以用下面的命令专门显示这类镜像：\n\n```bash\n$ docker image ls -f dangling=true\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n<none>              <none>              00285df0df87        5 days ago          342 MB\n```\n\n\n\n一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。\n\n```bash\n$ docker image prune\n```\n\n\n\n##### DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）\n\n\n\n如果注意，会看到 `docker build` 命令最后有一个 `.`。`.` 表示当前目录，而 `Dockerfile` 就在当前目录，因此不少初学者以为这个路径是在指定 `Dockerfile` 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定**上下文路径**。那么什么是上下文呢？\n\n首先我们要理解 `docker build` 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 [Docker Remote API](https://docs.docker.com/engine/reference/api/docker_remote_api/)，而如 `docker` 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 `docker` 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。\n\n当我们进行镜像构建的时候，并非所有定制都会通过 `RUN` 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 `COPY` 指令、`ADD` 指令等。而 `docker build` 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？\n\n这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，`docker build` 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。\n\n如果在 `Dockerfile` 中这么写：\n\n```dockerfile\nCOPY ./package.json /app/\n```\n\n\n\n这并不是要复制执行 `docker build` 命令所在的目录下的 `package.json`，也不是复制 `Dockerfile` 所在目录下的 `package.json`，而是复制 **上下文（context）** 目录下的 `package.json`。\n\n因此，`COPY` 这类指令中的源文件的路径都是*相对路径*。这也是初学者经常会问的为什么 `COPY ../package.json /app` 或者 `COPY /opt/xxxx /app` 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。\n\n现在就可以理解刚才的命令 `docker build -t nginx:v3 .` 中的这个 `.`，实际上是在指定上下文的目录，`docker build` 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。\n\n如果观察 `docker build` 输出，我们其实已经看到了这个发送上下文的过程：\n\n```bash\n$ docker build -t nginx:v3 .\nSending build context to Docker daemon 2.048 kB\n...\n```\n\n\n\n理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 `COPY /opt/xxxx /app` 不工作后，于是干脆将 `Dockerfile` 放到了硬盘根目录去构建，结果发现 `docker build` 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 `docker build` 打包整个硬盘，这显然是使用错误。\n\n一般来说，应该会将 `Dockerfile` 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 `.gitignore` 一样的语法写一个 `.dockerignore`，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。\n\n那么为什么会有人误以为 `.` 是指定 `Dockerfile` 所在目录呢？这是因为在默认情况下，如果不额外指定 `Dockerfile` 的话，会将上下文目录下的名为 `Dockerfile` 的文件作为 Dockerfile。\n\n这只是默认行为，实际上 `Dockerfile` 的文件名并不要求必须为 `Dockerfile`，而且并不要求必须位于上下文目录中，比如可以用 `-f ../Dockerfile.php` 参数指定某个文件作为 `Dockerfile`。\n\n当然，一般大家习惯性的会使用默认的文件名 `Dockerfile`，以及会将其置于镜像构建上下文目录中。\n\n## [#](https://www.funtl.com/zh/docs-docker/Docker-使用-Dockerfile-定制镜像.html#其它-docker-build-的用法)其它 `docker build` 的用法\n\n### [#](https://www.funtl.com/zh/docs-docker/Docker-使用-Dockerfile-定制镜像.html#直接用-git-repo-进行构建)直接用 Git repo 进行构建\n\n或许你已经注意到了，`docker build` 还支持从 URL 构建，比如可以直接从 Git repo 中构建：\n\n```bash\n$ docker build https://github.com/twang2218/gitlab-ce-zh.git#:8.14\ndocker build https://github.com/twang2218/gitlab-ce-zh.git\\#:8.14\nSending build context to Docker daemon 2.048 kB\nStep 1 : FROM gitlab/gitlab-ce:8.14.0-ce.0\n8.14.0-ce.0: Pulling from gitlab/gitlab-ce\naed15891ba52: Already exists\n773ae8583d14: Already exists\n...\n```\n\n\n\n这行命令指定了构建所需的 Git repo，并且指定默认的 `master` 分支，构建目录为 `/8.14/`，然后 Docker 就会自己去 `git clone` 这个项目、切换到指定分支、并进入到指定目录后开始构建。","slug":"Docker基础","published":1,"updated":"2020-08-01T03:43:37.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbmi0005g0v851ztg27x","content":"<h4 id=\"Docker-镜像\"><a href=\"#Docker-镜像\" class=\"headerlink\" title=\"Docker 镜像\"></a>Docker 镜像</h4><a id=\"more\"></a>\n\n<h5 id=\"分层存储\"><a href=\"#分层存储\" class=\"headerlink\" title=\"分层存储\"></a>分层存储</h5><p>因为镜像包含操作系统完整的 <code>root</code> 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 <a href=\"https://en.wikipedia.org/wiki/Union_mount\" target=\"_blank\" rel=\"noopener\">Union FS</a> 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p>\n<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>\n<p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p>\n<h5 id=\"虚悬镜像\"><a href=\"#虚悬镜像\" class=\"headerlink\" title=\"虚悬镜像\"></a>虚悬镜像</h5><p>一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 <code>&lt;none&gt;</code>。：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;none&gt;               &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br></pre></td></tr></table></figure>\n\n<p>1</p>\n<p>这个镜像原本是有镜像名和标签的，原来为 <code>mongo:3.2</code>，随着官方镜像维护，发布了新版本后，重新 <code>docker pull mongo:3.2</code> 时，<code>mongo:3.2</code> 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 <code>&lt;none&gt;</code>。除了 <code>docker pull</code> 可能导致这种情况，<code>docker build</code> 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code> 的镜像。这类无标签镜像也被称为 <strong>虚悬镜像(dangling image)</strong> ，可以用下面的命令专门显示这类镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls -f dangling=<span class=\"literal\">true</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">&lt;none&gt;              &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image prune</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）\"><a href=\"#DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）\" class=\"headerlink\" title=\"DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）\"></a>DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）</h5><p>如果注意，会看到 <code>docker build</code> 命令最后有一个 <code>.</code>。<code>.</code> 表示当前目录，而 <code>Dockerfile</code> 就在当前目录，因此不少初学者以为这个路径是在指定 <code>Dockerfile</code> 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定<strong>上下文路径</strong>。那么什么是上下文呢？</p>\n<p>首先我们要理解 <code>docker build</code> 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 <a href=\"https://docs.docker.com/engine/reference/api/docker_remote_api/\" target=\"_blank\" rel=\"noopener\">Docker Remote API</a>，而如 <code>docker</code> 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 <code>docker</code> 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。</p>\n<p>当我们进行镜像构建的时候，并非所有定制都会通过 <code>RUN</code> 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 <code>COPY</code> 指令、<code>ADD</code> 指令等。而 <code>docker build</code> 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？</p>\n<p>这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，<code>docker build</code> 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。</p>\n<p>如果在 <code>Dockerfile</code> 中这么写：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这并不是要复制执行 <code>docker build</code> 命令所在的目录下的 <code>package.json</code>，也不是复制 <code>Dockerfile</code> 所在目录下的 <code>package.json</code>，而是复制 <strong>上下文（context）</strong> 目录下的 <code>package.json</code>。</p>\n<p>因此，<code>COPY</code> 这类指令中的源文件的路径都是<em>相对路径</em>。这也是初学者经常会问的为什么 <code>COPY ../package.json /app</code> 或者 <code>COPY /opt/xxxx /app</code> 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。</p>\n<p>现在就可以理解刚才的命令 <code>docker build -t nginx:v3 .</code> 中的这个 <code>.</code>，实际上是在指定上下文的目录，<code>docker build</code> 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。</p>\n<p>如果观察 <code>docker build</code> 输出，我们其实已经看到了这个发送上下文的过程：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t nginx:v3 .</span><br><span class=\"line\">Sending build context to Docker daemon 2.048 kB</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 <code>COPY /opt/xxxx /app</code> 不工作后，于是干脆将 <code>Dockerfile</code> 放到了硬盘根目录去构建，结果发现 <code>docker build</code> 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 <code>docker build</code> 打包整个硬盘，这显然是使用错误。</p>\n<p>一般来说，应该会将 <code>Dockerfile</code> 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 <code>.gitignore</code> 一样的语法写一个 <code>.dockerignore</code>，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。</p>\n<p>那么为什么会有人误以为 <code>.</code> 是指定 <code>Dockerfile</code> 所在目录呢？这是因为在默认情况下，如果不额外指定 <code>Dockerfile</code> 的话，会将上下文目录下的名为 <code>Dockerfile</code> 的文件作为 Dockerfile。</p>\n<p>这只是默认行为，实际上 <code>Dockerfile</code> 的文件名并不要求必须为 <code>Dockerfile</code>，而且并不要求必须位于上下文目录中，比如可以用 <code>-f ../Dockerfile.php</code> 参数指定某个文件作为 <code>Dockerfile</code>。</p>\n<p>当然，一般大家习惯性的会使用默认的文件名 <code>Dockerfile</code>，以及会将其置于镜像构建上下文目录中。</p>\n<h2 id=\"其它-docker-build-的用法\"><a href=\"#其它-docker-build-的用法\" class=\"headerlink\" title=\"#其它 docker build 的用法\"></a><a href=\"https://www.funtl.com/zh/docs-docker/Docker-使用-Dockerfile-定制镜像.html#其它-docker-build-的用法\" target=\"_blank\" rel=\"noopener\">#</a>其它 <code>docker build</code> 的用法</h2><h3 id=\"直接用-Git-repo-进行构建\"><a href=\"#直接用-Git-repo-进行构建\" class=\"headerlink\" title=\"#直接用 Git repo 进行构建\"></a><a href=\"https://www.funtl.com/zh/docs-docker/Docker-使用-Dockerfile-定制镜像.html#直接用-git-repo-进行构建\" target=\"_blank\" rel=\"noopener\">#</a>直接用 Git repo 进行构建</h3><p>或许你已经注意到了，<code>docker build</code> 还支持从 URL 构建，比如可以直接从 Git repo 中构建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build https://github.com/twang2218/gitlab-ce-zh.git<span class=\"comment\">#:8.14</span></span><br><span class=\"line\">docker build https://github.com/twang2218/gitlab-ce-zh.git\\<span class=\"comment\">#:8.14</span></span><br><span class=\"line\">Sending build context to Docker daemon 2.048 kB</span><br><span class=\"line\">Step 1 : FROM gitlab/gitlab-ce:8.14.0-ce.0</span><br><span class=\"line\">8.14.0-ce.0: Pulling from gitlab/gitlab-ce</span><br><span class=\"line\">aed15891ba52: Already exists</span><br><span class=\"line\">773ae8583d14: Already exists</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这行命令指定了构建所需的 Git repo，并且指定默认的 <code>master</code> 分支，构建目录为 <code>/8.14/</code>，然后 Docker 就会自己去 <code>git clone</code> 这个项目、切换到指定分支、并进入到指定目录后开始构建。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"Docker-镜像\"><a href=\"#Docker-镜像\" class=\"headerlink\" title=\"Docker 镜像\"></a>Docker 镜像</h4>","more":"<h5 id=\"分层存储\"><a href=\"#分层存储\" class=\"headerlink\" title=\"分层存储\"></a>分层存储</h5><p>因为镜像包含操作系统完整的 <code>root</code> 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 <a href=\"https://en.wikipedia.org/wiki/Union_mount\" target=\"_blank\" rel=\"noopener\">Union FS</a> 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p>\n<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>\n<p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p>\n<h5 id=\"虚悬镜像\"><a href=\"#虚悬镜像\" class=\"headerlink\" title=\"虚悬镜像\"></a>虚悬镜像</h5><p>一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 <code>&lt;none&gt;</code>。：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;none&gt;               &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br></pre></td></tr></table></figure>\n\n<p>1</p>\n<p>这个镜像原本是有镜像名和标签的，原来为 <code>mongo:3.2</code>，随着官方镜像维护，发布了新版本后，重新 <code>docker pull mongo:3.2</code> 时，<code>mongo:3.2</code> 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 <code>&lt;none&gt;</code>。除了 <code>docker pull</code> 可能导致这种情况，<code>docker build</code> 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code> 的镜像。这类无标签镜像也被称为 <strong>虚悬镜像(dangling image)</strong> ，可以用下面的命令专门显示这类镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls -f dangling=<span class=\"literal\">true</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">&lt;none&gt;              &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image prune</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）\"><a href=\"#DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）\" class=\"headerlink\" title=\"DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）\"></a>DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）</h5><p>如果注意，会看到 <code>docker build</code> 命令最后有一个 <code>.</code>。<code>.</code> 表示当前目录，而 <code>Dockerfile</code> 就在当前目录，因此不少初学者以为这个路径是在指定 <code>Dockerfile</code> 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定<strong>上下文路径</strong>。那么什么是上下文呢？</p>\n<p>首先我们要理解 <code>docker build</code> 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 <a href=\"https://docs.docker.com/engine/reference/api/docker_remote_api/\" target=\"_blank\" rel=\"noopener\">Docker Remote API</a>，而如 <code>docker</code> 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 <code>docker</code> 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。</p>\n<p>当我们进行镜像构建的时候，并非所有定制都会通过 <code>RUN</code> 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 <code>COPY</code> 指令、<code>ADD</code> 指令等。而 <code>docker build</code> 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？</p>\n<p>这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，<code>docker build</code> 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。</p>\n<p>如果在 <code>Dockerfile</code> 中这么写：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这并不是要复制执行 <code>docker build</code> 命令所在的目录下的 <code>package.json</code>，也不是复制 <code>Dockerfile</code> 所在目录下的 <code>package.json</code>，而是复制 <strong>上下文（context）</strong> 目录下的 <code>package.json</code>。</p>\n<p>因此，<code>COPY</code> 这类指令中的源文件的路径都是<em>相对路径</em>。这也是初学者经常会问的为什么 <code>COPY ../package.json /app</code> 或者 <code>COPY /opt/xxxx /app</code> 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。</p>\n<p>现在就可以理解刚才的命令 <code>docker build -t nginx:v3 .</code> 中的这个 <code>.</code>，实际上是在指定上下文的目录，<code>docker build</code> 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。</p>\n<p>如果观察 <code>docker build</code> 输出，我们其实已经看到了这个发送上下文的过程：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t nginx:v3 .</span><br><span class=\"line\">Sending build context to Docker daemon 2.048 kB</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 <code>COPY /opt/xxxx /app</code> 不工作后，于是干脆将 <code>Dockerfile</code> 放到了硬盘根目录去构建，结果发现 <code>docker build</code> 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 <code>docker build</code> 打包整个硬盘，这显然是使用错误。</p>\n<p>一般来说，应该会将 <code>Dockerfile</code> 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 <code>.gitignore</code> 一样的语法写一个 <code>.dockerignore</code>，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。</p>\n<p>那么为什么会有人误以为 <code>.</code> 是指定 <code>Dockerfile</code> 所在目录呢？这是因为在默认情况下，如果不额外指定 <code>Dockerfile</code> 的话，会将上下文目录下的名为 <code>Dockerfile</code> 的文件作为 Dockerfile。</p>\n<p>这只是默认行为，实际上 <code>Dockerfile</code> 的文件名并不要求必须为 <code>Dockerfile</code>，而且并不要求必须位于上下文目录中，比如可以用 <code>-f ../Dockerfile.php</code> 参数指定某个文件作为 <code>Dockerfile</code>。</p>\n<p>当然，一般大家习惯性的会使用默认的文件名 <code>Dockerfile</code>，以及会将其置于镜像构建上下文目录中。</p>\n<h2 id=\"其它-docker-build-的用法\"><a href=\"#其它-docker-build-的用法\" class=\"headerlink\" title=\"#其它 docker build 的用法\"></a><a href=\"https://www.funtl.com/zh/docs-docker/Docker-使用-Dockerfile-定制镜像.html#其它-docker-build-的用法\" target=\"_blank\" rel=\"noopener\">#</a>其它 <code>docker build</code> 的用法</h2><h3 id=\"直接用-Git-repo-进行构建\"><a href=\"#直接用-Git-repo-进行构建\" class=\"headerlink\" title=\"#直接用 Git repo 进行构建\"></a><a href=\"https://www.funtl.com/zh/docs-docker/Docker-使用-Dockerfile-定制镜像.html#直接用-git-repo-进行构建\" target=\"_blank\" rel=\"noopener\">#</a>直接用 Git repo 进行构建</h3><p>或许你已经注意到了，<code>docker build</code> 还支持从 URL 构建，比如可以直接从 Git repo 中构建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build https://github.com/twang2218/gitlab-ce-zh.git<span class=\"comment\">#:8.14</span></span><br><span class=\"line\">docker build https://github.com/twang2218/gitlab-ce-zh.git\\<span class=\"comment\">#:8.14</span></span><br><span class=\"line\">Sending build context to Docker daemon 2.048 kB</span><br><span class=\"line\">Step 1 : FROM gitlab/gitlab-ce:8.14.0-ce.0</span><br><span class=\"line\">8.14.0-ce.0: Pulling from gitlab/gitlab-ce</span><br><span class=\"line\">aed15891ba52: Already exists</span><br><span class=\"line\">773ae8583d14: Already exists</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这行命令指定了构建所需的 Git repo，并且指定默认的 <code>master</code> 分支，构建目录为 <code>/8.14/</code>，然后 Docker 就会自己去 <code>git clone</code> 这个项目、切换到指定分支、并进入到指定目录后开始构建。</p>"},{"title":"Mybatis 缓存 的知识点","date":"2020-02-22T03:26:59.000Z","_content":"\n像大多数的持久化框架一样，Mybatis 也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提 高性能。 \n\n<!--more-->\n\n##### Mybatis 中缓存分为一级缓存，二级缓存。\n![一级和二级缓存](https://img-blog.csdnimg.cn/20200222111725745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n##### 一级缓存\n一级缓存是 SqlSession 级别的缓存，只要 SqlSession 没有 flush 或 close，它就存在。 \n一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等\n###### 二级缓存\n二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个 SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的\n######  二级缓存的开启与关闭 \n2.2.2.1 第一步：在 SqlMapConfig.xml 文件开启二级缓存 \n\n```\n<settings> \n <!-- 开启二级缓存的支持 --> \n  <setting name=\"cacheEnabled\" value=\"true\"/>\n</settings> \n```\n\n因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略不配置。为 true 代表开启二级缓存；为 false 代表不开启二级缓存。 \n######  第二步：配置相关的 Mapper 映射文件 \n<cache>标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值。\n\n```\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t <!DOCTYPE mapper     PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"     \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"> \n\t<mapper namespace=\"com.itheima.dao.IUserDao\">\n  <!-- 开启二级缓存的支持 -->  \n  <cache></cache> \n  </mapper> \n```\n\n###### 第三步：配置 statement 上面的 useCache 属性 \n\n```\n<!-- 根据 id 查询 --> \n<select id=\"findById\" resultType=\"user\" parameterType=\"int\" useCache=\"true\">\n  select * from user where id = #{uid} \n  </select> \n```\n\n将 UserDao.xml 映射文件中的<select>标签中设置 useCache=”true”代表当前这个 statement 要使用 二级缓存，如果不使用二级缓存可以设置为 false。 注意：针对每次查询都需要最新的数据 sql，要设置成 useCache=false，禁用二级缓存","source":"_posts/Mybatis-缓存-的知识点.md","raw":"---\ntitle: Mybatis 缓存 的知识点\ndate: 2020-02-22 11:26:59 \ncategories: mybatis\ntags: mybatis\n---\n\n像大多数的持久化框架一样，Mybatis 也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提 高性能。 \n\n<!--more-->\n\n##### Mybatis 中缓存分为一级缓存，二级缓存。\n![一级和二级缓存](https://img-blog.csdnimg.cn/20200222111725745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n##### 一级缓存\n一级缓存是 SqlSession 级别的缓存，只要 SqlSession 没有 flush 或 close，它就存在。 \n一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等\n###### 二级缓存\n二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个 SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的\n######  二级缓存的开启与关闭 \n2.2.2.1 第一步：在 SqlMapConfig.xml 文件开启二级缓存 \n\n```\n<settings> \n <!-- 开启二级缓存的支持 --> \n  <setting name=\"cacheEnabled\" value=\"true\"/>\n</settings> \n```\n\n因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略不配置。为 true 代表开启二级缓存；为 false 代表不开启二级缓存。 \n######  第二步：配置相关的 Mapper 映射文件 \n<cache>标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值。\n\n```\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t <!DOCTYPE mapper     PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"     \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"> \n\t<mapper namespace=\"com.itheima.dao.IUserDao\">\n  <!-- 开启二级缓存的支持 -->  \n  <cache></cache> \n  </mapper> \n```\n\n###### 第三步：配置 statement 上面的 useCache 属性 \n\n```\n<!-- 根据 id 查询 --> \n<select id=\"findById\" resultType=\"user\" parameterType=\"int\" useCache=\"true\">\n  select * from user where id = #{uid} \n  </select> \n```\n\n将 UserDao.xml 映射文件中的<select>标签中设置 useCache=”true”代表当前这个 statement 要使用 二级缓存，如果不使用二级缓存可以设置为 false。 注意：针对每次查询都需要最新的数据 sql，要设置成 useCache=false，禁用二级缓存","slug":"Mybatis-缓存-的知识点","published":1,"updated":"2020-08-01T03:43:37.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbmj0006g0v8h6t52gle","content":"<p>像大多数的持久化框架一样，Mybatis 也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提 高性能。 </p>\n<a id=\"more\"></a>\n\n<h5 id=\"Mybatis-中缓存分为一级缓存，二级缓存。\"><a href=\"#Mybatis-中缓存分为一级缓存，二级缓存。\" class=\"headerlink\" title=\"Mybatis 中缓存分为一级缓存，二级缓存。\"></a>Mybatis 中缓存分为一级缓存，二级缓存。</h5><p><img src=\"https://img-blog.csdnimg.cn/20200222111725745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"一级和二级缓存\"></p>\n<h5 id=\"一级缓存\"><a href=\"#一级缓存\" class=\"headerlink\" title=\"一级缓存\"></a>一级缓存</h5><p>一级缓存是 SqlSession 级别的缓存，只要 SqlSession 没有 flush 或 close，它就存在。<br>一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等</p>\n<h6 id=\"二级缓存\"><a href=\"#二级缓存\" class=\"headerlink\" title=\"二级缓存\"></a>二级缓存</h6><p>二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个 SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的</p>\n<h6 id=\"二级缓存的开启与关闭\"><a href=\"#二级缓存的开启与关闭\" class=\"headerlink\" title=\"二级缓存的开启与关闭\"></a>二级缓存的开启与关闭</h6><p>2.2.2.1 第一步：在 SqlMapConfig.xml 文件开启二级缓存 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings&gt; </span><br><span class=\"line\"> &lt;!-- 开启二级缓存的支持 --&gt; </span><br><span class=\"line\">  &lt;setting name&#x3D;&quot;cacheEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure>\n\n<p>因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略不配置。为 true 代表开启二级缓存；为 false 代表不开启二级缓存。 </p>\n<h6 id=\"第二步：配置相关的-Mapper-映射文件\"><a href=\"#第二步：配置相关的-Mapper-映射文件\" class=\"headerlink\" title=\"第二步：配置相关的 Mapper 映射文件\"></a>第二步：配置相关的 Mapper 映射文件</h6><p><cache>标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\"> &lt;!DOCTYPE mapper     PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;     &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt; </span><br><span class=\"line\">&lt;mapper namespace&#x3D;&quot;com.itheima.dao.IUserDao&quot;&gt;</span><br><span class=\"line\"> &lt;!-- 开启二级缓存的支持 --&gt;  </span><br><span class=\"line\"> &lt;cache&gt;&lt;&#x2F;cache&gt; </span><br><span class=\"line\"> &lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"第三步：配置-statement-上面的-useCache-属性\"><a href=\"#第三步：配置-statement-上面的-useCache-属性\" class=\"headerlink\" title=\"第三步：配置 statement 上面的 useCache 属性\"></a>第三步：配置 statement 上面的 useCache 属性</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 根据 id 查询 --&gt; </span><br><span class=\"line\">&lt;select id&#x3D;&quot;findById&quot; resultType&#x3D;&quot;user&quot; parameterType&#x3D;&quot;int&quot; useCache&#x3D;&quot;true&quot;&gt;</span><br><span class=\"line\">  select * from user where id &#x3D; #&#123;uid&#125; </span><br><span class=\"line\">  &lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将 UserDao.xml 映射文件中的<select>标签中设置 useCache=”true”代表当前这个 statement 要使用 二级缓存，如果不使用二级缓存可以设置为 false。 注意：针对每次查询都需要最新的数据 sql，要设置成 useCache=false，禁用二级缓存</p>\n","site":{"data":{}},"excerpt":"<p>像大多数的持久化框架一样，Mybatis 也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提 高性能。 </p>","more":"<h5 id=\"Mybatis-中缓存分为一级缓存，二级缓存。\"><a href=\"#Mybatis-中缓存分为一级缓存，二级缓存。\" class=\"headerlink\" title=\"Mybatis 中缓存分为一级缓存，二级缓存。\"></a>Mybatis 中缓存分为一级缓存，二级缓存。</h5><p><img src=\"https://img-blog.csdnimg.cn/20200222111725745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"一级和二级缓存\"></p>\n<h5 id=\"一级缓存\"><a href=\"#一级缓存\" class=\"headerlink\" title=\"一级缓存\"></a>一级缓存</h5><p>一级缓存是 SqlSession 级别的缓存，只要 SqlSession 没有 flush 或 close，它就存在。<br>一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等</p>\n<h6 id=\"二级缓存\"><a href=\"#二级缓存\" class=\"headerlink\" title=\"二级缓存\"></a>二级缓存</h6><p>二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个 SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的</p>\n<h6 id=\"二级缓存的开启与关闭\"><a href=\"#二级缓存的开启与关闭\" class=\"headerlink\" title=\"二级缓存的开启与关闭\"></a>二级缓存的开启与关闭</h6><p>2.2.2.1 第一步：在 SqlMapConfig.xml 文件开启二级缓存 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings&gt; </span><br><span class=\"line\"> &lt;!-- 开启二级缓存的支持 --&gt; </span><br><span class=\"line\">  &lt;setting name&#x3D;&quot;cacheEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure>\n\n<p>因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略不配置。为 true 代表开启二级缓存；为 false 代表不开启二级缓存。 </p>\n<h6 id=\"第二步：配置相关的-Mapper-映射文件\"><a href=\"#第二步：配置相关的-Mapper-映射文件\" class=\"headerlink\" title=\"第二步：配置相关的 Mapper 映射文件\"></a>第二步：配置相关的 Mapper 映射文件</h6><p><cache>标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\"> &lt;!DOCTYPE mapper     PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;     &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt; </span><br><span class=\"line\">&lt;mapper namespace&#x3D;&quot;com.itheima.dao.IUserDao&quot;&gt;</span><br><span class=\"line\"> &lt;!-- 开启二级缓存的支持 --&gt;  </span><br><span class=\"line\"> &lt;cache&gt;&lt;&#x2F;cache&gt; </span><br><span class=\"line\"> &lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"第三步：配置-statement-上面的-useCache-属性\"><a href=\"#第三步：配置-statement-上面的-useCache-属性\" class=\"headerlink\" title=\"第三步：配置 statement 上面的 useCache 属性\"></a>第三步：配置 statement 上面的 useCache 属性</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 根据 id 查询 --&gt; </span><br><span class=\"line\">&lt;select id&#x3D;&quot;findById&quot; resultType&#x3D;&quot;user&quot; parameterType&#x3D;&quot;int&quot; useCache&#x3D;&quot;true&quot;&gt;</span><br><span class=\"line\">  select * from user where id &#x3D; #&#123;uid&#125; </span><br><span class=\"line\">  &lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将 UserDao.xml 映射文件中的<select>标签中设置 useCache=”true”代表当前这个 statement 要使用 二级缓存，如果不使用二级缓存可以设置为 false。 注意：针对每次查询都需要最新的数据 sql，要设置成 useCache=false，禁用二级缓存</p>"},{"title":"SpringCloud的学习与使用","date":"2020-08-23T07:17:53.000Z","_content":"\n### SpringCloud\n\nSpring Cloud 是一套完整的微服务解决方案，基于 Spring Boot 框架，准确的说，它不是一个框架，而是一个大的容器，它将市面上较好的微服务框架集成进来，从而简化了开发者的代码量。\n\n<!--more-->\n\n#### 项目构建\n\n##### 学习的版本说明与记录\n\nspringBoot2.x版和springcloud H版\n\nspringcloud与springboot版本对应：\nhttps://start.spring.io/actuator/info\n\n```json\n\"spring-cloud\": {\n      \"Finchley.M2\": \"Spring Boot >=2.0.0.M3 and <2.0.0.M5\",\n      \"Finchley.M3\": \"Spring Boot >=2.0.0.M5 and <=2.0.0.M5\",\n      \"Finchley.M4\": \"Spring Boot >=2.0.0.M6 and <=2.0.0.M6\",\n      \"Finchley.M5\": \"Spring Boot >=2.0.0.M7 and <=2.0.0.M7\",\n      \"Finchley.M6\": \"Spring Boot >=2.0.0.RC1 and <=2.0.0.RC1\",\n      \"Finchley.M7\": \"Spring Boot >=2.0.0.RC2 and <=2.0.0.RC2\",\n      \"Finchley.M9\": \"Spring Boot >=2.0.0.RELEASE and <=2.0.0.RELEASE\",\n      \"Finchley.RC1\": \"Spring Boot >=2.0.1.RELEASE and <2.0.2.RELEASE\",\n      \"Finchley.RC2\": \"Spring Boot >=2.0.2.RELEASE and <2.0.3.RELEASE\",\n      \"Finchley.SR4\": \"Spring Boot >=2.0.3.RELEASE and <2.0.999.BUILD-SNAPSHOT\",\n      \"Finchley.BUILD-SNAPSHOT\": \"Spring Boot >=2.0.999.BUILD-SNAPSHOT and <2.1.0.M3\",\n      \"Greenwich.M1\": \"Spring Boot >=2.1.0.M3 and <2.1.0.RELEASE\",\n      \"Greenwich.SR6\": \"Spring Boot >=2.1.0.RELEASE and <2.1.17.BUILD-SNAPSHOT\",\n      \"Greenwich.BUILD-SNAPSHOT\": \"Spring Boot >=2.1.17.BUILD-SNAPSHOT and <2.2.0.M4\",\n      \"Hoxton.SR7\": \"Spring Boot >=2.2.0.M4 and <2.3.4.BUILD-SNAPSHOT\",\n      \"Hoxton.BUILD-SNAPSHOT\": \"Spring Boot >=2.3.4.BUILD-SNAPSHOT and <2.4.0.M1\",\n      \"2020.0.0-SNAPSHOT\": \"Spring Boot >=2.4.0.M1\"\n    },\n    \"spring-cloud-alibaba\": {\n      \"2.2.1.RELEASE\": \"Spring Boot >=2.2.0.RELEASE and <2.3.0.M1\"\n    },\n    \"spring-cloud-services\": {\n      \"2.0.3.RELEASE\": \"Spring Boot >=2.0.0.RELEASE and <2.1.0.RELEASE\",\n      \"2.1.7.RELEASE\": \"Spring Boot >=2.1.0.RELEASE and <2.2.0.RELEASE\",\n      \"2.2.3.RELEASE\": \"Spring Boot >=2.2.0.RELEASE and <2.3.0.M1\"\n    },\n```\n\nspring cloud:Hoxton.SR1\n\nspringboot:2.2.2RELEASE\n\nspring cloud alibaba 2.1.0RELEASE\n\n\n\n##### 组件选用\n\n服务于注册中心：\n\nEureka(停更)  ZooKeeper \tConsul   Nacos(主要使用)\n\n服务调用：\n\nRibbon（维护） LoadBalancer\n\n服务调用2：\n\nFeign(停更)  OpenFeign\n\n服务熔断与降级：Hystrix(停更)  resilience4j  sentienal(alibaba 国内主要使用)\n\n服务网关：\n\nZuul(停更)   gateWay(主要使用)\n\n服务配置：\n\nconfig（停更） Nacos\n\n服务总线：Nacos\n\n\n\n##### 微服务模块的建立\n\n1建module\n\n2改pom\n\n3写yml\n\n4主启动\n\n5业务类\n\n\n\n##### 一些小知识点\n\npom:<dependencyManagement></dependencyManagement>\n\n```\n-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version \n```\n\n\n\n ","source":"_posts/SpringCloud的学习与使用.md","raw":"---\ntitle: SpringCloud的学习与使用\ndate: 2020-08-23 15:17:53\ncategories: 微服务 - SpringCloud\ntags: SpringCloud\n---\n\n### SpringCloud\n\nSpring Cloud 是一套完整的微服务解决方案，基于 Spring Boot 框架，准确的说，它不是一个框架，而是一个大的容器，它将市面上较好的微服务框架集成进来，从而简化了开发者的代码量。\n\n<!--more-->\n\n#### 项目构建\n\n##### 学习的版本说明与记录\n\nspringBoot2.x版和springcloud H版\n\nspringcloud与springboot版本对应：\nhttps://start.spring.io/actuator/info\n\n```json\n\"spring-cloud\": {\n      \"Finchley.M2\": \"Spring Boot >=2.0.0.M3 and <2.0.0.M5\",\n      \"Finchley.M3\": \"Spring Boot >=2.0.0.M5 and <=2.0.0.M5\",\n      \"Finchley.M4\": \"Spring Boot >=2.0.0.M6 and <=2.0.0.M6\",\n      \"Finchley.M5\": \"Spring Boot >=2.0.0.M7 and <=2.0.0.M7\",\n      \"Finchley.M6\": \"Spring Boot >=2.0.0.RC1 and <=2.0.0.RC1\",\n      \"Finchley.M7\": \"Spring Boot >=2.0.0.RC2 and <=2.0.0.RC2\",\n      \"Finchley.M9\": \"Spring Boot >=2.0.0.RELEASE and <=2.0.0.RELEASE\",\n      \"Finchley.RC1\": \"Spring Boot >=2.0.1.RELEASE and <2.0.2.RELEASE\",\n      \"Finchley.RC2\": \"Spring Boot >=2.0.2.RELEASE and <2.0.3.RELEASE\",\n      \"Finchley.SR4\": \"Spring Boot >=2.0.3.RELEASE and <2.0.999.BUILD-SNAPSHOT\",\n      \"Finchley.BUILD-SNAPSHOT\": \"Spring Boot >=2.0.999.BUILD-SNAPSHOT and <2.1.0.M3\",\n      \"Greenwich.M1\": \"Spring Boot >=2.1.0.M3 and <2.1.0.RELEASE\",\n      \"Greenwich.SR6\": \"Spring Boot >=2.1.0.RELEASE and <2.1.17.BUILD-SNAPSHOT\",\n      \"Greenwich.BUILD-SNAPSHOT\": \"Spring Boot >=2.1.17.BUILD-SNAPSHOT and <2.2.0.M4\",\n      \"Hoxton.SR7\": \"Spring Boot >=2.2.0.M4 and <2.3.4.BUILD-SNAPSHOT\",\n      \"Hoxton.BUILD-SNAPSHOT\": \"Spring Boot >=2.3.4.BUILD-SNAPSHOT and <2.4.0.M1\",\n      \"2020.0.0-SNAPSHOT\": \"Spring Boot >=2.4.0.M1\"\n    },\n    \"spring-cloud-alibaba\": {\n      \"2.2.1.RELEASE\": \"Spring Boot >=2.2.0.RELEASE and <2.3.0.M1\"\n    },\n    \"spring-cloud-services\": {\n      \"2.0.3.RELEASE\": \"Spring Boot >=2.0.0.RELEASE and <2.1.0.RELEASE\",\n      \"2.1.7.RELEASE\": \"Spring Boot >=2.1.0.RELEASE and <2.2.0.RELEASE\",\n      \"2.2.3.RELEASE\": \"Spring Boot >=2.2.0.RELEASE and <2.3.0.M1\"\n    },\n```\n\nspring cloud:Hoxton.SR1\n\nspringboot:2.2.2RELEASE\n\nspring cloud alibaba 2.1.0RELEASE\n\n\n\n##### 组件选用\n\n服务于注册中心：\n\nEureka(停更)  ZooKeeper \tConsul   Nacos(主要使用)\n\n服务调用：\n\nRibbon（维护） LoadBalancer\n\n服务调用2：\n\nFeign(停更)  OpenFeign\n\n服务熔断与降级：Hystrix(停更)  resilience4j  sentienal(alibaba 国内主要使用)\n\n服务网关：\n\nZuul(停更)   gateWay(主要使用)\n\n服务配置：\n\nconfig（停更） Nacos\n\n服务总线：Nacos\n\n\n\n##### 微服务模块的建立\n\n1建module\n\n2改pom\n\n3写yml\n\n4主启动\n\n5业务类\n\n\n\n##### 一些小知识点\n\npom:<dependencyManagement></dependencyManagement>\n\n```\n-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version \n```\n\n\n\n ","slug":"SpringCloud的学习与使用","published":1,"updated":"2020-10-18T08:24:24.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbmk000ag0v874ff2g87","content":"<h3 id=\"SpringCloud\"><a href=\"#SpringCloud\" class=\"headerlink\" title=\"SpringCloud\"></a>SpringCloud</h3><p>Spring Cloud 是一套完整的微服务解决方案，基于 Spring Boot 框架，准确的说，它不是一个框架，而是一个大的容器，它将市面上较好的微服务框架集成进来，从而简化了开发者的代码量。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"项目构建\"><a href=\"#项目构建\" class=\"headerlink\" title=\"项目构建\"></a>项目构建</h4><h5 id=\"学习的版本说明与记录\"><a href=\"#学习的版本说明与记录\" class=\"headerlink\" title=\"学习的版本说明与记录\"></a>学习的版本说明与记录</h5><p>springBoot2.x版和springcloud H版</p>\n<p>springcloud与springboot版本对应：<br><a href=\"https://start.spring.io/actuator/info\" target=\"_blank\" rel=\"noopener\">https://start.spring.io/actuator/info</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"spring-cloud\": &#123;</span><br><span class=\"line\">      \"Finchley.M2\": \"Spring Boot &gt;=2.0.0.M3 and &lt;2.0.0.M5\",</span><br><span class=\"line\">      \"Finchley.M3\": \"Spring Boot &gt;=2.0.0.M5 and &lt;=2.0.0.M5\",</span><br><span class=\"line\">      \"Finchley.M4\": \"Spring Boot &gt;=2.0.0.M6 and &lt;=2.0.0.M6\",</span><br><span class=\"line\">      \"Finchley.M5\": \"Spring Boot &gt;=2.0.0.M7 and &lt;=2.0.0.M7\",</span><br><span class=\"line\">      \"Finchley.M6\": \"Spring Boot &gt;=2.0.0.RC1 and &lt;=2.0.0.RC1\",</span><br><span class=\"line\">      \"Finchley.M7\": \"Spring Boot &gt;=2.0.0.RC2 and &lt;=2.0.0.RC2\",</span><br><span class=\"line\">      \"Finchley.M9\": \"Spring Boot &gt;=2.0.0.RELEASE and &lt;=2.0.0.RELEASE\",</span><br><span class=\"line\">      \"Finchley.RC1\": \"Spring Boot &gt;=2.0.1.RELEASE and &lt;2.0.2.RELEASE\",</span><br><span class=\"line\">      \"Finchley.RC2\": \"Spring Boot &gt;=2.0.2.RELEASE and &lt;2.0.3.RELEASE\",</span><br><span class=\"line\">      \"Finchley.SR4\": \"Spring Boot &gt;=2.0.3.RELEASE and &lt;2.0.999.BUILD-SNAPSHOT\",</span><br><span class=\"line\">      \"Finchley.BUILD-SNAPSHOT\": \"Spring Boot &gt;=2.0.999.BUILD-SNAPSHOT and &lt;2.1.0.M3\",</span><br><span class=\"line\">      \"Greenwich.M1\": \"Spring Boot &gt;=2.1.0.M3 and &lt;2.1.0.RELEASE\",</span><br><span class=\"line\">      \"Greenwich.SR6\": \"Spring Boot &gt;=2.1.0.RELEASE and &lt;2.1.17.BUILD-SNAPSHOT\",</span><br><span class=\"line\">      \"Greenwich.BUILD-SNAPSHOT\": \"Spring Boot &gt;=2.1.17.BUILD-SNAPSHOT and &lt;2.2.0.M4\",</span><br><span class=\"line\">      \"Hoxton.SR7\": \"Spring Boot &gt;=2.2.0.M4 and &lt;2.3.4.BUILD-SNAPSHOT\",</span><br><span class=\"line\">      \"Hoxton.BUILD-SNAPSHOT\": \"Spring Boot &gt;=2.3.4.BUILD-SNAPSHOT and &lt;2.4.0.M1\",</span><br><span class=\"line\">      \"2020.0.0-SNAPSHOT\": \"Spring Boot &gt;=2.4.0.M1\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"spring-cloud-alibaba\": &#123;</span><br><span class=\"line\">      \"2.2.1.RELEASE\": \"Spring Boot &gt;=2.2.0.RELEASE and &lt;2.3.0.M1\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"spring-cloud-services\": &#123;</span><br><span class=\"line\">      \"2.0.3.RELEASE\": \"Spring Boot &gt;=2.0.0.RELEASE and &lt;2.1.0.RELEASE\",</span><br><span class=\"line\">      \"2.1.7.RELEASE\": \"Spring Boot &gt;=2.1.0.RELEASE and &lt;2.2.0.RELEASE\",</span><br><span class=\"line\">      \"2.2.3.RELEASE\": \"Spring Boot &gt;=2.2.0.RELEASE and &lt;2.3.0.M1\"</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>spring cloud:Hoxton.SR1</p>\n<p>springboot:2.2.2RELEASE</p>\n<p>spring cloud alibaba 2.1.0RELEASE</p>\n<h5 id=\"组件选用\"><a href=\"#组件选用\" class=\"headerlink\" title=\"组件选用\"></a>组件选用</h5><p>服务于注册中心：</p>\n<p>Eureka(停更)  ZooKeeper     Consul   Nacos(主要使用)</p>\n<p>服务调用：</p>\n<p>Ribbon（维护） LoadBalancer</p>\n<p>服务调用2：</p>\n<p>Feign(停更)  OpenFeign</p>\n<p>服务熔断与降级：Hystrix(停更)  resilience4j  sentienal(alibaba 国内主要使用)</p>\n<p>服务网关：</p>\n<p>Zuul(停更)   gateWay(主要使用)</p>\n<p>服务配置：</p>\n<p>config（停更） Nacos</p>\n<p>服务总线：Nacos</p>\n<h5 id=\"微服务模块的建立\"><a href=\"#微服务模块的建立\" class=\"headerlink\" title=\"微服务模块的建立\"></a>微服务模块的建立</h5><p>1建module</p>\n<p>2改pom</p>\n<p>3写yml</p>\n<p>4主启动</p>\n<p>5业务类</p>\n<h5 id=\"一些小知识点\"><a href=\"#一些小知识点\" class=\"headerlink\" title=\"一些小知识点\"></a>一些小知识点</h5><p>pom:<dependencyManagement></dependencyManagement></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<h3 id=\"SpringCloud\"><a href=\"#SpringCloud\" class=\"headerlink\" title=\"SpringCloud\"></a>SpringCloud</h3><p>Spring Cloud 是一套完整的微服务解决方案，基于 Spring Boot 框架，准确的说，它不是一个框架，而是一个大的容器，它将市面上较好的微服务框架集成进来，从而简化了开发者的代码量。</p>","more":"<h4 id=\"项目构建\"><a href=\"#项目构建\" class=\"headerlink\" title=\"项目构建\"></a>项目构建</h4><h5 id=\"学习的版本说明与记录\"><a href=\"#学习的版本说明与记录\" class=\"headerlink\" title=\"学习的版本说明与记录\"></a>学习的版本说明与记录</h5><p>springBoot2.x版和springcloud H版</p>\n<p>springcloud与springboot版本对应：<br><a href=\"https://start.spring.io/actuator/info\" target=\"_blank\" rel=\"noopener\">https://start.spring.io/actuator/info</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"spring-cloud\": &#123;</span><br><span class=\"line\">      \"Finchley.M2\": \"Spring Boot &gt;=2.0.0.M3 and &lt;2.0.0.M5\",</span><br><span class=\"line\">      \"Finchley.M3\": \"Spring Boot &gt;=2.0.0.M5 and &lt;=2.0.0.M5\",</span><br><span class=\"line\">      \"Finchley.M4\": \"Spring Boot &gt;=2.0.0.M6 and &lt;=2.0.0.M6\",</span><br><span class=\"line\">      \"Finchley.M5\": \"Spring Boot &gt;=2.0.0.M7 and &lt;=2.0.0.M7\",</span><br><span class=\"line\">      \"Finchley.M6\": \"Spring Boot &gt;=2.0.0.RC1 and &lt;=2.0.0.RC1\",</span><br><span class=\"line\">      \"Finchley.M7\": \"Spring Boot &gt;=2.0.0.RC2 and &lt;=2.0.0.RC2\",</span><br><span class=\"line\">      \"Finchley.M9\": \"Spring Boot &gt;=2.0.0.RELEASE and &lt;=2.0.0.RELEASE\",</span><br><span class=\"line\">      \"Finchley.RC1\": \"Spring Boot &gt;=2.0.1.RELEASE and &lt;2.0.2.RELEASE\",</span><br><span class=\"line\">      \"Finchley.RC2\": \"Spring Boot &gt;=2.0.2.RELEASE and &lt;2.0.3.RELEASE\",</span><br><span class=\"line\">      \"Finchley.SR4\": \"Spring Boot &gt;=2.0.3.RELEASE and &lt;2.0.999.BUILD-SNAPSHOT\",</span><br><span class=\"line\">      \"Finchley.BUILD-SNAPSHOT\": \"Spring Boot &gt;=2.0.999.BUILD-SNAPSHOT and &lt;2.1.0.M3\",</span><br><span class=\"line\">      \"Greenwich.M1\": \"Spring Boot &gt;=2.1.0.M3 and &lt;2.1.0.RELEASE\",</span><br><span class=\"line\">      \"Greenwich.SR6\": \"Spring Boot &gt;=2.1.0.RELEASE and &lt;2.1.17.BUILD-SNAPSHOT\",</span><br><span class=\"line\">      \"Greenwich.BUILD-SNAPSHOT\": \"Spring Boot &gt;=2.1.17.BUILD-SNAPSHOT and &lt;2.2.0.M4\",</span><br><span class=\"line\">      \"Hoxton.SR7\": \"Spring Boot &gt;=2.2.0.M4 and &lt;2.3.4.BUILD-SNAPSHOT\",</span><br><span class=\"line\">      \"Hoxton.BUILD-SNAPSHOT\": \"Spring Boot &gt;=2.3.4.BUILD-SNAPSHOT and &lt;2.4.0.M1\",</span><br><span class=\"line\">      \"2020.0.0-SNAPSHOT\": \"Spring Boot &gt;=2.4.0.M1\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"spring-cloud-alibaba\": &#123;</span><br><span class=\"line\">      \"2.2.1.RELEASE\": \"Spring Boot &gt;=2.2.0.RELEASE and &lt;2.3.0.M1\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"spring-cloud-services\": &#123;</span><br><span class=\"line\">      \"2.0.3.RELEASE\": \"Spring Boot &gt;=2.0.0.RELEASE and &lt;2.1.0.RELEASE\",</span><br><span class=\"line\">      \"2.1.7.RELEASE\": \"Spring Boot &gt;=2.1.0.RELEASE and &lt;2.2.0.RELEASE\",</span><br><span class=\"line\">      \"2.2.3.RELEASE\": \"Spring Boot &gt;=2.2.0.RELEASE and &lt;2.3.0.M1\"</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>spring cloud:Hoxton.SR1</p>\n<p>springboot:2.2.2RELEASE</p>\n<p>spring cloud alibaba 2.1.0RELEASE</p>\n<h5 id=\"组件选用\"><a href=\"#组件选用\" class=\"headerlink\" title=\"组件选用\"></a>组件选用</h5><p>服务于注册中心：</p>\n<p>Eureka(停更)  ZooKeeper     Consul   Nacos(主要使用)</p>\n<p>服务调用：</p>\n<p>Ribbon（维护） LoadBalancer</p>\n<p>服务调用2：</p>\n<p>Feign(停更)  OpenFeign</p>\n<p>服务熔断与降级：Hystrix(停更)  resilience4j  sentienal(alibaba 国内主要使用)</p>\n<p>服务网关：</p>\n<p>Zuul(停更)   gateWay(主要使用)</p>\n<p>服务配置：</p>\n<p>config（停更） Nacos</p>\n<p>服务总线：Nacos</p>\n<h5 id=\"微服务模块的建立\"><a href=\"#微服务模块的建立\" class=\"headerlink\" title=\"微服务模块的建立\"></a>微服务模块的建立</h5><p>1建module</p>\n<p>2改pom</p>\n<p>3写yml</p>\n<p>4主启动</p>\n<p>5业务类</p>\n<h5 id=\"一些小知识点\"><a href=\"#一些小知识点\" class=\"headerlink\" title=\"一些小知识点\"></a>一些小知识点</h5><p>pom:<dependencyManagement></dependencyManagement></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version</span><br></pre></td></tr></table></figure>"},{"title":"Spring 声明式事务注解@Transactional","date":"2019-11-21T07:30:59.000Z","_content":"\n Spring 声明式事务注解@Transactional使用的两种方式：1 结合xml配置使用； 2纯注解使用\n\n<!--more-->\n\n## 1 结合xml配置使用\n\n#### xml配置文件中加入\n\n```\n    <!-- 配置事务管理器 -->\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n    <!--自己配置的dataSource-->\n        <property name=\"dataSource\" ref=\"dataSource\"></property>\n    </bean>\n\n    <!-- 开启spring对注解事务的支持-->\n    <tx:annotation-driven transaction-manager=\"transactionManager\"></tx:annotation-driven>\n```\n##### 在serivce层或者serice层的方法加@Transactional注解\n参数：\npropagation：事务传播行为\ntimeout：事务超时设置\nisolation：事务隔离级别\n\n\n## 2 纯注解使用\n### 事务管理器配置类\n\n```\n/**\n * 和事务相关的配置类\n */\npublic class TransactionConfig {\n\n    /**\n     * 用于创建事务管理器对象\n     * @param dataSource\n     * @return\n     */\n    @Bean(name=\"transactionManager\")\n    public PlatformTransactionManager createTransactionManager(DataSource dataSource){\n        return new DataSourceTransactionManager(dataSource);\n    }\n}\n```\n##### service中的配置和1一样","source":"_posts/Spring-声明式事务注解-Transactional.md","raw":"---\ntitle: Spring 声明式事务注解@Transactional\ndate: 2019-11-21 15:30:59 \ncategories: Spring\ntags: Spring\n---\n\n Spring 声明式事务注解@Transactional使用的两种方式：1 结合xml配置使用； 2纯注解使用\n\n<!--more-->\n\n## 1 结合xml配置使用\n\n#### xml配置文件中加入\n\n```\n    <!-- 配置事务管理器 -->\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n    <!--自己配置的dataSource-->\n        <property name=\"dataSource\" ref=\"dataSource\"></property>\n    </bean>\n\n    <!-- 开启spring对注解事务的支持-->\n    <tx:annotation-driven transaction-manager=\"transactionManager\"></tx:annotation-driven>\n```\n##### 在serivce层或者serice层的方法加@Transactional注解\n参数：\npropagation：事务传播行为\ntimeout：事务超时设置\nisolation：事务隔离级别\n\n\n## 2 纯注解使用\n### 事务管理器配置类\n\n```\n/**\n * 和事务相关的配置类\n */\npublic class TransactionConfig {\n\n    /**\n     * 用于创建事务管理器对象\n     * @param dataSource\n     * @return\n     */\n    @Bean(name=\"transactionManager\")\n    public PlatformTransactionManager createTransactionManager(DataSource dataSource){\n        return new DataSourceTransactionManager(dataSource);\n    }\n}\n```\n##### service中的配置和1一样","slug":"Spring-声明式事务注解-Transactional","published":1,"updated":"2020-08-01T03:43:37.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbml000bg0v86jkn81a2","content":"<p> Spring 声明式事务注解@Transactional使用的两种方式：1 结合xml配置使用； 2纯注解使用</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-结合xml配置使用\"><a href=\"#1-结合xml配置使用\" class=\"headerlink\" title=\"1 结合xml配置使用\"></a>1 结合xml配置使用</h2><h4 id=\"xml配置文件中加入\"><a href=\"#xml配置文件中加入\" class=\"headerlink\" title=\"xml配置文件中加入\"></a>xml配置文件中加入</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 配置事务管理器 --&gt;</span><br><span class=\"line\">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">&lt;!--自己配置的dataSource--&gt;</span><br><span class=\"line\">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">&lt;&#x2F;bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 开启spring对注解事务的支持--&gt;</span><br><span class=\"line\">&lt;tx:annotation-driven transaction-manager&#x3D;&quot;transactionManager&quot;&gt;&lt;&#x2F;tx:annotation-driven&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"在serivce层或者serice层的方法加-Transactional注解\"><a href=\"#在serivce层或者serice层的方法加-Transactional注解\" class=\"headerlink\" title=\"在serivce层或者serice层的方法加@Transactional注解\"></a>在serivce层或者serice层的方法加@Transactional注解</h5><p>参数：<br>propagation：事务传播行为<br>timeout：事务超时设置<br>isolation：事务隔离级别</p>\n<h2 id=\"2-纯注解使用\"><a href=\"#2-纯注解使用\" class=\"headerlink\" title=\"2 纯注解使用\"></a>2 纯注解使用</h2><h3 id=\"事务管理器配置类\"><a href=\"#事务管理器配置类\" class=\"headerlink\" title=\"事务管理器配置类\"></a>事务管理器配置类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 和事务相关的配置类</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class TransactionConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 用于创建事务管理器对象</span><br><span class=\"line\">     * @param dataSource</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean(name&#x3D;&quot;transactionManager&quot;)</span><br><span class=\"line\">    public PlatformTransactionManager createTransactionManager(DataSource dataSource)&#123;</span><br><span class=\"line\">        return new DataSourceTransactionManager(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"service中的配置和1一样\"><a href=\"#service中的配置和1一样\" class=\"headerlink\" title=\"service中的配置和1一样\"></a>service中的配置和1一样</h5>","site":{"data":{}},"excerpt":"<p> Spring 声明式事务注解@Transactional使用的两种方式：1 结合xml配置使用； 2纯注解使用</p>","more":"<h2 id=\"1-结合xml配置使用\"><a href=\"#1-结合xml配置使用\" class=\"headerlink\" title=\"1 结合xml配置使用\"></a>1 结合xml配置使用</h2><h4 id=\"xml配置文件中加入\"><a href=\"#xml配置文件中加入\" class=\"headerlink\" title=\"xml配置文件中加入\"></a>xml配置文件中加入</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 配置事务管理器 --&gt;</span><br><span class=\"line\">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">&lt;!--自己配置的dataSource--&gt;</span><br><span class=\"line\">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">&lt;&#x2F;bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 开启spring对注解事务的支持--&gt;</span><br><span class=\"line\">&lt;tx:annotation-driven transaction-manager&#x3D;&quot;transactionManager&quot;&gt;&lt;&#x2F;tx:annotation-driven&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"在serivce层或者serice层的方法加-Transactional注解\"><a href=\"#在serivce层或者serice层的方法加-Transactional注解\" class=\"headerlink\" title=\"在serivce层或者serice层的方法加@Transactional注解\"></a>在serivce层或者serice层的方法加@Transactional注解</h5><p>参数：<br>propagation：事务传播行为<br>timeout：事务超时设置<br>isolation：事务隔离级别</p>\n<h2 id=\"2-纯注解使用\"><a href=\"#2-纯注解使用\" class=\"headerlink\" title=\"2 纯注解使用\"></a>2 纯注解使用</h2><h3 id=\"事务管理器配置类\"><a href=\"#事务管理器配置类\" class=\"headerlink\" title=\"事务管理器配置类\"></a>事务管理器配置类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 和事务相关的配置类</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class TransactionConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 用于创建事务管理器对象</span><br><span class=\"line\">     * @param dataSource</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean(name&#x3D;&quot;transactionManager&quot;)</span><br><span class=\"line\">    public PlatformTransactionManager createTransactionManager(DataSource dataSource)&#123;</span><br><span class=\"line\">        return new DataSourceTransactionManager(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"service中的配置和1一样\"><a href=\"#service中的配置和1一样\" class=\"headerlink\" title=\"service中的配置和1一样\"></a>service中的配置和1一样</h5>"},{"title":"Spring 编程式事务","date":"2019-11-21T13:55:45.000Z","_content":"\nSpring 编程式事务:1 配置文件bean.xml; 2在自己的业务层方法加编程式事务\n\n<!--more-->\n\n#### 1 配置文件bean.xml\n\n导入相关依赖后，在配置文件bean.xml文件中配置\n\n```\n\n    <!-- 配置事务管理器-->\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n    <!--这里是自己配置的数据源-->\n        <property name=\"dataSource\" ref=\"dataSource\"></property>\n    </bean>\n\n    <!--配置事务模板对象-->\n    <bean id=\"transactionTemplate\" class=\"org.springframework.transaction.support.TransactionTemplate\">\n        <property name=\"transactionManager\" ref=\"transactionManager\"></property>\n    </bean>\n```\n#### 2在自己的业务层方法加编程式事务\n在需要加事务的方法method中书写：\n```\npublic void method() {\n        transactionTemplate.execute(new TransactionCallback<Object>() {\n            @Override\n            public Object doInTransaction(TransactionStatus status) {\n                ......\n                自己的方法逻辑\n            }\n        });\n\n    }\n```","source":"_posts/Spring-编程式事务.md","raw":"---\ntitle: Spring 编程式事务\ndate: 2019-11-21 21:55:45\ncategories: Spring\ntags: Spring\n---\n\nSpring 编程式事务:1 配置文件bean.xml; 2在自己的业务层方法加编程式事务\n\n<!--more-->\n\n#### 1 配置文件bean.xml\n\n导入相关依赖后，在配置文件bean.xml文件中配置\n\n```\n\n    <!-- 配置事务管理器-->\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n    <!--这里是自己配置的数据源-->\n        <property name=\"dataSource\" ref=\"dataSource\"></property>\n    </bean>\n\n    <!--配置事务模板对象-->\n    <bean id=\"transactionTemplate\" class=\"org.springframework.transaction.support.TransactionTemplate\">\n        <property name=\"transactionManager\" ref=\"transactionManager\"></property>\n    </bean>\n```\n#### 2在自己的业务层方法加编程式事务\n在需要加事务的方法method中书写：\n```\npublic void method() {\n        transactionTemplate.execute(new TransactionCallback<Object>() {\n            @Override\n            public Object doInTransaction(TransactionStatus status) {\n                ......\n                自己的方法逻辑\n            }\n        });\n\n    }\n```","slug":"Spring-编程式事务","published":1,"updated":"2020-08-01T03:43:37.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbmo000fg0v8bnmwb5zm","content":"<p>Spring 编程式事务:1 配置文件bean.xml; 2在自己的业务层方法加编程式事务</p>\n<a id=\"more\"></a>\n\n<h4 id=\"1-配置文件bean-xml\"><a href=\"#1-配置文件bean-xml\" class=\"headerlink\" title=\"1 配置文件bean.xml\"></a>1 配置文件bean.xml</h4><p>导入相关依赖后，在配置文件bean.xml文件中配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 配置事务管理器--&gt;</span><br><span class=\"line\">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">&lt;!--这里是自己配置的数据源--&gt;</span><br><span class=\"line\">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">&lt;&#x2F;bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--配置事务模板对象--&gt;</span><br><span class=\"line\">&lt;bean id&#x3D;&quot;transactionTemplate&quot; class&#x3D;&quot;org.springframework.transaction.support.TransactionTemplate&quot;&gt;</span><br><span class=\"line\">    &lt;property name&#x3D;&quot;transactionManager&quot; ref&#x3D;&quot;transactionManager&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2在自己的业务层方法加编程式事务\"><a href=\"#2在自己的业务层方法加编程式事务\" class=\"headerlink\" title=\"2在自己的业务层方法加编程式事务\"></a>2在自己的业务层方法加编程式事务</h4><p>在需要加事务的方法method中书写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void method() &#123;</span><br><span class=\"line\">        transactionTemplate.execute(new TransactionCallback&lt;Object&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public Object doInTransaction(TransactionStatus status) &#123;</span><br><span class=\"line\">                ......</span><br><span class=\"line\">                自己的方法逻辑</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>Spring 编程式事务:1 配置文件bean.xml; 2在自己的业务层方法加编程式事务</p>","more":"<h4 id=\"1-配置文件bean-xml\"><a href=\"#1-配置文件bean-xml\" class=\"headerlink\" title=\"1 配置文件bean.xml\"></a>1 配置文件bean.xml</h4><p>导入相关依赖后，在配置文件bean.xml文件中配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 配置事务管理器--&gt;</span><br><span class=\"line\">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">&lt;!--这里是自己配置的数据源--&gt;</span><br><span class=\"line\">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">&lt;&#x2F;bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--配置事务模板对象--&gt;</span><br><span class=\"line\">&lt;bean id&#x3D;&quot;transactionTemplate&quot; class&#x3D;&quot;org.springframework.transaction.support.TransactionTemplate&quot;&gt;</span><br><span class=\"line\">    &lt;property name&#x3D;&quot;transactionManager&quot; ref&#x3D;&quot;transactionManager&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2在自己的业务层方法加编程式事务\"><a href=\"#2在自己的业务层方法加编程式事务\" class=\"headerlink\" title=\"2在自己的业务层方法加编程式事务\"></a>2在自己的业务层方法加编程式事务</h4><p>在需要加事务的方法method中书写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void method() &#123;</span><br><span class=\"line\">        transactionTemplate.execute(new TransactionCallback&lt;Object&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public Object doInTransaction(TransactionStatus status) &#123;</span><br><span class=\"line\">                ......</span><br><span class=\"line\">                自己的方法逻辑</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":" mybatic初学环境搭建","date":"2019-11-19T08:22:46.000Z","_content":"\n搭建mybatis环境\n\n<!--more-->\n\n### 1 maven导入相关依赖\n\n```\n<dependencies>\n<!--mybatic-->\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.4.5</version>\n        </dependency>\n        <!--mysql连接-->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.6</version>\n        </dependency>\n        <!--日志-->\n        <dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n            <version>1.2.12</version>\n        </dependency>\n               <!--junit测试-->\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.10</version>\n        </dependency>\n    </dependencies>\n```\n### 2 配置mybaits的配置文件SqlMapConfig.xml\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<!-- mybatis的主配置文件 -->\n<configuration>\n    <!-- 配置环境 -->\n    <environments default=\"mysql\">\n        <!-- 配置mysql的环境-->\n        <environment id=\"mysql\">\n            <!-- 配置事务的类型-->\n            <transactionManager type=\"JDBC\"></transactionManager>\n            <!-- 配置数据源（连接池） -->\n            <dataSource type=\"POOLED\">\n                <!-- 配置连接数据库的4个基本信息 -->\n                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/test\"/>\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"1234\"/>\n            </dataSource>\n        </environment>\n    </environments>\n\n    <!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 -->\n    <mappers>\n        <mapper resource=\"com/itheima/dao/IUserDao.xml\"/>\n    </mappers>\n</configuration>\n```\n### 3 创建数据库表对应的实体\n### 4 创建SqlMapConfig.xml对应的映射文件\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <!DOCTYPE mapper\n                PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n                \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n                <!--****是对应的dao层接口-->\n<mapper namespace=\"****\">\n<!--这里写自己的动态sql-->\n.......\n</mapper>\n```\n##### 5 写好自己的dao层接口，以及运行，读取SqlMapConfig.xml","source":"_posts/mybatic初学环境搭建.md","raw":"---\ntitle: ' mybatic初学环境搭建'\ndate: 2019-11-19 16:22:46 \ncategories: mybatis\ntags: mybatis\n---\n\n搭建mybatis环境\n\n<!--more-->\n\n### 1 maven导入相关依赖\n\n```\n<dependencies>\n<!--mybatic-->\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.4.5</version>\n        </dependency>\n        <!--mysql连接-->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.6</version>\n        </dependency>\n        <!--日志-->\n        <dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n            <version>1.2.12</version>\n        </dependency>\n               <!--junit测试-->\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.10</version>\n        </dependency>\n    </dependencies>\n```\n### 2 配置mybaits的配置文件SqlMapConfig.xml\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<!-- mybatis的主配置文件 -->\n<configuration>\n    <!-- 配置环境 -->\n    <environments default=\"mysql\">\n        <!-- 配置mysql的环境-->\n        <environment id=\"mysql\">\n            <!-- 配置事务的类型-->\n            <transactionManager type=\"JDBC\"></transactionManager>\n            <!-- 配置数据源（连接池） -->\n            <dataSource type=\"POOLED\">\n                <!-- 配置连接数据库的4个基本信息 -->\n                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/test\"/>\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"1234\"/>\n            </dataSource>\n        </environment>\n    </environments>\n\n    <!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 -->\n    <mappers>\n        <mapper resource=\"com/itheima/dao/IUserDao.xml\"/>\n    </mappers>\n</configuration>\n```\n### 3 创建数据库表对应的实体\n### 4 创建SqlMapConfig.xml对应的映射文件\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <!DOCTYPE mapper\n                PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n                \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n                <!--****是对应的dao层接口-->\n<mapper namespace=\"****\">\n<!--这里写自己的动态sql-->\n.......\n</mapper>\n```\n##### 5 写好自己的dao层接口，以及运行，读取SqlMapConfig.xml","slug":"mybatic初学环境搭建","published":1,"updated":"2020-08-01T03:43:37.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbmo000hg0v8aasa9ehe","content":"<p>搭建mybatis环境</p>\n<a id=\"more\"></a>\n\n<h3 id=\"1-maven导入相关依赖\"><a href=\"#1-maven导入相关依赖\" class=\"headerlink\" title=\"1 maven导入相关依赖\"></a>1 maven导入相关依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">&lt;!--mybatic--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.4.5&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;!--mysql连接--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.1.6&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;!--日志--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.2.12&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">               &lt;!--junit测试--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;4.10&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-配置mybaits的配置文件SqlMapConfig-xml\"><a href=\"#2-配置mybaits的配置文件SqlMapConfig-xml\" class=\"headerlink\" title=\"2 配置mybaits的配置文件SqlMapConfig.xml\"></a>2 配置mybaits的配置文件SqlMapConfig.xml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class=\"line\">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;!-- mybatis的主配置文件 --&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;!-- 配置环境 --&gt;</span><br><span class=\"line\">    &lt;environments default&#x3D;&quot;mysql&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 配置mysql的环境--&gt;</span><br><span class=\"line\">        &lt;environment id&#x3D;&quot;mysql&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 配置事务的类型--&gt;</span><br><span class=\"line\">            &lt;transactionManager type&#x3D;&quot;JDBC&quot;&gt;&lt;&#x2F;transactionManager&gt;</span><br><span class=\"line\">            &lt;!-- 配置数据源（连接池） --&gt;</span><br><span class=\"line\">            &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class=\"line\">                &lt;!-- 配置连接数据库的4个基本信息 --&gt;</span><br><span class=\"line\">                &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class=\"line\">                &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test&quot;&#x2F;&gt;</span><br><span class=\"line\">                &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class=\"line\">                &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;1234&quot;&#x2F;&gt;</span><br><span class=\"line\">            &lt;&#x2F;dataSource&gt;</span><br><span class=\"line\">        &lt;&#x2F;environment&gt;</span><br><span class=\"line\">    &lt;&#x2F;environments&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource&#x3D;&quot;com&#x2F;itheima&#x2F;dao&#x2F;IUserDao.xml&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;mappers&gt;</span><br><span class=\"line\">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-创建数据库表对应的实体\"><a href=\"#3-创建数据库表对应的实体\" class=\"headerlink\" title=\"3 创建数据库表对应的实体\"></a>3 创建数据库表对应的实体</h3><h3 id=\"4-创建SqlMapConfig-xml对应的映射文件\"><a href=\"#4-创建SqlMapConfig-xml对应的映射文件\" class=\"headerlink\" title=\"4 创建SqlMapConfig.xml对应的映射文件\"></a>4 创建SqlMapConfig.xml对应的映射文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">        &lt;!DOCTYPE mapper</span><br><span class=\"line\">                PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class=\"line\">                &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\">                &lt;!--****是对应的dao层接口--&gt;</span><br><span class=\"line\">&lt;mapper namespace&#x3D;&quot;****&quot;&gt;</span><br><span class=\"line\">&lt;!--这里写自己的动态sql--&gt;</span><br><span class=\"line\">.......</span><br><span class=\"line\">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-写好自己的dao层接口，以及运行，读取SqlMapConfig-xml\"><a href=\"#5-写好自己的dao层接口，以及运行，读取SqlMapConfig-xml\" class=\"headerlink\" title=\"5 写好自己的dao层接口，以及运行，读取SqlMapConfig.xml\"></a>5 写好自己的dao层接口，以及运行，读取SqlMapConfig.xml</h5>","site":{"data":{}},"excerpt":"<p>搭建mybatis环境</p>","more":"<h3 id=\"1-maven导入相关依赖\"><a href=\"#1-maven导入相关依赖\" class=\"headerlink\" title=\"1 maven导入相关依赖\"></a>1 maven导入相关依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">&lt;!--mybatic--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.4.5&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;!--mysql连接--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.1.6&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;!--日志--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.2.12&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">               &lt;!--junit测试--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;4.10&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-配置mybaits的配置文件SqlMapConfig-xml\"><a href=\"#2-配置mybaits的配置文件SqlMapConfig-xml\" class=\"headerlink\" title=\"2 配置mybaits的配置文件SqlMapConfig.xml\"></a>2 配置mybaits的配置文件SqlMapConfig.xml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class=\"line\">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;!-- mybatis的主配置文件 --&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;!-- 配置环境 --&gt;</span><br><span class=\"line\">    &lt;environments default&#x3D;&quot;mysql&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 配置mysql的环境--&gt;</span><br><span class=\"line\">        &lt;environment id&#x3D;&quot;mysql&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 配置事务的类型--&gt;</span><br><span class=\"line\">            &lt;transactionManager type&#x3D;&quot;JDBC&quot;&gt;&lt;&#x2F;transactionManager&gt;</span><br><span class=\"line\">            &lt;!-- 配置数据源（连接池） --&gt;</span><br><span class=\"line\">            &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class=\"line\">                &lt;!-- 配置连接数据库的4个基本信息 --&gt;</span><br><span class=\"line\">                &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class=\"line\">                &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test&quot;&#x2F;&gt;</span><br><span class=\"line\">                &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class=\"line\">                &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;1234&quot;&#x2F;&gt;</span><br><span class=\"line\">            &lt;&#x2F;dataSource&gt;</span><br><span class=\"line\">        &lt;&#x2F;environment&gt;</span><br><span class=\"line\">    &lt;&#x2F;environments&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource&#x3D;&quot;com&#x2F;itheima&#x2F;dao&#x2F;IUserDao.xml&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;mappers&gt;</span><br><span class=\"line\">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-创建数据库表对应的实体\"><a href=\"#3-创建数据库表对应的实体\" class=\"headerlink\" title=\"3 创建数据库表对应的实体\"></a>3 创建数据库表对应的实体</h3><h3 id=\"4-创建SqlMapConfig-xml对应的映射文件\"><a href=\"#4-创建SqlMapConfig-xml对应的映射文件\" class=\"headerlink\" title=\"4 创建SqlMapConfig.xml对应的映射文件\"></a>4 创建SqlMapConfig.xml对应的映射文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">        &lt;!DOCTYPE mapper</span><br><span class=\"line\">                PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class=\"line\">                &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\">                &lt;!--****是对应的dao层接口--&gt;</span><br><span class=\"line\">&lt;mapper namespace&#x3D;&quot;****&quot;&gt;</span><br><span class=\"line\">&lt;!--这里写自己的动态sql--&gt;</span><br><span class=\"line\">.......</span><br><span class=\"line\">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-写好自己的dao层接口，以及运行，读取SqlMapConfig-xml\"><a href=\"#5-写好自己的dao层接口，以及运行，读取SqlMapConfig-xml\" class=\"headerlink\" title=\"5 写好自己的dao层接口，以及运行，读取SqlMapConfig.xml\"></a>5 写好自己的dao层接口，以及运行，读取SqlMapConfig.xml</h5>"},{"title":"docker 安装使用oracle","date":"2020-10-18T08:27:54.000Z","_content":"\n####  docker 安装使用oracle\n\n在liunux docker上安装oracle-11g数据库。安装使用非常方便。以下是在centos7上的安装过程\n\n<!--more-->\n\n1拉取镜像\n\n```\ndocker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g\n```\n\n2启动容器\n\n```\n#建立映射目录\nmkdir -p -m 755 /Users/lin/Projects/data/oracle_home/oracle_data/{app,dpdump,oraInventory}\n#启动\ndocker run -d -p 1521:1521 --name oracle_11g   -v  /Users/lin/Projects/data/oracle_home/oracle_data/app:/opt/oracle/app     -v  /Users/lin/Projects/data/oracle_home/oracle_data/dpdump:/opt/oracle/dpdump  -v  /Users/lin/Projects/data/oracle_home/oracle_data/oraInventory:/opt/oracle/oraInventory   registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g\n```\n\n3进入容器。设置环境变量\n\n```\n#进入容器\ndocker exec -it oracle_11g bash\n#切换root用户\nsu root\nPassword: (初始密码：helowin)\n#配置环境变量\nvi /etc/profile \n  #添加环境变量，加在文件末尾\n  export ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2\n  export ORACLE_SID=helowin\n  export PATH=$ORACLE_HOME/bin:$PATH\n#加载配置文件\nsource /etc/profile\n```\n\n4使用sqlplus连接oracle\n\n```\n#建立软连接\nln -sf $ORACLE_HOME/bin/sqlplus /usr/bin\n#连接\nsqlplus /nolog\nconn / as sysdba\n#启动服务\nsql> startup\n\n```\n\n5设置用户权限\n\n```\n#修改system用户账号；\nalter user system identified by system;\n#修改sys用户账号；\nalter user sys identified by system;\n#创建内部管理员账号，创建一个用户名为oracle_test的用户，密码为 123456\ncreate user oracle_test identified by 123456;\n#将dba权限授权给内部管理员账号；\ngrant connect,resource,dba to oracle_test;\n#修改密码规则策略为密码永不过期；\nALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;\n#修改数据库最大连接数据；\nalter system set processes=1000 scope=spfile;\n修改以上信息后，需要重新启动数据库；\n#关闭数据库\nshutdown immediate;\n#启动\nstartup;\n```\n\n5开放安全组规则和防火墙，使用连接工具连接（Navicat Premium 12连接需要自己给工具下载一个最新的包oci.dill）\n\n服务名和sid都是helowin\n\n","source":"_posts/docker-安装使用oracle.md","raw":"---\ntitle: docker 安装使用oracle\ndate: 2020-10-18 16:27:54\ncategories: Oracle\ntags: docker,oracle\n---\n\n####  docker 安装使用oracle\n\n在liunux docker上安装oracle-11g数据库。安装使用非常方便。以下是在centos7上的安装过程\n\n<!--more-->\n\n1拉取镜像\n\n```\ndocker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g\n```\n\n2启动容器\n\n```\n#建立映射目录\nmkdir -p -m 755 /Users/lin/Projects/data/oracle_home/oracle_data/{app,dpdump,oraInventory}\n#启动\ndocker run -d -p 1521:1521 --name oracle_11g   -v  /Users/lin/Projects/data/oracle_home/oracle_data/app:/opt/oracle/app     -v  /Users/lin/Projects/data/oracle_home/oracle_data/dpdump:/opt/oracle/dpdump  -v  /Users/lin/Projects/data/oracle_home/oracle_data/oraInventory:/opt/oracle/oraInventory   registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g\n```\n\n3进入容器。设置环境变量\n\n```\n#进入容器\ndocker exec -it oracle_11g bash\n#切换root用户\nsu root\nPassword: (初始密码：helowin)\n#配置环境变量\nvi /etc/profile \n  #添加环境变量，加在文件末尾\n  export ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2\n  export ORACLE_SID=helowin\n  export PATH=$ORACLE_HOME/bin:$PATH\n#加载配置文件\nsource /etc/profile\n```\n\n4使用sqlplus连接oracle\n\n```\n#建立软连接\nln -sf $ORACLE_HOME/bin/sqlplus /usr/bin\n#连接\nsqlplus /nolog\nconn / as sysdba\n#启动服务\nsql> startup\n\n```\n\n5设置用户权限\n\n```\n#修改system用户账号；\nalter user system identified by system;\n#修改sys用户账号；\nalter user sys identified by system;\n#创建内部管理员账号，创建一个用户名为oracle_test的用户，密码为 123456\ncreate user oracle_test identified by 123456;\n#将dba权限授权给内部管理员账号；\ngrant connect,resource,dba to oracle_test;\n#修改密码规则策略为密码永不过期；\nALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;\n#修改数据库最大连接数据；\nalter system set processes=1000 scope=spfile;\n修改以上信息后，需要重新启动数据库；\n#关闭数据库\nshutdown immediate;\n#启动\nstartup;\n```\n\n5开放安全组规则和防火墙，使用连接工具连接（Navicat Premium 12连接需要自己给工具下载一个最新的包oci.dill）\n\n服务名和sid都是helowin\n\n","slug":"docker-安装使用oracle","published":1,"updated":"2020-10-18T08:48:14.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbmr000lg0v854iu9e5i","content":"<h4 id=\"docker-安装使用oracle\"><a href=\"#docker-安装使用oracle\" class=\"headerlink\" title=\"docker 安装使用oracle\"></a>docker 安装使用oracle</h4><p>在liunux docker上安装oracle-11g数据库。安装使用非常方便。以下是在centos7上的安装过程</p>\n<a id=\"more\"></a>\n\n<p>1拉取镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;helowin&#x2F;oracle_11g</span><br></pre></td></tr></table></figure>\n\n<p>2启动容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#建立映射目录</span><br><span class=\"line\">mkdir -p -m 755 &#x2F;Users&#x2F;lin&#x2F;Projects&#x2F;data&#x2F;oracle_home&#x2F;oracle_data&#x2F;&#123;app,dpdump,oraInventory&#125;</span><br><span class=\"line\">#启动</span><br><span class=\"line\">docker run -d -p 1521:1521 --name oracle_11g   -v  &#x2F;Users&#x2F;lin&#x2F;Projects&#x2F;data&#x2F;oracle_home&#x2F;oracle_data&#x2F;app:&#x2F;opt&#x2F;oracle&#x2F;app     -v  &#x2F;Users&#x2F;lin&#x2F;Projects&#x2F;data&#x2F;oracle_home&#x2F;oracle_data&#x2F;dpdump:&#x2F;opt&#x2F;oracle&#x2F;dpdump  -v  &#x2F;Users&#x2F;lin&#x2F;Projects&#x2F;data&#x2F;oracle_home&#x2F;oracle_data&#x2F;oraInventory:&#x2F;opt&#x2F;oracle&#x2F;oraInventory   registry.cn-hangzhou.aliyuncs.com&#x2F;helowin&#x2F;oracle_11g</span><br></pre></td></tr></table></figure>\n\n<p>3进入容器。设置环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#进入容器</span><br><span class=\"line\">docker exec -it oracle_11g bash</span><br><span class=\"line\">#切换root用户</span><br><span class=\"line\">su root</span><br><span class=\"line\">Password: (初始密码：helowin)</span><br><span class=\"line\">#配置环境变量</span><br><span class=\"line\">vi &#x2F;etc&#x2F;profile </span><br><span class=\"line\">  #添加环境变量，加在文件末尾</span><br><span class=\"line\">  export ORACLE_HOME&#x3D;&#x2F;home&#x2F;oracle&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;dbhome_2</span><br><span class=\"line\">  export ORACLE_SID&#x3D;helowin</span><br><span class=\"line\">  export PATH&#x3D;$ORACLE_HOME&#x2F;bin:$PATH</span><br><span class=\"line\">#加载配置文件</span><br><span class=\"line\">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>\n\n<p>4使用sqlplus连接oracle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#建立软连接</span><br><span class=\"line\">ln -sf $ORACLE_HOME&#x2F;bin&#x2F;sqlplus &#x2F;usr&#x2F;bin</span><br><span class=\"line\">#连接</span><br><span class=\"line\">sqlplus &#x2F;nolog</span><br><span class=\"line\">conn &#x2F; as sysdba</span><br><span class=\"line\">#启动服务</span><br><span class=\"line\">sql&gt; startup</span><br></pre></td></tr></table></figure>\n\n<p>5设置用户权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#修改system用户账号；</span><br><span class=\"line\">alter user system identified by system;</span><br><span class=\"line\">#修改sys用户账号；</span><br><span class=\"line\">alter user sys identified by system;</span><br><span class=\"line\">#创建内部管理员账号，创建一个用户名为oracle_test的用户，密码为 123456</span><br><span class=\"line\">create user oracle_test identified by 123456;</span><br><span class=\"line\">#将dba权限授权给内部管理员账号；</span><br><span class=\"line\">grant connect,resource,dba to oracle_test;</span><br><span class=\"line\">#修改密码规则策略为密码永不过期；</span><br><span class=\"line\">ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;</span><br><span class=\"line\">#修改数据库最大连接数据；</span><br><span class=\"line\">alter system set processes&#x3D;1000 scope&#x3D;spfile;</span><br><span class=\"line\">修改以上信息后，需要重新启动数据库；</span><br><span class=\"line\">#关闭数据库</span><br><span class=\"line\">shutdown immediate;</span><br><span class=\"line\">#启动</span><br><span class=\"line\">startup;</span><br></pre></td></tr></table></figure>\n\n<p>5开放安全组规则和防火墙，使用连接工具连接（Navicat Premium 12连接需要自己给工具下载一个最新的包oci.dill）</p>\n<p>服务名和sid都是helowin</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"docker-安装使用oracle\"><a href=\"#docker-安装使用oracle\" class=\"headerlink\" title=\"docker 安装使用oracle\"></a>docker 安装使用oracle</h4><p>在liunux docker上安装oracle-11g数据库。安装使用非常方便。以下是在centos7上的安装过程</p>","more":"<p>1拉取镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;helowin&#x2F;oracle_11g</span><br></pre></td></tr></table></figure>\n\n<p>2启动容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#建立映射目录</span><br><span class=\"line\">mkdir -p -m 755 &#x2F;Users&#x2F;lin&#x2F;Projects&#x2F;data&#x2F;oracle_home&#x2F;oracle_data&#x2F;&#123;app,dpdump,oraInventory&#125;</span><br><span class=\"line\">#启动</span><br><span class=\"line\">docker run -d -p 1521:1521 --name oracle_11g   -v  &#x2F;Users&#x2F;lin&#x2F;Projects&#x2F;data&#x2F;oracle_home&#x2F;oracle_data&#x2F;app:&#x2F;opt&#x2F;oracle&#x2F;app     -v  &#x2F;Users&#x2F;lin&#x2F;Projects&#x2F;data&#x2F;oracle_home&#x2F;oracle_data&#x2F;dpdump:&#x2F;opt&#x2F;oracle&#x2F;dpdump  -v  &#x2F;Users&#x2F;lin&#x2F;Projects&#x2F;data&#x2F;oracle_home&#x2F;oracle_data&#x2F;oraInventory:&#x2F;opt&#x2F;oracle&#x2F;oraInventory   registry.cn-hangzhou.aliyuncs.com&#x2F;helowin&#x2F;oracle_11g</span><br></pre></td></tr></table></figure>\n\n<p>3进入容器。设置环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#进入容器</span><br><span class=\"line\">docker exec -it oracle_11g bash</span><br><span class=\"line\">#切换root用户</span><br><span class=\"line\">su root</span><br><span class=\"line\">Password: (初始密码：helowin)</span><br><span class=\"line\">#配置环境变量</span><br><span class=\"line\">vi &#x2F;etc&#x2F;profile </span><br><span class=\"line\">  #添加环境变量，加在文件末尾</span><br><span class=\"line\">  export ORACLE_HOME&#x3D;&#x2F;home&#x2F;oracle&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;dbhome_2</span><br><span class=\"line\">  export ORACLE_SID&#x3D;helowin</span><br><span class=\"line\">  export PATH&#x3D;$ORACLE_HOME&#x2F;bin:$PATH</span><br><span class=\"line\">#加载配置文件</span><br><span class=\"line\">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>\n\n<p>4使用sqlplus连接oracle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#建立软连接</span><br><span class=\"line\">ln -sf $ORACLE_HOME&#x2F;bin&#x2F;sqlplus &#x2F;usr&#x2F;bin</span><br><span class=\"line\">#连接</span><br><span class=\"line\">sqlplus &#x2F;nolog</span><br><span class=\"line\">conn &#x2F; as sysdba</span><br><span class=\"line\">#启动服务</span><br><span class=\"line\">sql&gt; startup</span><br></pre></td></tr></table></figure>\n\n<p>5设置用户权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#修改system用户账号；</span><br><span class=\"line\">alter user system identified by system;</span><br><span class=\"line\">#修改sys用户账号；</span><br><span class=\"line\">alter user sys identified by system;</span><br><span class=\"line\">#创建内部管理员账号，创建一个用户名为oracle_test的用户，密码为 123456</span><br><span class=\"line\">create user oracle_test identified by 123456;</span><br><span class=\"line\">#将dba权限授权给内部管理员账号；</span><br><span class=\"line\">grant connect,resource,dba to oracle_test;</span><br><span class=\"line\">#修改密码规则策略为密码永不过期；</span><br><span class=\"line\">ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;</span><br><span class=\"line\">#修改数据库最大连接数据；</span><br><span class=\"line\">alter system set processes&#x3D;1000 scope&#x3D;spfile;</span><br><span class=\"line\">修改以上信息后，需要重新启动数据库；</span><br><span class=\"line\">#关闭数据库</span><br><span class=\"line\">shutdown immediate;</span><br><span class=\"line\">#启动</span><br><span class=\"line\">startup;</span><br></pre></td></tr></table></figure>\n\n<p>5开放安全组规则和防火墙，使用连接工具连接（Navicat Premium 12连接需要自己给工具下载一个最新的包oci.dill）</p>\n<p>服务名和sid都是helowin</p>"},{"title":"java8学习笔记","date":"2020-08-02T05:54:40.000Z","_content":"\n\n\n### Java 8新特性\n\njava8的新特性主要有Stream流；Lambda表达式；通过行为参数化传递代码；函数式接口；接口的默认方法；全新的时间日期AP；Annotation 支持多重注解。等等\n\n<!--more-->\n\n#### 通过行为参数化传递代码\n\n传递抽象化类，作为参数：\n\n```java\n//择标准建模\npublic interface ApplePredicate{ \n boolean test (Apple apple); \n}\n//多个实现\npublic class AppleHeavyWeightPredicate implements ApplePredicate{ \n public boolean test(Apple apple){ \n return apple.getWeight() > 150; \n } \n} \npublic class AppleGreenColorPredicate implements ApplePredicate{\n public boolean test(Apple apple){ \n return \"green\".equals(apple.getColor()); \n } \n}\n//根据抽象条件筛选\npublic static List<Apple> filterApples(List<Apple> inventory, \n ApplePredicate p){ \n List<Apple> result = new ArrayList<>(); \n for(Apple apple: inventory){ \n if(p.test(apple)){ \n result.add(apple); \n } \n } \n return result; \n}\n```\n\n在Java 8中，List自带了一个sort方法（你也可以使用Collections.sort）。sort的行为\n\n可以用java.util.Comparator对象来参数化，它的接口如下：\n\n```java\n// java.util.Comparator \npublic interface Comparator<T> { \n public int compare(T o1, T o2); \n}\n//因此，你可以随时创建Comparator的实现，用sort方法表现出不同的行为。比如，你可以\n//使用匿名类，按照重量升序对库存排序：\ninventory.sort(new Comparator<Apple>() { \n public int compare(Apple a1, Apple a2){ \n return a1.getWeight().compareTo(a2.getWeight()); \n } \n});\n```\n\n#### Lambda表达式\n\n**Lambda 表达式** − Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）。\n\n格式：\n\n```java\n(parameters) -> expression\n或\n(parameters) ->{ statements; }\n```\n\n\n\n##### 使用场景\n\n在函数式接口上使用Lambda表达式。\n\n将Lambda表达式作为参数传递给某个方法\n\n\n\n##### 函数式接口\n\n一言以蔽之，函数式接口就是只定义一个抽象方法的接口，但是可以有多个非抽象方法的接口。。\n\n\n\n##### 函数描述符\n\n函数式接口的抽象方法的签名基本上就是Lambda表达式的签名。我们将这种抽象方法叫作\n\n函数描述符。\n\n\n\n##### 使用函数式接口来传递行为\n\nJava 8的库设计师帮你在java.util.function包中引入了几个新的函数式接口。如：Predicate、Consumer和Function\n\n\n\n##### 变量作用域\n\nlambda 表达式只能引用标记了 final 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。\n\n\n\n#### 方法引用\n\n方法引用使用一对冒号 **::**\n\n- **构造器引用：**它的语法是Class::new，或者更一般的Class< T >::new实例如下：\n\n  ```java\n  final Car car = Car.create( Car::new ); final List< Car > cars = Arrays.asList( car );\n  ```\n\n- **静态方法引用：**它的语法是Class::static_method，实例如下：\n\n  ```java\n  cars.forEach( Car::collide );\n  ```\n\n- **特定类的任意对象的方法引用：**它的语法是Class::method实例如下：\n\n  ```java\n  cars.forEach( Car::repair );\n  ```\n\n- **特定对象的方法引用：**它的语法是instance::method实例如下：\n\n  ```java\n  final Car police = Car.create( Car::new ); cars.forEach( police::follow );\n  ```\n\n  \n\n#### 默认方法\n\nJava 8 新增了接口的默认方法。\n\n简单说，默认方法就是接口可以有实现方法，而且不需要实现类去实现其方法。\n\n我们只需在方法名前面加个 default 关键字即可实现默认方法。\n\n\n\n#### Stream 流\n\n流是Java API的新成员，它允许你以声明性方式处理数据集合（通过查询语句来表达，而不\n\n是临时编写一个实现）。就现在来说，你可以把它们看成遍历数据集的高级迭代器。\n\n是一组便捷对集合处理的api。\n\n- **stream()** − 为集合创建串行流。\n- **parallelStream()** − 为集合创建并行流。\n\n\n\n##### 只能遍历一次\n\n请注意，和迭代器类似，流只能遍历一次。遍历完之后，我们就说这个流已经被消费掉了。\n\n你可以从原始数据源那里再获得一个新的流来重新遍历一遍，就像迭代器一样。例如，以下代码会抛出一个异常，说流已被消\n\n费掉了：\n\n```java\nList<String> title = Arrays.asList(\"Java8\", \"In\", \"Action\"); \nStream<String> s = title.stream(); \ns.forEach(System.out::println); \ns.forEach(System.out::println);//java.lang.IllegalStateException:流已被操作或关闭\n```\n\n\n\n总而言之，流的使用一般包括三件事：\n\n 一个数据源（如集合）来执行一个查询；\n\n 一个中间操作链，形成一条流的流水线；\n\n 一个终端操作，执行流水线，并能生成结果。\n\n![image-20200911102914791](D:\\code\\myBlog\\source\\_posts\\java8学习笔记\\image-20200911102914791.png)\n\n\n\n##### forEach\n\nStream 提供了新的方法 'forEach' 来迭代流中的每个数据。以下代码片段使用 forEach 输出了10个随机数\n\n##### map（对每个元素的操作）\n\nmap 方法用于映射每个元素到对应的结果，以下代码片段使用 map 输出了元素对应的平方数：\n\n##### filter\n\nfilter 方法用于通过设置的条件过滤出元素。以下代码片段使用 filter 方法过滤出空字符串：\n\n##### limit\n\nimit 方法用于获取指定数量的流。 以下代码片段使用 limit 方法打印出 10 条数据：\n\n##### sorted\n\nsorted 方法用于对流进行排序。\n\n##### anyMatch\n\nanyMatch方法可以回答“流中是否有一个元素能匹配给定的谓词”。比如，你可以用它来看\n\n看菜单里面是否有素食可选择：\n\n```java\nif(menu.stream().anyMatch(Dish::isVegetarian)){ \n\n System.out.println(\"The menu is (somewhat) vegetarian friendly!!\"); \n\n} \n```\n\nanyMatch方法返回一个boolean，因此是一个终端操作。\n\n##### allMatch\n\nallMatch方法的工作原理和anyMatch类似，但它会看看流中的元素是否都能匹配给定的谓词。比如，你可以用它来看看菜品是否有利健康（即所有菜的热量都低于1000卡路里）\n\n```java\nboolean isHealthy = menu.stream() \n .allMatch(d -> d.getCalories() < 1000);\n```\n\n##### noneMatch\n\n和allMatch相对的是noneMatch。它可以确保流中没有任何元素与给定的谓词匹配。比如，\n\n你可以用noneMatch重写前面的例子：\n\n```java\nboolean isHealthy = menu.stream() \n .noneMatch(d -> d.getCalories() >= 1000);\n```\n\n\n\n##### **findFirst**和indAny\n\nfindAny方法将返回当前流中的任意元素。\n\nfindFirst方法将返回当前流中的第一个元素。\n\n你可能会想，为什么会同时有findFirst和findAny呢？答案是并行。找到第一个元素\n\n在并行上限制更多。如果你不关心返回的元素是哪个，请使用findAny，因为它在使用并行流\n\n时限制较少。\n\n##### reduce归约\n\nLambda反复结合每个元素，直到流被归约成一个值。\n\n```java\n//求和\nint sum = numbers.stream().reduce(0, (a, b) -> a + b);\n```\n\n##### 数值流\n\nJava 8引入了三个原始类型特化流接口：IntStream、DoubleStream和LongStream\n\n将流转换为特化版本的常用方法是mapToInt、mapToDouble和mapToLong。\n\n```java\nint calories = menu.stream() \n    //返回一个 IntStream\n .mapToInt(Dish::getCalories) \n .sum();\n```\n\n##### 构建流\n\n1由值创建流。使用静态方法Stream.of，通过显式值创建一个流。\n\n2由数组创建流。使用静态方法Arrays.stream从数组创建一个流。\n\n3由文件生成流。Java中用于处理文件等I/O操作的NIO API（非阻塞 I/O）已更新，以便利用Stream API。\n\njava.nio.file.Files中的很多静态方法都会返回一个流。例如，一个很有用的方法是\n\nFiles.lines，它会返回一个由指定文件中的各行构成的字符串流\n\n4由函数生成流。创建无限流。Stream API提供了两个静态方法来从函数生成流：Stream.iterate和Stream.generate。\n\n这两个操作可以创建所谓的无限流：不像从固定集合创建的流那样有固定大小的流。由iterate\n\n和generate产生的流会用给定的函数按需创建值，因此可以无穷无尽地计算下去！\n\n```java\nStream.iterate(0, n -> n + 2) \n .limit(10) \n .forEach(System.out::println)\n```\n\n\n\n#### Java 8 日期时间 API\n\nJava 8 在 **java.time** 包下提供了很多新的 API。以下为两个比较重要的 API：\n\n- **Local(本地)** − 简化了日期时间的处理，没有时区的问题。\n- **Zoned(时区)** − 通过制定的时区处理日期时间。\n\n新的java.time包涵盖了所有处理日期，时间，日期/时间，时区，时刻（instants），过程（during）与时钟（clock）的操作。\n\n##### 本地化时间API\n\nLocalDate/LocalTime 和 LocalDateTime 类可以在处理时区不是必须的情况。\n\n```java\n      // 获取当前的日期时间\n      LocalDateTime currentTime = LocalDateTime.now();\n\t  LocalDate date1 = currentTime.toLocalDate();\n\t     Month month = currentTime.getMonth();\n      int day = currentTime.getDayOfMonth();\n      int seconds = currentTime.getSecond();\n        \n      System.out.println(\"月: \" + month +\", 日: \" + day +\", 秒: \" + seconds);\n```\n\n##### 使用时区的的日期时间API\n\n```java\nZonedDateTime date1 = ZonedDateTime.parse(\"2015-12-03T10:15:30+05:30[Asia/Shanghai]\");\n```\n\n\n\n#### java小知识\n\n1 方法的签名:方法的名称和参数类型\n\n2 匿名类:Java 中可以实现一个类中包含另外一个类，且不需要提供任何的类名直接实例化。\n\n主要是用于在我们需要的时候创建一个对象来执行特定的任务，可以使代码更加简洁。\n\n匿名类是不能有名字的类，它们不能被引用，只能在创建时用 **new** 语句来声明它们。\n\n匿名类语法格式：\n\n```java\nclass outerClass {\n\n    // 定义一个匿名类\n    object1 = new Type(parameterList) {\n         // 匿名类代码\n    };\n}\n```\n\n\n\n","source":"_posts/java8学习笔记.md","raw":"---\ntitle: java8学习笔记\ndate: 2020-08-02 13:54:40\ncategories: jak\t\ntags: java8\n---\n\n\n\n### Java 8新特性\n\njava8的新特性主要有Stream流；Lambda表达式；通过行为参数化传递代码；函数式接口；接口的默认方法；全新的时间日期AP；Annotation 支持多重注解。等等\n\n<!--more-->\n\n#### 通过行为参数化传递代码\n\n传递抽象化类，作为参数：\n\n```java\n//择标准建模\npublic interface ApplePredicate{ \n boolean test (Apple apple); \n}\n//多个实现\npublic class AppleHeavyWeightPredicate implements ApplePredicate{ \n public boolean test(Apple apple){ \n return apple.getWeight() > 150; \n } \n} \npublic class AppleGreenColorPredicate implements ApplePredicate{\n public boolean test(Apple apple){ \n return \"green\".equals(apple.getColor()); \n } \n}\n//根据抽象条件筛选\npublic static List<Apple> filterApples(List<Apple> inventory, \n ApplePredicate p){ \n List<Apple> result = new ArrayList<>(); \n for(Apple apple: inventory){ \n if(p.test(apple)){ \n result.add(apple); \n } \n } \n return result; \n}\n```\n\n在Java 8中，List自带了一个sort方法（你也可以使用Collections.sort）。sort的行为\n\n可以用java.util.Comparator对象来参数化，它的接口如下：\n\n```java\n// java.util.Comparator \npublic interface Comparator<T> { \n public int compare(T o1, T o2); \n}\n//因此，你可以随时创建Comparator的实现，用sort方法表现出不同的行为。比如，你可以\n//使用匿名类，按照重量升序对库存排序：\ninventory.sort(new Comparator<Apple>() { \n public int compare(Apple a1, Apple a2){ \n return a1.getWeight().compareTo(a2.getWeight()); \n } \n});\n```\n\n#### Lambda表达式\n\n**Lambda 表达式** − Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）。\n\n格式：\n\n```java\n(parameters) -> expression\n或\n(parameters) ->{ statements; }\n```\n\n\n\n##### 使用场景\n\n在函数式接口上使用Lambda表达式。\n\n将Lambda表达式作为参数传递给某个方法\n\n\n\n##### 函数式接口\n\n一言以蔽之，函数式接口就是只定义一个抽象方法的接口，但是可以有多个非抽象方法的接口。。\n\n\n\n##### 函数描述符\n\n函数式接口的抽象方法的签名基本上就是Lambda表达式的签名。我们将这种抽象方法叫作\n\n函数描述符。\n\n\n\n##### 使用函数式接口来传递行为\n\nJava 8的库设计师帮你在java.util.function包中引入了几个新的函数式接口。如：Predicate、Consumer和Function\n\n\n\n##### 变量作用域\n\nlambda 表达式只能引用标记了 final 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。\n\n\n\n#### 方法引用\n\n方法引用使用一对冒号 **::**\n\n- **构造器引用：**它的语法是Class::new，或者更一般的Class< T >::new实例如下：\n\n  ```java\n  final Car car = Car.create( Car::new ); final List< Car > cars = Arrays.asList( car );\n  ```\n\n- **静态方法引用：**它的语法是Class::static_method，实例如下：\n\n  ```java\n  cars.forEach( Car::collide );\n  ```\n\n- **特定类的任意对象的方法引用：**它的语法是Class::method实例如下：\n\n  ```java\n  cars.forEach( Car::repair );\n  ```\n\n- **特定对象的方法引用：**它的语法是instance::method实例如下：\n\n  ```java\n  final Car police = Car.create( Car::new ); cars.forEach( police::follow );\n  ```\n\n  \n\n#### 默认方法\n\nJava 8 新增了接口的默认方法。\n\n简单说，默认方法就是接口可以有实现方法，而且不需要实现类去实现其方法。\n\n我们只需在方法名前面加个 default 关键字即可实现默认方法。\n\n\n\n#### Stream 流\n\n流是Java API的新成员，它允许你以声明性方式处理数据集合（通过查询语句来表达，而不\n\n是临时编写一个实现）。就现在来说，你可以把它们看成遍历数据集的高级迭代器。\n\n是一组便捷对集合处理的api。\n\n- **stream()** − 为集合创建串行流。\n- **parallelStream()** − 为集合创建并行流。\n\n\n\n##### 只能遍历一次\n\n请注意，和迭代器类似，流只能遍历一次。遍历完之后，我们就说这个流已经被消费掉了。\n\n你可以从原始数据源那里再获得一个新的流来重新遍历一遍，就像迭代器一样。例如，以下代码会抛出一个异常，说流已被消\n\n费掉了：\n\n```java\nList<String> title = Arrays.asList(\"Java8\", \"In\", \"Action\"); \nStream<String> s = title.stream(); \ns.forEach(System.out::println); \ns.forEach(System.out::println);//java.lang.IllegalStateException:流已被操作或关闭\n```\n\n\n\n总而言之，流的使用一般包括三件事：\n\n 一个数据源（如集合）来执行一个查询；\n\n 一个中间操作链，形成一条流的流水线；\n\n 一个终端操作，执行流水线，并能生成结果。\n\n![image-20200911102914791](D:\\code\\myBlog\\source\\_posts\\java8学习笔记\\image-20200911102914791.png)\n\n\n\n##### forEach\n\nStream 提供了新的方法 'forEach' 来迭代流中的每个数据。以下代码片段使用 forEach 输出了10个随机数\n\n##### map（对每个元素的操作）\n\nmap 方法用于映射每个元素到对应的结果，以下代码片段使用 map 输出了元素对应的平方数：\n\n##### filter\n\nfilter 方法用于通过设置的条件过滤出元素。以下代码片段使用 filter 方法过滤出空字符串：\n\n##### limit\n\nimit 方法用于获取指定数量的流。 以下代码片段使用 limit 方法打印出 10 条数据：\n\n##### sorted\n\nsorted 方法用于对流进行排序。\n\n##### anyMatch\n\nanyMatch方法可以回答“流中是否有一个元素能匹配给定的谓词”。比如，你可以用它来看\n\n看菜单里面是否有素食可选择：\n\n```java\nif(menu.stream().anyMatch(Dish::isVegetarian)){ \n\n System.out.println(\"The menu is (somewhat) vegetarian friendly!!\"); \n\n} \n```\n\nanyMatch方法返回一个boolean，因此是一个终端操作。\n\n##### allMatch\n\nallMatch方法的工作原理和anyMatch类似，但它会看看流中的元素是否都能匹配给定的谓词。比如，你可以用它来看看菜品是否有利健康（即所有菜的热量都低于1000卡路里）\n\n```java\nboolean isHealthy = menu.stream() \n .allMatch(d -> d.getCalories() < 1000);\n```\n\n##### noneMatch\n\n和allMatch相对的是noneMatch。它可以确保流中没有任何元素与给定的谓词匹配。比如，\n\n你可以用noneMatch重写前面的例子：\n\n```java\nboolean isHealthy = menu.stream() \n .noneMatch(d -> d.getCalories() >= 1000);\n```\n\n\n\n##### **findFirst**和indAny\n\nfindAny方法将返回当前流中的任意元素。\n\nfindFirst方法将返回当前流中的第一个元素。\n\n你可能会想，为什么会同时有findFirst和findAny呢？答案是并行。找到第一个元素\n\n在并行上限制更多。如果你不关心返回的元素是哪个，请使用findAny，因为它在使用并行流\n\n时限制较少。\n\n##### reduce归约\n\nLambda反复结合每个元素，直到流被归约成一个值。\n\n```java\n//求和\nint sum = numbers.stream().reduce(0, (a, b) -> a + b);\n```\n\n##### 数值流\n\nJava 8引入了三个原始类型特化流接口：IntStream、DoubleStream和LongStream\n\n将流转换为特化版本的常用方法是mapToInt、mapToDouble和mapToLong。\n\n```java\nint calories = menu.stream() \n    //返回一个 IntStream\n .mapToInt(Dish::getCalories) \n .sum();\n```\n\n##### 构建流\n\n1由值创建流。使用静态方法Stream.of，通过显式值创建一个流。\n\n2由数组创建流。使用静态方法Arrays.stream从数组创建一个流。\n\n3由文件生成流。Java中用于处理文件等I/O操作的NIO API（非阻塞 I/O）已更新，以便利用Stream API。\n\njava.nio.file.Files中的很多静态方法都会返回一个流。例如，一个很有用的方法是\n\nFiles.lines，它会返回一个由指定文件中的各行构成的字符串流\n\n4由函数生成流。创建无限流。Stream API提供了两个静态方法来从函数生成流：Stream.iterate和Stream.generate。\n\n这两个操作可以创建所谓的无限流：不像从固定集合创建的流那样有固定大小的流。由iterate\n\n和generate产生的流会用给定的函数按需创建值，因此可以无穷无尽地计算下去！\n\n```java\nStream.iterate(0, n -> n + 2) \n .limit(10) \n .forEach(System.out::println)\n```\n\n\n\n#### Java 8 日期时间 API\n\nJava 8 在 **java.time** 包下提供了很多新的 API。以下为两个比较重要的 API：\n\n- **Local(本地)** − 简化了日期时间的处理，没有时区的问题。\n- **Zoned(时区)** − 通过制定的时区处理日期时间。\n\n新的java.time包涵盖了所有处理日期，时间，日期/时间，时区，时刻（instants），过程（during）与时钟（clock）的操作。\n\n##### 本地化时间API\n\nLocalDate/LocalTime 和 LocalDateTime 类可以在处理时区不是必须的情况。\n\n```java\n      // 获取当前的日期时间\n      LocalDateTime currentTime = LocalDateTime.now();\n\t  LocalDate date1 = currentTime.toLocalDate();\n\t     Month month = currentTime.getMonth();\n      int day = currentTime.getDayOfMonth();\n      int seconds = currentTime.getSecond();\n        \n      System.out.println(\"月: \" + month +\", 日: \" + day +\", 秒: \" + seconds);\n```\n\n##### 使用时区的的日期时间API\n\n```java\nZonedDateTime date1 = ZonedDateTime.parse(\"2015-12-03T10:15:30+05:30[Asia/Shanghai]\");\n```\n\n\n\n#### java小知识\n\n1 方法的签名:方法的名称和参数类型\n\n2 匿名类:Java 中可以实现一个类中包含另外一个类，且不需要提供任何的类名直接实例化。\n\n主要是用于在我们需要的时候创建一个对象来执行特定的任务，可以使代码更加简洁。\n\n匿名类是不能有名字的类，它们不能被引用，只能在创建时用 **new** 语句来声明它们。\n\n匿名类语法格式：\n\n```java\nclass outerClass {\n\n    // 定义一个匿名类\n    object1 = new Type(parameterList) {\n         // 匿名类代码\n    };\n}\n```\n\n\n\n","slug":"java8学习笔记","published":1,"updated":"2020-10-18T08:24:24.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbms000ng0v89cxd9cjf","content":"<h3 id=\"Java-8新特性\"><a href=\"#Java-8新特性\" class=\"headerlink\" title=\"Java 8新特性\"></a>Java 8新特性</h3><p>java8的新特性主要有Stream流；Lambda表达式；通过行为参数化传递代码；函数式接口；接口的默认方法；全新的时间日期AP；Annotation 支持多重注解。等等</p>\n<a id=\"more\"></a>\n\n<h4 id=\"通过行为参数化传递代码\"><a href=\"#通过行为参数化传递代码\" class=\"headerlink\" title=\"通过行为参数化传递代码\"></a>通过行为参数化传递代码</h4><p>传递抽象化类，作为参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//择标准建模</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ApplePredicate</span></span>&#123; </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">test</span> <span class=\"params\">(Apple apple)</span></span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//多个实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleHeavyWeightPredicate</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplePredicate</span></span>&#123; </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(Apple apple)</span></span>&#123; </span><br><span class=\"line\"> <span class=\"keyword\">return</span> apple.getWeight() &gt; <span class=\"number\">150</span>; </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleGreenColorPredicate</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplePredicate</span></span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(Apple apple)</span></span>&#123; </span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"string\">\"green\"</span>.equals(apple.getColor()); </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//根据抽象条件筛选</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Apple&gt; <span class=\"title\">filterApples</span><span class=\"params\">(List&lt;Apple&gt; inventory, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"> ApplePredicate p)</span></span>&#123; </span><br><span class=\"line\"> List&lt;Apple&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(); </span><br><span class=\"line\"> <span class=\"keyword\">for</span>(Apple apple: inventory)&#123; </span><br><span class=\"line\"> <span class=\"keyword\">if</span>(p.test(apple))&#123; </span><br><span class=\"line\"> result.add(apple); </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> <span class=\"keyword\">return</span> result; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Java 8中，List自带了一个sort方法（你也可以使用Collections.sort）。sort的行为</p>\n<p>可以用java.util.Comparator对象来参数化，它的接口如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// java.util.Comparator </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123; </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(T o1, T o2)</span></span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//因此，你可以随时创建Comparator的实现，用sort方法表现出不同的行为。比如，你可以</span></span><br><span class=\"line\"><span class=\"comment\">//使用匿名类，按照重量升序对库存排序：</span></span><br><span class=\"line\">inventory.sort(<span class=\"keyword\">new</span> Comparator&lt;Apple&gt;() &#123; </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Apple a1, Apple a2)</span></span>&#123; </span><br><span class=\"line\"> <span class=\"keyword\">return</span> a1.getWeight().compareTo(a2.getWeight()); </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h4><p><strong>Lambda 表达式</strong> − Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）。</p>\n<p>格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parameters) -&gt; expression</span><br><span class=\"line\">或</span><br><span class=\"line\">(parameters) -&gt;&#123; statements; &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h5><p>在函数式接口上使用Lambda表达式。</p>\n<p>将Lambda表达式作为参数传递给某个方法</p>\n<h5 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h5><p>一言以蔽之，函数式接口就是只定义一个抽象方法的接口，但是可以有多个非抽象方法的接口。。</p>\n<h5 id=\"函数描述符\"><a href=\"#函数描述符\" class=\"headerlink\" title=\"函数描述符\"></a>函数描述符</h5><p>函数式接口的抽象方法的签名基本上就是Lambda表达式的签名。我们将这种抽象方法叫作</p>\n<p>函数描述符。</p>\n<h5 id=\"使用函数式接口来传递行为\"><a href=\"#使用函数式接口来传递行为\" class=\"headerlink\" title=\"使用函数式接口来传递行为\"></a>使用函数式接口来传递行为</h5><p>Java 8的库设计师帮你在java.util.function包中引入了几个新的函数式接口。如：Predicate、Consumer和Function</p>\n<h5 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h5><p>lambda 表达式只能引用标记了 final 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。</p>\n<h4 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h4><p>方法引用使用一对冒号 <strong>::</strong></p>\n<ul>\n<li><p><strong>构造器引用：</strong>它的语法是Class::new，或者更一般的Class&lt; T &gt;::new实例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Car car = Car.create( Car::<span class=\"keyword\">new</span> ); <span class=\"keyword\">final</span> List&lt; Car &gt; cars = Arrays.asList( car );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>静态方法引用：</strong>它的语法是Class::static_method，实例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cars.forEach( Car::collide );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>特定类的任意对象的方法引用：</strong>它的语法是Class::method实例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cars.forEach( Car::repair );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>特定对象的方法引用：</strong>它的语法是instance::method实例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Car police = Car.create( Car::<span class=\"keyword\">new</span> ); cars.forEach( police::follow );</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h4 id=\"默认方法\"><a href=\"#默认方法\" class=\"headerlink\" title=\"默认方法\"></a>默认方法</h4><p>Java 8 新增了接口的默认方法。</p>\n<p>简单说，默认方法就是接口可以有实现方法，而且不需要实现类去实现其方法。</p>\n<p>我们只需在方法名前面加个 default 关键字即可实现默认方法。</p>\n<h4 id=\"Stream-流\"><a href=\"#Stream-流\" class=\"headerlink\" title=\"Stream 流\"></a>Stream 流</h4><p>流是Java API的新成员，它允许你以声明性方式处理数据集合（通过查询语句来表达，而不</p>\n<p>是临时编写一个实现）。就现在来说，你可以把它们看成遍历数据集的高级迭代器。</p>\n<p>是一组便捷对集合处理的api。</p>\n<ul>\n<li><strong>stream()</strong> − 为集合创建串行流。</li>\n<li><strong>parallelStream()</strong> − 为集合创建并行流。</li>\n</ul>\n<h5 id=\"只能遍历一次\"><a href=\"#只能遍历一次\" class=\"headerlink\" title=\"只能遍历一次\"></a>只能遍历一次</h5><p>请注意，和迭代器类似，流只能遍历一次。遍历完之后，我们就说这个流已经被消费掉了。</p>\n<p>你可以从原始数据源那里再获得一个新的流来重新遍历一遍，就像迭代器一样。例如，以下代码会抛出一个异常，说流已被消</p>\n<p>费掉了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; title = Arrays.asList(<span class=\"string\">\"Java8\"</span>, <span class=\"string\">\"In\"</span>, <span class=\"string\">\"Action\"</span>); </span><br><span class=\"line\">Stream&lt;String&gt; s = title.stream(); </span><br><span class=\"line\">s.forEach(System.out::println); </span><br><span class=\"line\">s.forEach(System.out::println);<span class=\"comment\">//java.lang.IllegalStateException:流已被操作或关闭</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>总而言之，流的使用一般包括三件事：</p>\n<p> 一个数据源（如集合）来执行一个查询；</p>\n<p> 一个中间操作链，形成一条流的流水线；</p>\n<p> 一个终端操作，执行流水线，并能生成结果。</p>\n<p><img src=\"D:%5Ccode%5CmyBlog%5Csource_posts%5Cjava8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5Cimage-20200911102914791.png\" alt=\"image-20200911102914791\"></p>\n<h5 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h5><p>Stream 提供了新的方法 ‘forEach’ 来迭代流中的每个数据。以下代码片段使用 forEach 输出了10个随机数</p>\n<h5 id=\"map（对每个元素的操作）\"><a href=\"#map（对每个元素的操作）\" class=\"headerlink\" title=\"map（对每个元素的操作）\"></a>map（对每个元素的操作）</h5><p>map 方法用于映射每个元素到对应的结果，以下代码片段使用 map 输出了元素对应的平方数：</p>\n<h5 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h5><p>filter 方法用于通过设置的条件过滤出元素。以下代码片段使用 filter 方法过滤出空字符串：</p>\n<h5 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h5><p>imit 方法用于获取指定数量的流。 以下代码片段使用 limit 方法打印出 10 条数据：</p>\n<h5 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted\"></a>sorted</h5><p>sorted 方法用于对流进行排序。</p>\n<h5 id=\"anyMatch\"><a href=\"#anyMatch\" class=\"headerlink\" title=\"anyMatch\"></a>anyMatch</h5><p>anyMatch方法可以回答“流中是否有一个元素能匹配给定的谓词”。比如，你可以用它来看</p>\n<p>看菜单里面是否有素食可选择：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(menu.stream().anyMatch(Dish::isVegetarian))&#123; </span><br><span class=\"line\"></span><br><span class=\"line\"> System.out.println(<span class=\"string\">\"The menu is (somewhat) vegetarian friendly!!\"</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>anyMatch方法返回一个boolean，因此是一个终端操作。</p>\n<h5 id=\"allMatch\"><a href=\"#allMatch\" class=\"headerlink\" title=\"allMatch\"></a>allMatch</h5><p>allMatch方法的工作原理和anyMatch类似，但它会看看流中的元素是否都能匹配给定的谓词。比如，你可以用它来看看菜品是否有利健康（即所有菜的热量都低于1000卡路里）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span> isHealthy = menu.stream() </span><br><span class=\"line\"> .allMatch(d -&gt; d.getCalories() &lt; <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"noneMatch\"><a href=\"#noneMatch\" class=\"headerlink\" title=\"noneMatch\"></a>noneMatch</h5><p>和allMatch相对的是noneMatch。它可以确保流中没有任何元素与给定的谓词匹配。比如，</p>\n<p>你可以用noneMatch重写前面的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span> isHealthy = menu.stream() </span><br><span class=\"line\"> .noneMatch(d -&gt; d.getCalories() &gt;= <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"findFirst和indAny\"><a href=\"#findFirst和indAny\" class=\"headerlink\" title=\"findFirst和indAny\"></a><strong>findFirst</strong>和indAny</h5><p>findAny方法将返回当前流中的任意元素。</p>\n<p>findFirst方法将返回当前流中的第一个元素。</p>\n<p>你可能会想，为什么会同时有findFirst和findAny呢？答案是并行。找到第一个元素</p>\n<p>在并行上限制更多。如果你不关心返回的元素是哪个，请使用findAny，因为它在使用并行流</p>\n<p>时限制较少。</p>\n<h5 id=\"reduce归约\"><a href=\"#reduce归约\" class=\"headerlink\" title=\"reduce归约\"></a>reduce归约</h5><p>Lambda反复结合每个元素，直到流被归约成一个值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求和</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sum = numbers.stream().reduce(<span class=\"number\">0</span>, (a, b) -&gt; a + b);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数值流\"><a href=\"#数值流\" class=\"headerlink\" title=\"数值流\"></a>数值流</h5><p>Java 8引入了三个原始类型特化流接口：IntStream、DoubleStream和LongStream</p>\n<p>将流转换为特化版本的常用方法是mapToInt、mapToDouble和mapToLong。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> calories = menu.stream() </span><br><span class=\"line\">    <span class=\"comment\">//返回一个 IntStream</span></span><br><span class=\"line\"> .mapToInt(Dish::getCalories) </span><br><span class=\"line\"> .sum();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"构建流\"><a href=\"#构建流\" class=\"headerlink\" title=\"构建流\"></a>构建流</h5><p>1由值创建流。使用静态方法Stream.of，通过显式值创建一个流。</p>\n<p>2由数组创建流。使用静态方法Arrays.stream从数组创建一个流。</p>\n<p>3由文件生成流。Java中用于处理文件等I/O操作的NIO API（非阻塞 I/O）已更新，以便利用Stream API。</p>\n<p>java.nio.file.Files中的很多静态方法都会返回一个流。例如，一个很有用的方法是</p>\n<p>Files.lines，它会返回一个由指定文件中的各行构成的字符串流</p>\n<p>4由函数生成流。创建无限流。Stream API提供了两个静态方法来从函数生成流：Stream.iterate和Stream.generate。</p>\n<p>这两个操作可以创建所谓的无限流：不像从固定集合创建的流那样有固定大小的流。由iterate</p>\n<p>和generate产生的流会用给定的函数按需创建值，因此可以无穷无尽地计算下去！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream.iterate(<span class=\"number\">0</span>, n -&gt; n + <span class=\"number\">2</span>) </span><br><span class=\"line\"> .limit(<span class=\"number\">10</span>) </span><br><span class=\"line\"> .forEach(System.out::println)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Java-8-日期时间-API\"><a href=\"#Java-8-日期时间-API\" class=\"headerlink\" title=\"Java 8 日期时间 API\"></a>Java 8 日期时间 API</h4><p>Java 8 在 <strong>java.time</strong> 包下提供了很多新的 API。以下为两个比较重要的 API：</p>\n<ul>\n<li><strong>Local(本地)</strong> − 简化了日期时间的处理，没有时区的问题。</li>\n<li><strong>Zoned(时区)</strong> − 通过制定的时区处理日期时间。</li>\n</ul>\n<p>新的java.time包涵盖了所有处理日期，时间，日期/时间，时区，时刻（instants），过程（during）与时钟（clock）的操作。</p>\n<h5 id=\"本地化时间API\"><a href=\"#本地化时间API\" class=\"headerlink\" title=\"本地化时间API\"></a>本地化时间API</h5><p>LocalDate/LocalTime 和 LocalDateTime 类可以在处理时区不是必须的情况。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">// 获取当前的日期时间</span></span><br><span class=\"line\">   LocalDateTime currentTime = LocalDateTime.now();</span><br><span class=\"line\">LocalDate date1 = currentTime.toLocalDate();</span><br><span class=\"line\">   Month month = currentTime.getMonth();</span><br><span class=\"line\">   <span class=\"keyword\">int</span> day = currentTime.getDayOfMonth();</span><br><span class=\"line\">   <span class=\"keyword\">int</span> seconds = currentTime.getSecond();</span><br><span class=\"line\">     </span><br><span class=\"line\">   System.out.println(<span class=\"string\">\"月: \"</span> + month +<span class=\"string\">\", 日: \"</span> + day +<span class=\"string\">\", 秒: \"</span> + seconds);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用时区的的日期时间API\"><a href=\"#使用时区的的日期时间API\" class=\"headerlink\" title=\"使用时区的的日期时间API\"></a>使用时区的的日期时间API</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZonedDateTime date1 = ZonedDateTime.parse(<span class=\"string\">\"2015-12-03T10:15:30+05:30[Asia/Shanghai]\"</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"java小知识\"><a href=\"#java小知识\" class=\"headerlink\" title=\"java小知识\"></a>java小知识</h4><p>1 方法的签名:方法的名称和参数类型</p>\n<p>2 匿名类:Java 中可以实现一个类中包含另外一个类，且不需要提供任何的类名直接实例化。</p>\n<p>主要是用于在我们需要的时候创建一个对象来执行特定的任务，可以使代码更加简洁。</p>\n<p>匿名类是不能有名字的类，它们不能被引用，只能在创建时用 <strong>new</strong> 语句来声明它们。</p>\n<p>匿名类语法格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">outerClass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定义一个匿名类</span></span><br><span class=\"line\">    object1 = <span class=\"keyword\">new</span> Type(parameterList) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 匿名类代码</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<h3 id=\"Java-8新特性\"><a href=\"#Java-8新特性\" class=\"headerlink\" title=\"Java 8新特性\"></a>Java 8新特性</h3><p>java8的新特性主要有Stream流；Lambda表达式；通过行为参数化传递代码；函数式接口；接口的默认方法；全新的时间日期AP；Annotation 支持多重注解。等等</p>","more":"<h4 id=\"通过行为参数化传递代码\"><a href=\"#通过行为参数化传递代码\" class=\"headerlink\" title=\"通过行为参数化传递代码\"></a>通过行为参数化传递代码</h4><p>传递抽象化类，作为参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//择标准建模</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ApplePredicate</span></span>&#123; </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">test</span> <span class=\"params\">(Apple apple)</span></span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//多个实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleHeavyWeightPredicate</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplePredicate</span></span>&#123; </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(Apple apple)</span></span>&#123; </span><br><span class=\"line\"> <span class=\"keyword\">return</span> apple.getWeight() &gt; <span class=\"number\">150</span>; </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleGreenColorPredicate</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplePredicate</span></span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(Apple apple)</span></span>&#123; </span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"string\">\"green\"</span>.equals(apple.getColor()); </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//根据抽象条件筛选</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Apple&gt; <span class=\"title\">filterApples</span><span class=\"params\">(List&lt;Apple&gt; inventory, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"> ApplePredicate p)</span></span>&#123; </span><br><span class=\"line\"> List&lt;Apple&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(); </span><br><span class=\"line\"> <span class=\"keyword\">for</span>(Apple apple: inventory)&#123; </span><br><span class=\"line\"> <span class=\"keyword\">if</span>(p.test(apple))&#123; </span><br><span class=\"line\"> result.add(apple); </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> <span class=\"keyword\">return</span> result; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Java 8中，List自带了一个sort方法（你也可以使用Collections.sort）。sort的行为</p>\n<p>可以用java.util.Comparator对象来参数化，它的接口如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// java.util.Comparator </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123; </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(T o1, T o2)</span></span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//因此，你可以随时创建Comparator的实现，用sort方法表现出不同的行为。比如，你可以</span></span><br><span class=\"line\"><span class=\"comment\">//使用匿名类，按照重量升序对库存排序：</span></span><br><span class=\"line\">inventory.sort(<span class=\"keyword\">new</span> Comparator&lt;Apple&gt;() &#123; </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Apple a1, Apple a2)</span></span>&#123; </span><br><span class=\"line\"> <span class=\"keyword\">return</span> a1.getWeight().compareTo(a2.getWeight()); </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h4><p><strong>Lambda 表达式</strong> − Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）。</p>\n<p>格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parameters) -&gt; expression</span><br><span class=\"line\">或</span><br><span class=\"line\">(parameters) -&gt;&#123; statements; &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h5><p>在函数式接口上使用Lambda表达式。</p>\n<p>将Lambda表达式作为参数传递给某个方法</p>\n<h5 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h5><p>一言以蔽之，函数式接口就是只定义一个抽象方法的接口，但是可以有多个非抽象方法的接口。。</p>\n<h5 id=\"函数描述符\"><a href=\"#函数描述符\" class=\"headerlink\" title=\"函数描述符\"></a>函数描述符</h5><p>函数式接口的抽象方法的签名基本上就是Lambda表达式的签名。我们将这种抽象方法叫作</p>\n<p>函数描述符。</p>\n<h5 id=\"使用函数式接口来传递行为\"><a href=\"#使用函数式接口来传递行为\" class=\"headerlink\" title=\"使用函数式接口来传递行为\"></a>使用函数式接口来传递行为</h5><p>Java 8的库设计师帮你在java.util.function包中引入了几个新的函数式接口。如：Predicate、Consumer和Function</p>\n<h5 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h5><p>lambda 表达式只能引用标记了 final 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。</p>\n<h4 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h4><p>方法引用使用一对冒号 <strong>::</strong></p>\n<ul>\n<li><p><strong>构造器引用：</strong>它的语法是Class::new，或者更一般的Class&lt; T &gt;::new实例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Car car = Car.create( Car::<span class=\"keyword\">new</span> ); <span class=\"keyword\">final</span> List&lt; Car &gt; cars = Arrays.asList( car );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>静态方法引用：</strong>它的语法是Class::static_method，实例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cars.forEach( Car::collide );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>特定类的任意对象的方法引用：</strong>它的语法是Class::method实例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cars.forEach( Car::repair );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>特定对象的方法引用：</strong>它的语法是instance::method实例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Car police = Car.create( Car::<span class=\"keyword\">new</span> ); cars.forEach( police::follow );</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h4 id=\"默认方法\"><a href=\"#默认方法\" class=\"headerlink\" title=\"默认方法\"></a>默认方法</h4><p>Java 8 新增了接口的默认方法。</p>\n<p>简单说，默认方法就是接口可以有实现方法，而且不需要实现类去实现其方法。</p>\n<p>我们只需在方法名前面加个 default 关键字即可实现默认方法。</p>\n<h4 id=\"Stream-流\"><a href=\"#Stream-流\" class=\"headerlink\" title=\"Stream 流\"></a>Stream 流</h4><p>流是Java API的新成员，它允许你以声明性方式处理数据集合（通过查询语句来表达，而不</p>\n<p>是临时编写一个实现）。就现在来说，你可以把它们看成遍历数据集的高级迭代器。</p>\n<p>是一组便捷对集合处理的api。</p>\n<ul>\n<li><strong>stream()</strong> − 为集合创建串行流。</li>\n<li><strong>parallelStream()</strong> − 为集合创建并行流。</li>\n</ul>\n<h5 id=\"只能遍历一次\"><a href=\"#只能遍历一次\" class=\"headerlink\" title=\"只能遍历一次\"></a>只能遍历一次</h5><p>请注意，和迭代器类似，流只能遍历一次。遍历完之后，我们就说这个流已经被消费掉了。</p>\n<p>你可以从原始数据源那里再获得一个新的流来重新遍历一遍，就像迭代器一样。例如，以下代码会抛出一个异常，说流已被消</p>\n<p>费掉了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; title = Arrays.asList(<span class=\"string\">\"Java8\"</span>, <span class=\"string\">\"In\"</span>, <span class=\"string\">\"Action\"</span>); </span><br><span class=\"line\">Stream&lt;String&gt; s = title.stream(); </span><br><span class=\"line\">s.forEach(System.out::println); </span><br><span class=\"line\">s.forEach(System.out::println);<span class=\"comment\">//java.lang.IllegalStateException:流已被操作或关闭</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>总而言之，流的使用一般包括三件事：</p>\n<p> 一个数据源（如集合）来执行一个查询；</p>\n<p> 一个中间操作链，形成一条流的流水线；</p>\n<p> 一个终端操作，执行流水线，并能生成结果。</p>\n<p><img src=\"D:%5Ccode%5CmyBlog%5Csource_posts%5Cjava8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5Cimage-20200911102914791.png\" alt=\"image-20200911102914791\"></p>\n<h5 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h5><p>Stream 提供了新的方法 ‘forEach’ 来迭代流中的每个数据。以下代码片段使用 forEach 输出了10个随机数</p>\n<h5 id=\"map（对每个元素的操作）\"><a href=\"#map（对每个元素的操作）\" class=\"headerlink\" title=\"map（对每个元素的操作）\"></a>map（对每个元素的操作）</h5><p>map 方法用于映射每个元素到对应的结果，以下代码片段使用 map 输出了元素对应的平方数：</p>\n<h5 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h5><p>filter 方法用于通过设置的条件过滤出元素。以下代码片段使用 filter 方法过滤出空字符串：</p>\n<h5 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h5><p>imit 方法用于获取指定数量的流。 以下代码片段使用 limit 方法打印出 10 条数据：</p>\n<h5 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted\"></a>sorted</h5><p>sorted 方法用于对流进行排序。</p>\n<h5 id=\"anyMatch\"><a href=\"#anyMatch\" class=\"headerlink\" title=\"anyMatch\"></a>anyMatch</h5><p>anyMatch方法可以回答“流中是否有一个元素能匹配给定的谓词”。比如，你可以用它来看</p>\n<p>看菜单里面是否有素食可选择：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(menu.stream().anyMatch(Dish::isVegetarian))&#123; </span><br><span class=\"line\"></span><br><span class=\"line\"> System.out.println(<span class=\"string\">\"The menu is (somewhat) vegetarian friendly!!\"</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>anyMatch方法返回一个boolean，因此是一个终端操作。</p>\n<h5 id=\"allMatch\"><a href=\"#allMatch\" class=\"headerlink\" title=\"allMatch\"></a>allMatch</h5><p>allMatch方法的工作原理和anyMatch类似，但它会看看流中的元素是否都能匹配给定的谓词。比如，你可以用它来看看菜品是否有利健康（即所有菜的热量都低于1000卡路里）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span> isHealthy = menu.stream() </span><br><span class=\"line\"> .allMatch(d -&gt; d.getCalories() &lt; <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"noneMatch\"><a href=\"#noneMatch\" class=\"headerlink\" title=\"noneMatch\"></a>noneMatch</h5><p>和allMatch相对的是noneMatch。它可以确保流中没有任何元素与给定的谓词匹配。比如，</p>\n<p>你可以用noneMatch重写前面的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span> isHealthy = menu.stream() </span><br><span class=\"line\"> .noneMatch(d -&gt; d.getCalories() &gt;= <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"findFirst和indAny\"><a href=\"#findFirst和indAny\" class=\"headerlink\" title=\"findFirst和indAny\"></a><strong>findFirst</strong>和indAny</h5><p>findAny方法将返回当前流中的任意元素。</p>\n<p>findFirst方法将返回当前流中的第一个元素。</p>\n<p>你可能会想，为什么会同时有findFirst和findAny呢？答案是并行。找到第一个元素</p>\n<p>在并行上限制更多。如果你不关心返回的元素是哪个，请使用findAny，因为它在使用并行流</p>\n<p>时限制较少。</p>\n<h5 id=\"reduce归约\"><a href=\"#reduce归约\" class=\"headerlink\" title=\"reduce归约\"></a>reduce归约</h5><p>Lambda反复结合每个元素，直到流被归约成一个值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求和</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sum = numbers.stream().reduce(<span class=\"number\">0</span>, (a, b) -&gt; a + b);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数值流\"><a href=\"#数值流\" class=\"headerlink\" title=\"数值流\"></a>数值流</h5><p>Java 8引入了三个原始类型特化流接口：IntStream、DoubleStream和LongStream</p>\n<p>将流转换为特化版本的常用方法是mapToInt、mapToDouble和mapToLong。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> calories = menu.stream() </span><br><span class=\"line\">    <span class=\"comment\">//返回一个 IntStream</span></span><br><span class=\"line\"> .mapToInt(Dish::getCalories) </span><br><span class=\"line\"> .sum();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"构建流\"><a href=\"#构建流\" class=\"headerlink\" title=\"构建流\"></a>构建流</h5><p>1由值创建流。使用静态方法Stream.of，通过显式值创建一个流。</p>\n<p>2由数组创建流。使用静态方法Arrays.stream从数组创建一个流。</p>\n<p>3由文件生成流。Java中用于处理文件等I/O操作的NIO API（非阻塞 I/O）已更新，以便利用Stream API。</p>\n<p>java.nio.file.Files中的很多静态方法都会返回一个流。例如，一个很有用的方法是</p>\n<p>Files.lines，它会返回一个由指定文件中的各行构成的字符串流</p>\n<p>4由函数生成流。创建无限流。Stream API提供了两个静态方法来从函数生成流：Stream.iterate和Stream.generate。</p>\n<p>这两个操作可以创建所谓的无限流：不像从固定集合创建的流那样有固定大小的流。由iterate</p>\n<p>和generate产生的流会用给定的函数按需创建值，因此可以无穷无尽地计算下去！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream.iterate(<span class=\"number\">0</span>, n -&gt; n + <span class=\"number\">2</span>) </span><br><span class=\"line\"> .limit(<span class=\"number\">10</span>) </span><br><span class=\"line\"> .forEach(System.out::println)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Java-8-日期时间-API\"><a href=\"#Java-8-日期时间-API\" class=\"headerlink\" title=\"Java 8 日期时间 API\"></a>Java 8 日期时间 API</h4><p>Java 8 在 <strong>java.time</strong> 包下提供了很多新的 API。以下为两个比较重要的 API：</p>\n<ul>\n<li><strong>Local(本地)</strong> − 简化了日期时间的处理，没有时区的问题。</li>\n<li><strong>Zoned(时区)</strong> − 通过制定的时区处理日期时间。</li>\n</ul>\n<p>新的java.time包涵盖了所有处理日期，时间，日期/时间，时区，时刻（instants），过程（during）与时钟（clock）的操作。</p>\n<h5 id=\"本地化时间API\"><a href=\"#本地化时间API\" class=\"headerlink\" title=\"本地化时间API\"></a>本地化时间API</h5><p>LocalDate/LocalTime 和 LocalDateTime 类可以在处理时区不是必须的情况。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">// 获取当前的日期时间</span></span><br><span class=\"line\">   LocalDateTime currentTime = LocalDateTime.now();</span><br><span class=\"line\">LocalDate date1 = currentTime.toLocalDate();</span><br><span class=\"line\">   Month month = currentTime.getMonth();</span><br><span class=\"line\">   <span class=\"keyword\">int</span> day = currentTime.getDayOfMonth();</span><br><span class=\"line\">   <span class=\"keyword\">int</span> seconds = currentTime.getSecond();</span><br><span class=\"line\">     </span><br><span class=\"line\">   System.out.println(<span class=\"string\">\"月: \"</span> + month +<span class=\"string\">\", 日: \"</span> + day +<span class=\"string\">\", 秒: \"</span> + seconds);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用时区的的日期时间API\"><a href=\"#使用时区的的日期时间API\" class=\"headerlink\" title=\"使用时区的的日期时间API\"></a>使用时区的的日期时间API</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZonedDateTime date1 = ZonedDateTime.parse(<span class=\"string\">\"2015-12-03T10:15:30+05:30[Asia/Shanghai]\"</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"java小知识\"><a href=\"#java小知识\" class=\"headerlink\" title=\"java小知识\"></a>java小知识</h4><p>1 方法的签名:方法的名称和参数类型</p>\n<p>2 匿名类:Java 中可以实现一个类中包含另外一个类，且不需要提供任何的类名直接实例化。</p>\n<p>主要是用于在我们需要的时候创建一个对象来执行特定的任务，可以使代码更加简洁。</p>\n<p>匿名类是不能有名字的类，它们不能被引用，只能在创建时用 <strong>new</strong> 语句来声明它们。</p>\n<p>匿名类语法格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">outerClass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定义一个匿名类</span></span><br><span class=\"line\">    object1 = <span class=\"keyword\">new</span> Type(parameterList) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 匿名类代码</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-08-01T03:43:29.243Z","updated":"2020-08-01T03:43:29.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbmu000rg0v8bpqedio0","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"mybatis 延迟加载和立即加载的实现","date":"2020-01-08T14:06:49.000Z","_content":"\nmybatis 延迟加载和立即加载的实现\n\n<!--more-->\n\n 延迟加载：   就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载.\n 好处：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速 度要快。  \n 坏处：   因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗 时间，所以可能造成用户等待时间变长，造成用户体验下降\n 在我们使用多表查询时（一对一，一对多或者多对多），mybatis默认使用立即加载。如果我们想使用延迟加载需要做两件事\n\n ### 1设置多表查询返回的resultMap\n\n\n```\n    <resultMap id=\"entity1tEntity2\" type=\"entity1\">\n        <id property=\"entity1_id\" column=\"entity1_id\"></id>\n        <result property=\"entity2_id\" column=\"entity2_id\"></result><!--关联字段-->\n        <result property=\"file\" column=\"file\"></result>\n            <!--在这里完成这个配置后只要select * from table_entity1就可以了-->\n        <!-- 一对一的关系映射：配置封装entity2的内容\n        select属性指定的内容：查询entity2的唯一标识：\n        column属性指定的内容：entity2根据id查询时，所需要的参数的值\n        -->\n        <association property=\"entity2\" column=\"entity2_id\" javaType=\"entity2\" select=\"namespce+查询语句的id\"></association>\n            <!--在这里完成这个配置后只要select * from table_entity1 where entity2_id=?就可以了-->\n    </resultMap>\n\n```\n配置映射文件config.xml\n\n```\n<configuration>\n    <settings>\n        <!--开启Mybatis支持延迟加载-->\n        <setting name=\"lazyLoadingEnabled\" value=\"true\"/>\n    </settings>\n</configuration>\n```\n官方文档：[https://mybatis.org/mybatis-3/zh/configuration.html#settings](https://mybatis.org/mybatis-3/zh/configuration.html#settings).\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108220513576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)","source":"_posts/mybatis-延迟加载和立即加载的实现.md","raw":"---\ntitle: mybatis 延迟加载和立即加载的实现\ndate: 2020-01-08 22:06:49 \ncategories: mybatis\ntags: mybatis\n---\n\nmybatis 延迟加载和立即加载的实现\n\n<!--more-->\n\n 延迟加载：   就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载.\n 好处：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速 度要快。  \n 坏处：   因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗 时间，所以可能造成用户等待时间变长，造成用户体验下降\n 在我们使用多表查询时（一对一，一对多或者多对多），mybatis默认使用立即加载。如果我们想使用延迟加载需要做两件事\n\n ### 1设置多表查询返回的resultMap\n\n\n```\n    <resultMap id=\"entity1tEntity2\" type=\"entity1\">\n        <id property=\"entity1_id\" column=\"entity1_id\"></id>\n        <result property=\"entity2_id\" column=\"entity2_id\"></result><!--关联字段-->\n        <result property=\"file\" column=\"file\"></result>\n            <!--在这里完成这个配置后只要select * from table_entity1就可以了-->\n        <!-- 一对一的关系映射：配置封装entity2的内容\n        select属性指定的内容：查询entity2的唯一标识：\n        column属性指定的内容：entity2根据id查询时，所需要的参数的值\n        -->\n        <association property=\"entity2\" column=\"entity2_id\" javaType=\"entity2\" select=\"namespce+查询语句的id\"></association>\n            <!--在这里完成这个配置后只要select * from table_entity1 where entity2_id=?就可以了-->\n    </resultMap>\n\n```\n配置映射文件config.xml\n\n```\n<configuration>\n    <settings>\n        <!--开启Mybatis支持延迟加载-->\n        <setting name=\"lazyLoadingEnabled\" value=\"true\"/>\n    </settings>\n</configuration>\n```\n官方文档：[https://mybatis.org/mybatis-3/zh/configuration.html#settings](https://mybatis.org/mybatis-3/zh/configuration.html#settings).\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108220513576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)","slug":"mybatis-延迟加载和立即加载的实现","published":1,"updated":"2020-08-01T03:43:37.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbmv000tg0v87muu6if1","content":"<p>mybatis 延迟加载和立即加载的实现</p>\n<a id=\"more\"></a>\n\n<p> 延迟加载：   就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载.<br> 好处：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速 度要快。<br> 坏处：   因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗 时间，所以可能造成用户等待时间变长，造成用户体验下降<br> 在我们使用多表查询时（一对一，一对多或者多对多），mybatis默认使用立即加载。如果我们想使用延迟加载需要做两件事</p>\n<h3 id=\"1设置多表查询返回的resultMap\"><a href=\"#1设置多表查询返回的resultMap\" class=\"headerlink\" title=\"1设置多表查询返回的resultMap\"></a>1设置多表查询返回的resultMap</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap id&#x3D;&quot;entity1tEntity2&quot; type&#x3D;&quot;entity1&quot;&gt;</span><br><span class=\"line\">    &lt;id property&#x3D;&quot;entity1_id&quot; column&#x3D;&quot;entity1_id&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;entity2_id&quot; column&#x3D;&quot;entity2_id&quot;&gt;&lt;&#x2F;result&gt;&lt;!--关联字段--&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;file&quot; column&#x3D;&quot;file&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">        &lt;!--在这里完成这个配置后只要select * from table_entity1就可以了--&gt;</span><br><span class=\"line\">    &lt;!-- 一对一的关系映射：配置封装entity2的内容</span><br><span class=\"line\">    select属性指定的内容：查询entity2的唯一标识：</span><br><span class=\"line\">    column属性指定的内容：entity2根据id查询时，所需要的参数的值</span><br><span class=\"line\">    --&gt;</span><br><span class=\"line\">    &lt;association property&#x3D;&quot;entity2&quot; column&#x3D;&quot;entity2_id&quot; javaType&#x3D;&quot;entity2&quot; select&#x3D;&quot;namespce+查询语句的id&quot;&gt;&lt;&#x2F;association&gt;</span><br><span class=\"line\">        &lt;!--在这里完成这个配置后只要select * from table_entity1 where entity2_id&#x3D;?就可以了--&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<p>配置映射文件config.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;settings&gt;</span><br><span class=\"line\">        &lt;!--开启Mybatis支持延迟加载--&gt;</span><br><span class=\"line\">        &lt;setting name&#x3D;&quot;lazyLoadingEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;settings&gt;</span><br><span class=\"line\">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>\n<p>官方文档：<a href=\"https://mybatis.org/mybatis-3/zh/configuration.html#settings\" target=\"_blank\" rel=\"noopener\">https://mybatis.org/mybatis-3/zh/configuration.html#settings</a>.<br><img src=\"https://img-blog.csdnimg.cn/20200108220513576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"<p>mybatis 延迟加载和立即加载的实现</p>","more":"<p> 延迟加载：   就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载.<br> 好处：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速 度要快。<br> 坏处：   因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗 时间，所以可能造成用户等待时间变长，造成用户体验下降<br> 在我们使用多表查询时（一对一，一对多或者多对多），mybatis默认使用立即加载。如果我们想使用延迟加载需要做两件事</p>\n<h3 id=\"1设置多表查询返回的resultMap\"><a href=\"#1设置多表查询返回的resultMap\" class=\"headerlink\" title=\"1设置多表查询返回的resultMap\"></a>1设置多表查询返回的resultMap</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap id&#x3D;&quot;entity1tEntity2&quot; type&#x3D;&quot;entity1&quot;&gt;</span><br><span class=\"line\">    &lt;id property&#x3D;&quot;entity1_id&quot; column&#x3D;&quot;entity1_id&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;entity2_id&quot; column&#x3D;&quot;entity2_id&quot;&gt;&lt;&#x2F;result&gt;&lt;!--关联字段--&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;file&quot; column&#x3D;&quot;file&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">        &lt;!--在这里完成这个配置后只要select * from table_entity1就可以了--&gt;</span><br><span class=\"line\">    &lt;!-- 一对一的关系映射：配置封装entity2的内容</span><br><span class=\"line\">    select属性指定的内容：查询entity2的唯一标识：</span><br><span class=\"line\">    column属性指定的内容：entity2根据id查询时，所需要的参数的值</span><br><span class=\"line\">    --&gt;</span><br><span class=\"line\">    &lt;association property&#x3D;&quot;entity2&quot; column&#x3D;&quot;entity2_id&quot; javaType&#x3D;&quot;entity2&quot; select&#x3D;&quot;namespce+查询语句的id&quot;&gt;&lt;&#x2F;association&gt;</span><br><span class=\"line\">        &lt;!--在这里完成这个配置后只要select * from table_entity1 where entity2_id&#x3D;?就可以了--&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<p>配置映射文件config.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;settings&gt;</span><br><span class=\"line\">        &lt;!--开启Mybatis支持延迟加载--&gt;</span><br><span class=\"line\">        &lt;setting name&#x3D;&quot;lazyLoadingEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;settings&gt;</span><br><span class=\"line\">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>\n<p>官方文档：<a href=\"https://mybatis.org/mybatis-3/zh/configuration.html#settings\" target=\"_blank\" rel=\"noopener\">https://mybatis.org/mybatis-3/zh/configuration.html#settings</a>.<br><img src=\"https://img-blog.csdnimg.cn/20200108220513576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>"},{"title":"mybatis表间关系，多表联查如何定义实体和返回类型","date":"2019-12-17T15:40:21.000Z","_content":"\n mybatis表间关系，多表联查如何定义实体和返回类型\n\n<!--more-->\n\n### 1，一对一关系在实体加入关联实体属性(Entity1 和Entity2一对一,通过field关联)\n\n```\npublic class Entity1 implements Serializable {\nprivate Integer id;\nprivate String field;\nprivate String field1;\nprivate Entity2 entity2;\n(getter,setter,toString方法)\n...\n}\npublic class Entity2 implements Serializable {\nprivate Integer id;\nprivate String field;\nprivate String field2;\nprivate Entity2 entity1;\n(getter,setter,toString方法)\n...\n}\n```\n Entity1对应的mapper中加入相应的resultMap\n\n```\n    <resultMap id=\"entity1Entity2Map\" type=\"Entity1 \">\n        <id property=\"id\" column=\"aid\"></id>\n        <result property=\"field\" column=\"field\"></result>\n        <result property=\"field1\" column=\"field1\"></result>\n        <!-- 一对一的关系映射：配置封装Entity2的内容-->\n        <association property=\"field\" column=\"field\" javaType=\"Entity2\">\n            <id property=\"id\" column=\"id\"></id>\n            <result column=\"field\" property=\"field\"></result>\n            <result column=\"field2\" property=\"field2\"></result>\n        </association>\n    </resultMap>\n```\n2，一对多关系在实体加入关联实体属性(Entity3 和Entity4一对多,通过field关联)\n```\npublic class Entity3 implements Serializable {\nprivate Integer id;\nprivate String field;\nprivate String field3;\nprivate List<Entity4> entity4;\n(getter,setter,toString方法)\n...\n}\npublic class Entity2 implements Serializable {\nprivate Integer id;\nprivate String field;\nprivate String field4;\nprivate Entity2 entity3;\n(getter,setter,toString方法)\n...\n}\n```\n Entity3对应的mapper中加入相应的resultMap\n\n```\n    <resultMap id=\"entity3Entity4Map\" type=\"Entity3 \">\n        <id property=\"id\" column=\"aid\"></id>\n        <result property=\"field\" column=\"field\"></result>\n        <result property=\"field3\" column=\"field3\"></result>\n        <!-- 配置Entity3对象中Entity4集合的映射 -->\n        <collection property=\"Entity4\" ofType=\"Entity4\">\n            <id column=\"id\" property=\"id\"></id>\n            <result column=\"field\" property=\"field\"></result>\n            <result column=\"field4\" property=\"field4\"></result>\n        </collection>\n    </resultMap>\n```\n### 3，多对多关系\n多对多关系就类似了，实体（Entity5，Entity6关联）中都是加对方的List<T>\nReultMap关对方联集合的映射","source":"_posts/mybatis表间关系，多表联查如何定义实体和返回类型.md","raw":"---\ntitle: mybatis表间关系，多表联查如何定义实体和返回类型\ndate: 2019-12-17 23:40:21\ncategories: mybatis\ntags: mybatis\n---\n\n mybatis表间关系，多表联查如何定义实体和返回类型\n\n<!--more-->\n\n### 1，一对一关系在实体加入关联实体属性(Entity1 和Entity2一对一,通过field关联)\n\n```\npublic class Entity1 implements Serializable {\nprivate Integer id;\nprivate String field;\nprivate String field1;\nprivate Entity2 entity2;\n(getter,setter,toString方法)\n...\n}\npublic class Entity2 implements Serializable {\nprivate Integer id;\nprivate String field;\nprivate String field2;\nprivate Entity2 entity1;\n(getter,setter,toString方法)\n...\n}\n```\n Entity1对应的mapper中加入相应的resultMap\n\n```\n    <resultMap id=\"entity1Entity2Map\" type=\"Entity1 \">\n        <id property=\"id\" column=\"aid\"></id>\n        <result property=\"field\" column=\"field\"></result>\n        <result property=\"field1\" column=\"field1\"></result>\n        <!-- 一对一的关系映射：配置封装Entity2的内容-->\n        <association property=\"field\" column=\"field\" javaType=\"Entity2\">\n            <id property=\"id\" column=\"id\"></id>\n            <result column=\"field\" property=\"field\"></result>\n            <result column=\"field2\" property=\"field2\"></result>\n        </association>\n    </resultMap>\n```\n2，一对多关系在实体加入关联实体属性(Entity3 和Entity4一对多,通过field关联)\n```\npublic class Entity3 implements Serializable {\nprivate Integer id;\nprivate String field;\nprivate String field3;\nprivate List<Entity4> entity4;\n(getter,setter,toString方法)\n...\n}\npublic class Entity2 implements Serializable {\nprivate Integer id;\nprivate String field;\nprivate String field4;\nprivate Entity2 entity3;\n(getter,setter,toString方法)\n...\n}\n```\n Entity3对应的mapper中加入相应的resultMap\n\n```\n    <resultMap id=\"entity3Entity4Map\" type=\"Entity3 \">\n        <id property=\"id\" column=\"aid\"></id>\n        <result property=\"field\" column=\"field\"></result>\n        <result property=\"field3\" column=\"field3\"></result>\n        <!-- 配置Entity3对象中Entity4集合的映射 -->\n        <collection property=\"Entity4\" ofType=\"Entity4\">\n            <id column=\"id\" property=\"id\"></id>\n            <result column=\"field\" property=\"field\"></result>\n            <result column=\"field4\" property=\"field4\"></result>\n        </collection>\n    </resultMap>\n```\n### 3，多对多关系\n多对多关系就类似了，实体（Entity5，Entity6关联）中都是加对方的List<T>\nReultMap关对方联集合的映射","slug":"mybatis表间关系，多表联查如何定义实体和返回类型","published":1,"updated":"2020-08-01T03:43:37.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbmv000wg0v80e3a15kg","content":"<p> mybatis表间关系，多表联查如何定义实体和返回类型</p>\n<a id=\"more\"></a>\n\n<h3 id=\"1，一对一关系在实体加入关联实体属性-Entity1-和Entity2一对一-通过field关联\"><a href=\"#1，一对一关系在实体加入关联实体属性-Entity1-和Entity2一对一-通过field关联\" class=\"headerlink\" title=\"1，一对一关系在实体加入关联实体属性(Entity1 和Entity2一对一,通过field关联)\"></a>1，一对一关系在实体加入关联实体属性(Entity1 和Entity2一对一,通过field关联)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Entity1 implements Serializable &#123;</span><br><span class=\"line\">private Integer id;</span><br><span class=\"line\">private String field;</span><br><span class=\"line\">private String field1;</span><br><span class=\"line\">private Entity2 entity2;</span><br><span class=\"line\">(getter,setter,toString方法)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Entity2 implements Serializable &#123;</span><br><span class=\"line\">private Integer id;</span><br><span class=\"line\">private String field;</span><br><span class=\"line\">private String field2;</span><br><span class=\"line\">private Entity2 entity1;</span><br><span class=\"line\">(getter,setter,toString方法)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> Entity1对应的mapper中加入相应的resultMap</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap id&#x3D;&quot;entity1Entity2Map&quot; type&#x3D;&quot;Entity1 &quot;&gt;</span><br><span class=\"line\">    &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;aid&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;field&quot; column&#x3D;&quot;field&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;field1&quot; column&#x3D;&quot;field1&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;!-- 一对一的关系映射：配置封装Entity2的内容--&gt;</span><br><span class=\"line\">    &lt;association property&#x3D;&quot;field&quot; column&#x3D;&quot;field&quot; javaType&#x3D;&quot;Entity2&quot;&gt;</span><br><span class=\"line\">        &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">        &lt;result column&#x3D;&quot;field&quot; property&#x3D;&quot;field&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">        &lt;result column&#x3D;&quot;field2&quot; property&#x3D;&quot;field2&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;&#x2F;association&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<p>2，一对多关系在实体加入关联实体属性(Entity3 和Entity4一对多,通过field关联)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Entity3 implements Serializable &#123;</span><br><span class=\"line\">private Integer id;</span><br><span class=\"line\">private String field;</span><br><span class=\"line\">private String field3;</span><br><span class=\"line\">private List&lt;Entity4&gt; entity4;</span><br><span class=\"line\">(getter,setter,toString方法)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Entity2 implements Serializable &#123;</span><br><span class=\"line\">private Integer id;</span><br><span class=\"line\">private String field;</span><br><span class=\"line\">private String field4;</span><br><span class=\"line\">private Entity2 entity3;</span><br><span class=\"line\">(getter,setter,toString方法)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> Entity3对应的mapper中加入相应的resultMap</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap id&#x3D;&quot;entity3Entity4Map&quot; type&#x3D;&quot;Entity3 &quot;&gt;</span><br><span class=\"line\">    &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;aid&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;field&quot; column&#x3D;&quot;field&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;field3&quot; column&#x3D;&quot;field3&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;!-- 配置Entity3对象中Entity4集合的映射 --&gt;</span><br><span class=\"line\">    &lt;collection property&#x3D;&quot;Entity4&quot; ofType&#x3D;&quot;Entity4&quot;&gt;</span><br><span class=\"line\">        &lt;id column&#x3D;&quot;id&quot; property&#x3D;&quot;id&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">        &lt;result column&#x3D;&quot;field&quot; property&#x3D;&quot;field&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">        &lt;result column&#x3D;&quot;field4&quot; property&#x3D;&quot;field4&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;&#x2F;collection&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3，多对多关系\"><a href=\"#3，多对多关系\" class=\"headerlink\" title=\"3，多对多关系\"></a>3，多对多关系</h3><p>多对多关系就类似了，实体（Entity5，Entity6关联）中都是加对方的List<T><br>ReultMap关对方联集合的映射</p>\n","site":{"data":{}},"excerpt":"<p> mybatis表间关系，多表联查如何定义实体和返回类型</p>","more":"<h3 id=\"1，一对一关系在实体加入关联实体属性-Entity1-和Entity2一对一-通过field关联\"><a href=\"#1，一对一关系在实体加入关联实体属性-Entity1-和Entity2一对一-通过field关联\" class=\"headerlink\" title=\"1，一对一关系在实体加入关联实体属性(Entity1 和Entity2一对一,通过field关联)\"></a>1，一对一关系在实体加入关联实体属性(Entity1 和Entity2一对一,通过field关联)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Entity1 implements Serializable &#123;</span><br><span class=\"line\">private Integer id;</span><br><span class=\"line\">private String field;</span><br><span class=\"line\">private String field1;</span><br><span class=\"line\">private Entity2 entity2;</span><br><span class=\"line\">(getter,setter,toString方法)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Entity2 implements Serializable &#123;</span><br><span class=\"line\">private Integer id;</span><br><span class=\"line\">private String field;</span><br><span class=\"line\">private String field2;</span><br><span class=\"line\">private Entity2 entity1;</span><br><span class=\"line\">(getter,setter,toString方法)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> Entity1对应的mapper中加入相应的resultMap</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap id&#x3D;&quot;entity1Entity2Map&quot; type&#x3D;&quot;Entity1 &quot;&gt;</span><br><span class=\"line\">    &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;aid&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;field&quot; column&#x3D;&quot;field&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;field1&quot; column&#x3D;&quot;field1&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;!-- 一对一的关系映射：配置封装Entity2的内容--&gt;</span><br><span class=\"line\">    &lt;association property&#x3D;&quot;field&quot; column&#x3D;&quot;field&quot; javaType&#x3D;&quot;Entity2&quot;&gt;</span><br><span class=\"line\">        &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">        &lt;result column&#x3D;&quot;field&quot; property&#x3D;&quot;field&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">        &lt;result column&#x3D;&quot;field2&quot; property&#x3D;&quot;field2&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;&#x2F;association&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<p>2，一对多关系在实体加入关联实体属性(Entity3 和Entity4一对多,通过field关联)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Entity3 implements Serializable &#123;</span><br><span class=\"line\">private Integer id;</span><br><span class=\"line\">private String field;</span><br><span class=\"line\">private String field3;</span><br><span class=\"line\">private List&lt;Entity4&gt; entity4;</span><br><span class=\"line\">(getter,setter,toString方法)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Entity2 implements Serializable &#123;</span><br><span class=\"line\">private Integer id;</span><br><span class=\"line\">private String field;</span><br><span class=\"line\">private String field4;</span><br><span class=\"line\">private Entity2 entity3;</span><br><span class=\"line\">(getter,setter,toString方法)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> Entity3对应的mapper中加入相应的resultMap</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap id&#x3D;&quot;entity3Entity4Map&quot; type&#x3D;&quot;Entity3 &quot;&gt;</span><br><span class=\"line\">    &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;aid&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;field&quot; column&#x3D;&quot;field&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;field3&quot; column&#x3D;&quot;field3&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;!-- 配置Entity3对象中Entity4集合的映射 --&gt;</span><br><span class=\"line\">    &lt;collection property&#x3D;&quot;Entity4&quot; ofType&#x3D;&quot;Entity4&quot;&gt;</span><br><span class=\"line\">        &lt;id column&#x3D;&quot;id&quot; property&#x3D;&quot;id&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">        &lt;result column&#x3D;&quot;field&quot; property&#x3D;&quot;field&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">        &lt;result column&#x3D;&quot;field4&quot; property&#x3D;&quot;field4&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;&#x2F;collection&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3，多对多关系\"><a href=\"#3，多对多关系\" class=\"headerlink\" title=\"3，多对多关系\"></a>3，多对多关系</h3><p>多对多关系就类似了，实体（Entity5，Entity6关联）中都是加对方的List<T><br>ReultMap关对方联集合的映射</p>"},{"title":"mysql删除database报错ERROR 1010 (HY000): Error dropping database (can't rmdir './library', errno:","date":"2020-02-27T03:37:41.000Z","_content":"\n### 数据库删除报错：ERROR 1010 (HY000): Error dropping database (can't rmdir './library', errno:\n'./library'删除的数据库文件夹下面还有东西，需要手动删除。\n参考文章:[https://www.cnblogs.com/ivictor/p/5917370.html](https://www.cnblogs.com/ivictor/p/5917370.html).","source":"_posts/mysql删除database报错ERROR-1010-HY000-Error-dropping-database-can-t-rmdir-library-errno.md","raw":"---\ntitle: >-\n  mysql删除database报错ERROR 1010 (HY000): Error dropping database (can't rmdir\n  './library', errno:\ndate: 2020-02-27 11:37:41\ncategories: mysql\ntags: mysql\n---\n\n### 数据库删除报错：ERROR 1010 (HY000): Error dropping database (can't rmdir './library', errno:\n'./library'删除的数据库文件夹下面还有东西，需要手动删除。\n参考文章:[https://www.cnblogs.com/ivictor/p/5917370.html](https://www.cnblogs.com/ivictor/p/5917370.html).","slug":"mysql删除database报错ERROR-1010-HY000-Error-dropping-database-can-t-rmdir-library-errno","published":1,"updated":"2020-08-01T03:43:37.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbmw000zg0v81yspbaon","content":"<h3 id=\"数据库删除报错：ERROR-1010-HY000-Error-dropping-database-can’t-rmdir-‘-library’-errno\"><a href=\"#数据库删除报错：ERROR-1010-HY000-Error-dropping-database-can’t-rmdir-‘-library’-errno\" class=\"headerlink\" title=\"数据库删除报错：ERROR 1010 (HY000): Error dropping database (can’t rmdir ‘./library’, errno:\"></a>数据库删除报错：ERROR 1010 (HY000): Error dropping database (can’t rmdir ‘./library’, errno:</h3><p>‘./library’删除的数据库文件夹下面还有东西，需要手动删除。<br>参考文章:<a href=\"https://www.cnblogs.com/ivictor/p/5917370.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ivictor/p/5917370.html</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数据库删除报错：ERROR-1010-HY000-Error-dropping-database-can’t-rmdir-‘-library’-errno\"><a href=\"#数据库删除报错：ERROR-1010-HY000-Error-dropping-database-can’t-rmdir-‘-library’-errno\" class=\"headerlink\" title=\"数据库删除报错：ERROR 1010 (HY000): Error dropping database (can’t rmdir ‘./library’, errno:\"></a>数据库删除报错：ERROR 1010 (HY000): Error dropping database (can’t rmdir ‘./library’, errno:</h3><p>‘./library’删除的数据库文件夹下面还有东西，需要手动删除。<br>参考文章:<a href=\"https://www.cnblogs.com/ivictor/p/5917370.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ivictor/p/5917370.html</a>.</p>\n"},{"title":"mybatis连接池的3种配置方式","date":"2019-12-11T14:40:49.000Z","_content":"\n mybatis连接池的3种配置方式:1,POOLED; 2,UNPOOLED 3,JNDI\n\n<!--more-->\n\n#### 1,POOLED\n采用传统的javax. sql. DataSource规范中的连接池.一旦数据库操作完成，mybaties会将此连接返回给连接池。mybatis有实现规范。\nSqlMapConfig.xml中的配置：\n\n```\n  <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"\"></property>\n                <property name=\"url\" value=\"\"></property>\n                <property name=\"username\" value=\"\"></property>\n                <property name=\"password\" value=\"\"></property>\n            </dataSource>\n```\n\n#### 2,UNPOOLED\n采用传统的获取连接的方式，同样实现Javax. sql. DataSourcel，不过没有使用池的思想。也就是说mybaties会为每一个数据库操作创建一个新的连接，使用完就关闭它。\nSqlMapConfig.xml中的配置：\n\n```\n  <dataSource type=\"UNPOOLED\">\n                <property name=\"driver\" value=\"\"></property>\n                <property name=\"url\" value=\"\"></property>\n                <property name=\"username\" value=\"\"></property>\n                <property name=\"password\" value=\"\"></property>\n            </dataSource>\n```\n\n#### 3,JNDI\n\n  是SUN公司推出的一套规范，属于JavaEE技术之一。目的是模仿windows系统中的注册表。采用服务器提供的JNDI技术实现，来获取DataSource对 象，不同的服务器所能拿到DataSource是不一样。\n  mybaties会从在应用服务器向配置好的JNDI数据源DataSource获取数据库连接。一般在生产环境中使用。\n  SqlMapConfig.xml中的配置：\n\n```\n<environments default= \"mysql\">\n<environment id= \"mysql\">\n<transact ionManager type =”JDBC\">< / transact ionManager>\n<dataSource type= ”JNDI\" >\n< property name= ”data_ source\" value= \"java : comp/ env/ jdbc/数据库名\n</dataSource>\n< /environment>\n< / environments>\n```\n\n```\n \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Context>\n\n<Resource \nname=\"jdbc/test\"                  数据源的名称\ntype=\"javax.sql.DataSource\"                   数据源类型\nauth=\"Container\"                        数据源提供者\nmaxActive=\"20\"                         最大活动数\nmaxWait=\"10000\"                            最大等待时间\nmaxIdle=\"5\"                               最大空闲数\nusername=\"root\"                            用户名\npassword=\"1234\"                            密码\ndriverClassName=\"com.mysql.jdbc.Driver\"          驱动类\nurl=\"jdbc:mysql://localhost:3306/eesy_mybatis\" 连接url字符串\n/>\n\n\n\n```\n在resouce的目录下：\n写一个配置文件：context.xml\n\n```\n<Resource \nname=\"jdbc/test\"\ntype=\"javax.sql.DataSource\"\nauth=\"Container\"\nmaxActive=\nmaxWait=\nmaxIdle=\nusername=\npassword=\ndriverClassName=\"com.mysql.jdbc.Driver\"\nurl=\n/>\n</Context>\n```","source":"_posts/mybatis连接池的3种配置方式.md","raw":"---\ntitle: mybatis连接池的3种配置方式\ndate: 2019-12-11 22:40:49 \ncategories: mybatis\ntags: mybatis\n---\n\n mybatis连接池的3种配置方式:1,POOLED; 2,UNPOOLED 3,JNDI\n\n<!--more-->\n\n#### 1,POOLED\n采用传统的javax. sql. DataSource规范中的连接池.一旦数据库操作完成，mybaties会将此连接返回给连接池。mybatis有实现规范。\nSqlMapConfig.xml中的配置：\n\n```\n  <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"\"></property>\n                <property name=\"url\" value=\"\"></property>\n                <property name=\"username\" value=\"\"></property>\n                <property name=\"password\" value=\"\"></property>\n            </dataSource>\n```\n\n#### 2,UNPOOLED\n采用传统的获取连接的方式，同样实现Javax. sql. DataSourcel，不过没有使用池的思想。也就是说mybaties会为每一个数据库操作创建一个新的连接，使用完就关闭它。\nSqlMapConfig.xml中的配置：\n\n```\n  <dataSource type=\"UNPOOLED\">\n                <property name=\"driver\" value=\"\"></property>\n                <property name=\"url\" value=\"\"></property>\n                <property name=\"username\" value=\"\"></property>\n                <property name=\"password\" value=\"\"></property>\n            </dataSource>\n```\n\n#### 3,JNDI\n\n  是SUN公司推出的一套规范，属于JavaEE技术之一。目的是模仿windows系统中的注册表。采用服务器提供的JNDI技术实现，来获取DataSource对 象，不同的服务器所能拿到DataSource是不一样。\n  mybaties会从在应用服务器向配置好的JNDI数据源DataSource获取数据库连接。一般在生产环境中使用。\n  SqlMapConfig.xml中的配置：\n\n```\n<environments default= \"mysql\">\n<environment id= \"mysql\">\n<transact ionManager type =”JDBC\">< / transact ionManager>\n<dataSource type= ”JNDI\" >\n< property name= ”data_ source\" value= \"java : comp/ env/ jdbc/数据库名\n</dataSource>\n< /environment>\n< / environments>\n```\n\n```\n \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Context>\n\n<Resource \nname=\"jdbc/test\"                  数据源的名称\ntype=\"javax.sql.DataSource\"                   数据源类型\nauth=\"Container\"                        数据源提供者\nmaxActive=\"20\"                         最大活动数\nmaxWait=\"10000\"                            最大等待时间\nmaxIdle=\"5\"                               最大空闲数\nusername=\"root\"                            用户名\npassword=\"1234\"                            密码\ndriverClassName=\"com.mysql.jdbc.Driver\"          驱动类\nurl=\"jdbc:mysql://localhost:3306/eesy_mybatis\" 连接url字符串\n/>\n\n\n\n```\n在resouce的目录下：\n写一个配置文件：context.xml\n\n```\n<Resource \nname=\"jdbc/test\"\ntype=\"javax.sql.DataSource\"\nauth=\"Container\"\nmaxActive=\nmaxWait=\nmaxIdle=\nusername=\npassword=\ndriverClassName=\"com.mysql.jdbc.Driver\"\nurl=\n/>\n</Context>\n```","slug":"mybatis连接池的3种配置方式","published":1,"updated":"2020-08-01T03:43:37.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbmy0013g0v833yac2id","content":"<p> mybatis连接池的3种配置方式:1,POOLED; 2,UNPOOLED 3,JNDI</p>\n<a id=\"more\"></a>\n\n<h4 id=\"1-POOLED\"><a href=\"#1-POOLED\" class=\"headerlink\" title=\"1,POOLED\"></a>1,POOLED</h4><p>采用传统的javax. sql. DataSource规范中的连接池.一旦数据库操作完成，mybaties会将此连接返回给连接池。mybatis有实现规范。<br>SqlMapConfig.xml中的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">          &lt;&#x2F;dataSource&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-UNPOOLED\"><a href=\"#2-UNPOOLED\" class=\"headerlink\" title=\"2,UNPOOLED\"></a>2,UNPOOLED</h4><p>采用传统的获取连接的方式，同样实现Javax. sql. DataSourcel，不过没有使用池的思想。也就是说mybaties会为每一个数据库操作创建一个新的连接，使用完就关闭它。<br>SqlMapConfig.xml中的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dataSource type&#x3D;&quot;UNPOOLED&quot;&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">          &lt;&#x2F;dataSource&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-JNDI\"><a href=\"#3-JNDI\" class=\"headerlink\" title=\"3,JNDI\"></a>3,JNDI</h4><p>  是SUN公司推出的一套规范，属于JavaEE技术之一。目的是模仿windows系统中的注册表。采用服务器提供的JNDI技术实现，来获取DataSource对 象，不同的服务器所能拿到DataSource是不一样。<br>  mybaties会从在应用服务器向配置好的JNDI数据源DataSource获取数据库连接。一般在生产环境中使用。<br>  SqlMapConfig.xml中的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;environments default&#x3D; &quot;mysql&quot;&gt;</span><br><span class=\"line\">&lt;environment id&#x3D; &quot;mysql&quot;&gt;</span><br><span class=\"line\">&lt;transact ionManager type &#x3D;”JDBC&quot;&gt;&lt; &#x2F; transact ionManager&gt;</span><br><span class=\"line\">&lt;dataSource type&#x3D; ”JNDI&quot; &gt;</span><br><span class=\"line\">&lt; property name&#x3D; ”data_ source&quot; value&#x3D; &quot;java : comp&#x2F; env&#x2F; jdbc&#x2F;数据库名</span><br><span class=\"line\">&lt;&#x2F;dataSource&gt;</span><br><span class=\"line\">&lt; &#x2F;environment&gt;</span><br><span class=\"line\">&lt; &#x2F; environments&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;Context&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Resource </span><br><span class=\"line\">name&#x3D;&quot;jdbc&#x2F;test&quot;                  数据源的名称</span><br><span class=\"line\">type&#x3D;&quot;javax.sql.DataSource&quot;                   数据源类型</span><br><span class=\"line\">auth&#x3D;&quot;Container&quot;                        数据源提供者</span><br><span class=\"line\">maxActive&#x3D;&quot;20&quot;                         最大活动数</span><br><span class=\"line\">maxWait&#x3D;&quot;10000&quot;                            最大等待时间</span><br><span class=\"line\">maxIdle&#x3D;&quot;5&quot;                               最大空闲数</span><br><span class=\"line\">username&#x3D;&quot;root&quot;                            用户名</span><br><span class=\"line\">password&#x3D;&quot;1234&quot;                            密码</span><br><span class=\"line\">driverClassName&#x3D;&quot;com.mysql.jdbc.Driver&quot;          驱动类</span><br><span class=\"line\">url&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;eesy_mybatis&quot; 连接url字符串</span><br><span class=\"line\">&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n<p>在resouce的目录下：<br>写一个配置文件：context.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Resource </span><br><span class=\"line\">name&#x3D;&quot;jdbc&#x2F;test&quot;</span><br><span class=\"line\">type&#x3D;&quot;javax.sql.DataSource&quot;</span><br><span class=\"line\">auth&#x3D;&quot;Container&quot;</span><br><span class=\"line\">maxActive&#x3D;</span><br><span class=\"line\">maxWait&#x3D;</span><br><span class=\"line\">maxIdle&#x3D;</span><br><span class=\"line\">username&#x3D;</span><br><span class=\"line\">password&#x3D;</span><br><span class=\"line\">driverClassName&#x3D;&quot;com.mysql.jdbc.Driver&quot;</span><br><span class=\"line\">url&#x3D;</span><br><span class=\"line\">&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;Context&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p> mybatis连接池的3种配置方式:1,POOLED; 2,UNPOOLED 3,JNDI</p>","more":"<h4 id=\"1-POOLED\"><a href=\"#1-POOLED\" class=\"headerlink\" title=\"1,POOLED\"></a>1,POOLED</h4><p>采用传统的javax. sql. DataSource规范中的连接池.一旦数据库操作完成，mybaties会将此连接返回给连接池。mybatis有实现规范。<br>SqlMapConfig.xml中的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">          &lt;&#x2F;dataSource&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-UNPOOLED\"><a href=\"#2-UNPOOLED\" class=\"headerlink\" title=\"2,UNPOOLED\"></a>2,UNPOOLED</h4><p>采用传统的获取连接的方式，同样实现Javax. sql. DataSourcel，不过没有使用池的思想。也就是说mybaties会为每一个数据库操作创建一个新的连接，使用完就关闭它。<br>SqlMapConfig.xml中的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dataSource type&#x3D;&quot;UNPOOLED&quot;&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">          &lt;&#x2F;dataSource&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-JNDI\"><a href=\"#3-JNDI\" class=\"headerlink\" title=\"3,JNDI\"></a>3,JNDI</h4><p>  是SUN公司推出的一套规范，属于JavaEE技术之一。目的是模仿windows系统中的注册表。采用服务器提供的JNDI技术实现，来获取DataSource对 象，不同的服务器所能拿到DataSource是不一样。<br>  mybaties会从在应用服务器向配置好的JNDI数据源DataSource获取数据库连接。一般在生产环境中使用。<br>  SqlMapConfig.xml中的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;environments default&#x3D; &quot;mysql&quot;&gt;</span><br><span class=\"line\">&lt;environment id&#x3D; &quot;mysql&quot;&gt;</span><br><span class=\"line\">&lt;transact ionManager type &#x3D;”JDBC&quot;&gt;&lt; &#x2F; transact ionManager&gt;</span><br><span class=\"line\">&lt;dataSource type&#x3D; ”JNDI&quot; &gt;</span><br><span class=\"line\">&lt; property name&#x3D; ”data_ source&quot; value&#x3D; &quot;java : comp&#x2F; env&#x2F; jdbc&#x2F;数据库名</span><br><span class=\"line\">&lt;&#x2F;dataSource&gt;</span><br><span class=\"line\">&lt; &#x2F;environment&gt;</span><br><span class=\"line\">&lt; &#x2F; environments&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;Context&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Resource </span><br><span class=\"line\">name&#x3D;&quot;jdbc&#x2F;test&quot;                  数据源的名称</span><br><span class=\"line\">type&#x3D;&quot;javax.sql.DataSource&quot;                   数据源类型</span><br><span class=\"line\">auth&#x3D;&quot;Container&quot;                        数据源提供者</span><br><span class=\"line\">maxActive&#x3D;&quot;20&quot;                         最大活动数</span><br><span class=\"line\">maxWait&#x3D;&quot;10000&quot;                            最大等待时间</span><br><span class=\"line\">maxIdle&#x3D;&quot;5&quot;                               最大空闲数</span><br><span class=\"line\">username&#x3D;&quot;root&quot;                            用户名</span><br><span class=\"line\">password&#x3D;&quot;1234&quot;                            密码</span><br><span class=\"line\">driverClassName&#x3D;&quot;com.mysql.jdbc.Driver&quot;          驱动类</span><br><span class=\"line\">url&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;eesy_mybatis&quot; 连接url字符串</span><br><span class=\"line\">&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n<p>在resouce的目录下：<br>写一个配置文件：context.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Resource </span><br><span class=\"line\">name&#x3D;&quot;jdbc&#x2F;test&quot;</span><br><span class=\"line\">type&#x3D;&quot;javax.sql.DataSource&quot;</span><br><span class=\"line\">auth&#x3D;&quot;Container&quot;</span><br><span class=\"line\">maxActive&#x3D;</span><br><span class=\"line\">maxWait&#x3D;</span><br><span class=\"line\">maxIdle&#x3D;</span><br><span class=\"line\">username&#x3D;</span><br><span class=\"line\">password&#x3D;</span><br><span class=\"line\">driverClassName&#x3D;&quot;com.mysql.jdbc.Driver&quot;</span><br><span class=\"line\">url&#x3D;</span><br><span class=\"line\">&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;Context&gt;</span><br></pre></td></tr></table></figure>"},{"title":" mysql联合主键","date":"2020-01-07T03:55:42.000Z","_content":"\n mysql联合主键\n\n<!--more-->\n\n把（列名1，列名2）设置联合主键。将其看成一个有序对。这个有序对不能重复！就是不能有两条记录列名1，列名2都是一样的。\n\n添加语法如下：\n\n```\n ALTER TABLE table_name ADD CONSTRAINT 别名 PRIMARY KEY(列名1，列名2)；\n```","source":"_posts/mysql联合主键.md","raw":"---\ntitle: ' mysql联合主键'\ndate: 2020-01-07 11:55:42 \ncategories: mysql\ntags: mysql\n---\n\n mysql联合主键\n\n<!--more-->\n\n把（列名1，列名2）设置联合主键。将其看成一个有序对。这个有序对不能重复！就是不能有两条记录列名1，列名2都是一样的。\n\n添加语法如下：\n\n```\n ALTER TABLE table_name ADD CONSTRAINT 别名 PRIMARY KEY(列名1，列名2)；\n```","slug":"mysql联合主键","published":1,"updated":"2020-08-01T03:43:37.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbmz0017g0v89m2330ad","content":"<p> mysql联合主键</p>\n<a id=\"more\"></a>\n\n<p>把（列名1，列名2）设置联合主键。将其看成一个有序对。这个有序对不能重复！就是不能有两条记录列名1，列名2都是一样的。</p>\n<p>添加语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD CONSTRAINT 别名 PRIMARY KEY(列名1，列名2)；</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p> mysql联合主键</p>","more":"<p>把（列名1，列名2）设置联合主键。将其看成一个有序对。这个有序对不能重复！就是不能有两条记录列名1，列名2都是一样的。</p>\n<p>添加语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD CONSTRAINT 别名 PRIMARY KEY(列名1，列名2)；</span><br></pre></td></tr></table></figure>"},{"title":"项目启动报错","date":"2020-05-15T14:12:39.000Z","_content":"\n导入一个web项目，跑起来的时候报”org.xml.sax.SAXNotRecognizedException:Feature:http://apache.org/xml/features/val”。原因：原项目用的是jdk1.7而现在用的是1.8.换成jdk1.7后成功运行","source":"_posts/org-xml-sax-SAXNotRecognizedException-Feature-http-apache-org-xml-features-val.md","raw":"---\ntitle: '项目启动报错'\ndate: 2020-05-15 22:12:39\ncategories: jdk\ntags: jdk\n---\n\n导入一个web项目，跑起来的时候报”org.xml.sax.SAXNotRecognizedException:Feature:http://apache.org/xml/features/val”。原因：原项目用的是jdk1.7而现在用的是1.8.换成jdk1.7后成功运行","slug":"org-xml-sax-SAXNotRecognizedException-Feature-http-apache-org-xml-features-val","published":1,"updated":"2020-08-01T03:43:37.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbn0001ag0v878uhd22m","content":"<p>导入一个web项目，跑起来的时候报”org.xml.sax.SAXNotRecognizedException:Feature:<a href=\"http://apache.org/xml/features/val”。原因：原项目用的是jdk1.7而现在用的是1.8.换成jdk1.7后成功运行\" target=\"_blank\" rel=\"noopener\">http://apache.org/xml/features/val”。原因：原项目用的是jdk1.7而现在用的是1.8.换成jdk1.7后成功运行</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>导入一个web项目，跑起来的时候报”org.xml.sax.SAXNotRecognizedException:Feature:<a href=\"http://apache.org/xml/features/val”。原因：原项目用的是jdk1.7而现在用的是1.8.换成jdk1.7后成功运行\" target=\"_blank\" rel=\"noopener\">http://apache.org/xml/features/val”。原因：原项目用的是jdk1.7而现在用的是1.8.换成jdk1.7后成功运行</a></p>\n"},{"title":"sql获取当前插入表的id","date":"2019-12-05T14:39:55.000Z","_content":"\n sql获取当前插入表的id\n\n<!--more-->\n\nsql语句：\n\n```\nselect last_insert_id();\n```\n\n动态sql:\n\n```\n        <selectKey keyProperty=\"userId\" keyColumn=\"id\" resultType=\"int\" order=\"AFTER\">\n            select last_insert_id();\n        </selectKey>\n```","source":"_posts/sql获取当前插入表的id.md","raw":"---\ntitle: sql获取当前插入表的id\ndate: 2019-12-05 22:39:55 \ncategories: mysql\ntags: mysql\n---\n\n sql获取当前插入表的id\n\n<!--more-->\n\nsql语句：\n\n```\nselect last_insert_id();\n```\n\n动态sql:\n\n```\n        <selectKey keyProperty=\"userId\" keyColumn=\"id\" resultType=\"int\" order=\"AFTER\">\n            select last_insert_id();\n        </selectKey>\n```","slug":"sql获取当前插入表的id","published":1,"updated":"2020-08-01T03:43:37.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbn1001fg0v86dmd55j3","content":"<p> sql获取当前插入表的id</p>\n<a id=\"more\"></a>\n\n<p>sql语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select last_insert_id();</span><br></pre></td></tr></table></figure>\n\n<p>动态sql:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;selectKey keyProperty&#x3D;&quot;userId&quot; keyColumn&#x3D;&quot;id&quot; resultType&#x3D;&quot;int&quot; order&#x3D;&quot;AFTER&quot;&gt;</span><br><span class=\"line\">    select last_insert_id();</span><br><span class=\"line\">&lt;&#x2F;selectKey&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p> sql获取当前插入表的id</p>","more":"<p>sql语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select last_insert_id();</span><br></pre></td></tr></table></figure>\n\n<p>动态sql:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;selectKey keyProperty&#x3D;&quot;userId&quot; keyColumn&#x3D;&quot;id&quot; resultType&#x3D;&quot;int&quot; order&#x3D;&quot;AFTER&quot;&gt;</span><br><span class=\"line\">    select last_insert_id();</span><br><span class=\"line\">&lt;&#x2F;selectKey&gt;</span><br></pre></td></tr></table></figure>"},{"title":"swaggerv1接口文档UI界面的方法点不开，只能点统一展开，关闭","date":"2019-12-05T02:02:42.000Z","_content":"\n swagger接口文档UI界面的方法点不开，只能点统一展开，关闭\n解决方法：将@Api(value=\"\")注解里面的中文换成英文，成功点开每个方法\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191205100059614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)","source":"_posts/swagger接口文档UI界面的方法点不开，只能点统一展开，关闭.md","raw":"---\ntitle: swaggerv1接口文档UI界面的方法点不开，只能点统一展开，关闭\ndate: 2019-12-05 10:02:42 \ncategories: swagger\ntags: swagger\n---\n\n swagger接口文档UI界面的方法点不开，只能点统一展开，关闭\n解决方法：将@Api(value=\"\")注解里面的中文换成英文，成功点开每个方法\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191205100059614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)","slug":"swagger接口文档UI界面的方法点不开，只能点统一展开，关闭","published":1,"updated":"2020-08-01T03:43:37.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbn2001ig0v88jtn1y1o","content":"<p> swagger接口文档UI界面的方法点不开，只能点统一展开，关闭<br>解决方法：将@Api(value=””)注解里面的中文换成英文，成功点开每个方法<br><img src=\"https://img-blog.csdnimg.cn/20191205100059614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p> swagger接口文档UI界面的方法点不开，只能点统一展开，关闭<br>解决方法：将@Api(value=””)注解里面的中文换成英文，成功点开每个方法<br><img src=\"https://img-blog.csdnimg.cn/20191205100059614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"《thinking in java》读书笔记","date":"2019-12-02T12:39:55.000Z","_content":"\n记录今天一些学习《JAVA编程思想》中读到的让我深思和值得记录的点\n\n<!--more-->\n\n 1，每个对象对可以很好的完成一项任务，但它并不试图做更多的事情\n 2，继承：is-a,接口：is-like-a\n 3，前期绑定：编译器对具体的函数调用\n      后期绑定：编译器不知道具体执行的代码。只确定被调用的方法存在，（y用一段特殊的代码代替具体方法的绝对地址调用）到执行时才确定。\n 4，参数化类型：<type>如：\n\n```\nArrayList<User> users=new ArrayList<User>;\n```\napplet:只在浏览器中运行的小程序。\nIntranet:企业内部网","source":"_posts/《thinking-in-java》读书笔记.md","raw":"---\ntitle: 《thinking in java》读书笔记\ndate: 2019-12-02 20:39:55 \ncategories: \n  - 读书笔记\n    - thinKing in java\ntags: 笔记\n---\n\n记录今天一些学习《JAVA编程思想》中读到的让我深思和值得记录的点\n\n<!--more-->\n\n 1，每个对象对可以很好的完成一项任务，但它并不试图做更多的事情\n 2，继承：is-a,接口：is-like-a\n 3，前期绑定：编译器对具体的函数调用\n      后期绑定：编译器不知道具体执行的代码。只确定被调用的方法存在，（y用一段特殊的代码代替具体方法的绝对地址调用）到执行时才确定。\n 4，参数化类型：<type>如：\n\n```\nArrayList<User> users=new ArrayList<User>;\n```\napplet:只在浏览器中运行的小程序。\nIntranet:企业内部网","slug":"《thinking-in-java》读书笔记","published":1,"updated":"2020-08-01T03:43:37.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbn3001mg0v86i3u9rbo","content":"<p>记录今天一些学习《JAVA编程思想》中读到的让我深思和值得记录的点</p>\n<a id=\"more\"></a>\n\n<p> 1，每个对象对可以很好的完成一项任务，但它并不试图做更多的事情<br> 2，继承：is-a,接口：is-like-a<br> 3，前期绑定：编译器对具体的函数调用<br>      后期绑定：编译器不知道具体执行的代码。只确定被调用的方法存在，（y用一段特殊的代码代替具体方法的绝对地址调用）到执行时才确定。<br> 4，参数化类型：<type>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;User&gt; users&#x3D;new ArrayList&lt;User&gt;;</span><br></pre></td></tr></table></figure>\n<p>applet:只在浏览器中运行的小程序。<br>Intranet:企业内部网</p>\n","site":{"data":{}},"excerpt":"<p>记录今天一些学习《JAVA编程思想》中读到的让我深思和值得记录的点</p>","more":"<p> 1，每个对象对可以很好的完成一项任务，但它并不试图做更多的事情<br> 2，继承：is-a,接口：is-like-a<br> 3，前期绑定：编译器对具体的函数调用<br>      后期绑定：编译器不知道具体执行的代码。只确定被调用的方法存在，（y用一段特殊的代码代替具体方法的绝对地址调用）到执行时才确定。<br> 4，参数化类型：<type>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;User&gt; users&#x3D;new ArrayList&lt;User&gt;;</span><br></pre></td></tr></table></figure>\n<p>applet:只在浏览器中运行的小程序。<br>Intranet:企业内部网</p>"},{"title":"windows下升级node.js, 在cmd 运行n stable报错bash不是内部或外部命令，也不是可运行的程序 或批处理文件","date":"2020-01-08T02:31:27.000Z","_content":"\nwindows下升级node.js, 在cmd 运行n stable报错bash不是内部或外部命令，也不是可运行的程序 或批处理文件。\n\n<!--more-->\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108102152449.png)\n在GitHub官网，搜索gnvm，下载\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108102414994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108102504659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n放在node.js的安装目录下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108102646281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n然后打开cmd命令行窗口，输入：gnvm update latest，等待更新。\n当然也可以直接覆盖.\n参考文章：\n[https://jingyan.baidu.com/album/9158e000fc556ea2541228e2.html?picindex=1](https://jingyan.baidu.com/album/9158e000fc556ea2541228e2.html?picindex=1).","source":"_posts/windows下升级node-js-在cmd-运行n-stable报错bash不是内部或外部命令，也不是可运行的程序-或批处理文件.md","raw":"---\ntitle: 'windows下升级node.js, 在cmd 运行n stable报错bash不是内部或外部命令，也不是可运行的程序 或批处理文件'\ndate: 2020-01-08 10:31:27 \ncategories: node\ntags: node\n---\n\nwindows下升级node.js, 在cmd 运行n stable报错bash不是内部或外部命令，也不是可运行的程序 或批处理文件。\n\n<!--more-->\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108102152449.png)\n在GitHub官网，搜索gnvm，下载\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108102414994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108102504659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n放在node.js的安装目录下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108102646281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n然后打开cmd命令行窗口，输入：gnvm update latest，等待更新。\n当然也可以直接覆盖.\n参考文章：\n[https://jingyan.baidu.com/album/9158e000fc556ea2541228e2.html?picindex=1](https://jingyan.baidu.com/album/9158e000fc556ea2541228e2.html?picindex=1).","slug":"windows下升级node-js-在cmd-运行n-stable报错bash不是内部或外部命令，也不是可运行的程序-或批处理文件","published":1,"updated":"2020-08-01T03:43:37.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbn6001og0v85an89mjv","content":"<p>windows下升级node.js, 在cmd 运行n stable报错bash不是内部或外部命令，也不是可运行的程序 或批处理文件。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200108102152449.png\" alt=\"在这里插入图片描述\"><br>在GitHub官网，搜索gnvm，下载<br><img src=\"https://img-blog.csdnimg.cn/20200108102414994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20200108102504659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>放在node.js的安装目录下</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200108102646281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>然后打开cmd命令行窗口，输入：gnvm update latest，等待更新。<br>当然也可以直接覆盖.<br>参考文章：<br><a href=\"https://jingyan.baidu.com/album/9158e000fc556ea2541228e2.html?picindex=1\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/album/9158e000fc556ea2541228e2.html?picindex=1</a>.</p>\n","site":{"data":{}},"excerpt":"<p>windows下升级node.js, 在cmd 运行n stable报错bash不是内部或外部命令，也不是可运行的程序 或批处理文件。</p>","more":"<p><img src=\"https://img-blog.csdnimg.cn/20200108102152449.png\" alt=\"在这里插入图片描述\"><br>在GitHub官网，搜索gnvm，下载<br><img src=\"https://img-blog.csdnimg.cn/20200108102414994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20200108102504659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>放在node.js的安装目录下</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200108102646281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>然后打开cmd命令行窗口，输入：gnvm update latest，等待更新。<br>当然也可以直接覆盖.<br>参考文章：<br><a href=\"https://jingyan.baidu.com/album/9158e000fc556ea2541228e2.html?picindex=1\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/album/9158e000fc556ea2541228e2.html?picindex=1</a>.</p>"},{"title":"《thinking in java》读书笔记2：对象","date":"2019-12-04T13:05:30.000Z","_content":"\nBigInteger:支持任意精度的整数\nBigDecimal:支持任何精度的定点数\njava的作用域由{ }决定，\n\n<!--more-->\n\n#### java基本成员变量默认值\nboolean:false, char：'\\u0000'(null), byte:0, short: 0, int：0，long: 0L, float: 0.0f, double:0.0d\n#### javadoc\njavadoc 命令只能出现在\"/**\"注释中出现，主要有两种方式。\n1，文档标签,\n（1）独立文档标签：以\"@\"开头\n （2）行内文档标签：同样以\"@\"开头，但是要括在\"{}\"内。\n2，嵌入html\n如: \n\n```\n/**\n*<ol>\n*<li>item one\n*</ol>\n*/\n```","source":"_posts/《thinking-in-java》读书笔记2：对象.md","raw":"---\ntitle: 《thinking in java》读书笔记2：对象\ndate: 2019-12-04 21:05:30\ncategories:\n  - 读书笔记\n    - thinKing in java\ntags: 笔记\n---\n\nBigInteger:支持任意精度的整数\nBigDecimal:支持任何精度的定点数\njava的作用域由{ }决定，\n\n<!--more-->\n\n#### java基本成员变量默认值\nboolean:false, char：'\\u0000'(null), byte:0, short: 0, int：0，long: 0L, float: 0.0f, double:0.0d\n#### javadoc\njavadoc 命令只能出现在\"/**\"注释中出现，主要有两种方式。\n1，文档标签,\n（1）独立文档标签：以\"@\"开头\n （2）行内文档标签：同样以\"@\"开头，但是要括在\"{}\"内。\n2，嵌入html\n如: \n\n```\n/**\n*<ol>\n*<li>item one\n*</ol>\n*/\n```","slug":"《thinking-in-java》读书笔记2：对象","published":1,"updated":"2020-08-01T03:43:37.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbn8001sg0v8dnee39jf","content":"<p>BigInteger:支持任意精度的整数<br>BigDecimal:支持任何精度的定点数<br>java的作用域由{ }决定，</p>\n<a id=\"more\"></a>\n\n<h4 id=\"java基本成员变量默认值\"><a href=\"#java基本成员变量默认值\" class=\"headerlink\" title=\"java基本成员变量默认值\"></a>java基本成员变量默认值</h4><p>boolean:false, char：’\\u0000’(null), byte:0, short: 0, int：0，long: 0L, float: 0.0f, double:0.0d</p>\n<h4 id=\"javadoc\"><a href=\"#javadoc\" class=\"headerlink\" title=\"javadoc\"></a>javadoc</h4><p>javadoc 命令只能出现在”/**”注释中出现，主要有两种方式。<br>1，文档标签,<br>（1）独立文档标签：以”@”开头<br> （2）行内文档标签：同样以”@”开头，但是要括在”{}”内。<br>2，嵌入html<br>如: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">*&lt;ol&gt;</span><br><span class=\"line\">*&lt;li&gt;item one</span><br><span class=\"line\">*&lt;&#x2F;ol&gt;</span><br><span class=\"line\">*&#x2F;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>BigInteger:支持任意精度的整数<br>BigDecimal:支持任何精度的定点数<br>java的作用域由{ }决定，</p>","more":"<h4 id=\"java基本成员变量默认值\"><a href=\"#java基本成员变量默认值\" class=\"headerlink\" title=\"java基本成员变量默认值\"></a>java基本成员变量默认值</h4><p>boolean:false, char：’\\u0000’(null), byte:0, short: 0, int：0，long: 0L, float: 0.0f, double:0.0d</p>\n<h4 id=\"javadoc\"><a href=\"#javadoc\" class=\"headerlink\" title=\"javadoc\"></a>javadoc</h4><p>javadoc 命令只能出现在”/**”注释中出现，主要有两种方式。<br>1，文档标签,<br>（1）独立文档标签：以”@”开头<br> （2）行内文档标签：同样以”@”开头，但是要括在”{}”内。<br>2，嵌入html<br>如: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">*&lt;ol&gt;</span><br><span class=\"line\">*&lt;li&gt;item one</span><br><span class=\"line\">*&lt;&#x2F;ol&gt;</span><br><span class=\"line\">*&#x2F;</span><br></pre></td></tr></table></figure>"},{"title":"使用dhcp始终无法连接mysql的问题解决","date":"2019-11-21T08:22:03.000Z","_content":"\n把mysql的时区加8\n\n<!--more-->\n\n把mysql的时区加8\n\n```\n     set global time_zone = '+8:00';\n```\n\n参考链接：\n[https://blog.csdn.net/zqb765720343/article/details/80076020:](https://blog.csdn.net/zqb765720343/article/details/80076020)","source":"_posts/使用dhcp始终无法连接mysql的问题解决.md","raw":"---\ntitle: 使用dhcp始终无法连接mysql的问题解决\ndate: 2019-11-21 16:22:03\ncategories: mysql\ntags: mysql\n---\n\n把mysql的时区加8\n\n<!--more-->\n\n把mysql的时区加8\n\n```\n     set global time_zone = '+8:00';\n```\n\n参考链接：\n[https://blog.csdn.net/zqb765720343/article/details/80076020:](https://blog.csdn.net/zqb765720343/article/details/80076020)","slug":"使用dhcp始终无法连接mysql的问题解决","published":1,"updated":"2020-08-01T03:43:37.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbn8001ug0v89nmg8m28","content":"<p>把mysql的时区加8</p>\n<a id=\"more\"></a>\n\n<p>把mysql的时区加8</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set global time_zone &#x3D; &#39;+8:00&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>参考链接：<br><a href=\"https://blog.csdn.net/zqb765720343/article/details/80076020\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zqb765720343/article/details/80076020:</a></p>\n","site":{"data":{}},"excerpt":"<p>把mysql的时区加8</p>","more":"<p>把mysql的时区加8</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set global time_zone &#x3D; &#39;+8:00&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>参考链接：<br><a href=\"https://blog.csdn.net/zqb765720343/article/details/80076020\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zqb765720343/article/details/80076020:</a></p>"},{"title":"分布式锁","date":"2020-07-14T01:07:59.000Z","_content":"\n#### 分布式锁\n\n<!--more-->\n\n单点故障：\n\n分布式锁：双主服务器问题。备用服务器ping不同主服务器，代替其成为主服务器。然而主服务器只是因为网络延迟没有及时反馈。并没有挂掉，从而出双主问题。（解决方案：分布式锁）\n\n如zookeeper（服务注册与发现中心）解决了分布式锁：\n\n所有服务到zookeeper注册.\n\n有zookeeper选举主节点。（如果主节点出现网络问题，删除主节点，选举备用节点为主节点。主节点恢复后重新注册，成为新的备用节点）\n\n##### 为什么要使用分布式锁：\n\n为了保证一个方法或属性在高并发时只能被一个线程执行。\n\n单机控制锁失效\n\n需要跨jvm的互斥机制控制共享资源的访问\n\n##### 实现：\n\n（同一个方法）myzookeeper目录下创建顺讯节点。如 1 2 3.\n\n获取MyZookeeper目录下所有的子节点,然后获取比自己小的兄弟节点，如果不存在，则说明当前线程顺序号最小，获得锁\n\n线程B获取所有节点,判断自己不是最小节点,设置监听比自己次小的节点\n\n线程A处理完,删除自己的节点，线程B监听到变更事件,判断自己是不是最小的节点，如果是则获得锁","source":"_posts/分布式锁.md","raw":"---\ntitle: 分布式锁\ndate: 2020-07-14 09:07:59\ncategories: \n  - 微服务\n    - 理论\ntags: 分布式锁\n---\n\n#### 分布式锁\n\n<!--more-->\n\n单点故障：\n\n分布式锁：双主服务器问题。备用服务器ping不同主服务器，代替其成为主服务器。然而主服务器只是因为网络延迟没有及时反馈。并没有挂掉，从而出双主问题。（解决方案：分布式锁）\n\n如zookeeper（服务注册与发现中心）解决了分布式锁：\n\n所有服务到zookeeper注册.\n\n有zookeeper选举主节点。（如果主节点出现网络问题，删除主节点，选举备用节点为主节点。主节点恢复后重新注册，成为新的备用节点）\n\n##### 为什么要使用分布式锁：\n\n为了保证一个方法或属性在高并发时只能被一个线程执行。\n\n单机控制锁失效\n\n需要跨jvm的互斥机制控制共享资源的访问\n\n##### 实现：\n\n（同一个方法）myzookeeper目录下创建顺讯节点。如 1 2 3.\n\n获取MyZookeeper目录下所有的子节点,然后获取比自己小的兄弟节点，如果不存在，则说明当前线程顺序号最小，获得锁\n\n线程B获取所有节点,判断自己不是最小节点,设置监听比自己次小的节点\n\n线程A处理完,删除自己的节点，线程B监听到变更事件,判断自己是不是最小的节点，如果是则获得锁","slug":"分布式锁","published":1,"updated":"2020-08-01T03:43:37.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbn9001yg0v871jzawwd","content":"<h4 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h4><a id=\"more\"></a>\n\n<p>单点故障：</p>\n<p>分布式锁：双主服务器问题。备用服务器ping不同主服务器，代替其成为主服务器。然而主服务器只是因为网络延迟没有及时反馈。并没有挂掉，从而出双主问题。（解决方案：分布式锁）</p>\n<p>如zookeeper（服务注册与发现中心）解决了分布式锁：</p>\n<p>所有服务到zookeeper注册.</p>\n<p>有zookeeper选举主节点。（如果主节点出现网络问题，删除主节点，选举备用节点为主节点。主节点恢复后重新注册，成为新的备用节点）</p>\n<h5 id=\"为什么要使用分布式锁：\"><a href=\"#为什么要使用分布式锁：\" class=\"headerlink\" title=\"为什么要使用分布式锁：\"></a>为什么要使用分布式锁：</h5><p>为了保证一个方法或属性在高并发时只能被一个线程执行。</p>\n<p>单机控制锁失效</p>\n<p>需要跨jvm的互斥机制控制共享资源的访问</p>\n<h5 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a>实现：</h5><p>（同一个方法）myzookeeper目录下创建顺讯节点。如 1 2 3.</p>\n<p>获取MyZookeeper目录下所有的子节点,然后获取比自己小的兄弟节点，如果不存在，则说明当前线程顺序号最小，获得锁</p>\n<p>线程B获取所有节点,判断自己不是最小节点,设置监听比自己次小的节点</p>\n<p>线程A处理完,删除自己的节点，线程B监听到变更事件,判断自己是不是最小的节点，如果是则获得锁</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h4>","more":"<p>单点故障：</p>\n<p>分布式锁：双主服务器问题。备用服务器ping不同主服务器，代替其成为主服务器。然而主服务器只是因为网络延迟没有及时反馈。并没有挂掉，从而出双主问题。（解决方案：分布式锁）</p>\n<p>如zookeeper（服务注册与发现中心）解决了分布式锁：</p>\n<p>所有服务到zookeeper注册.</p>\n<p>有zookeeper选举主节点。（如果主节点出现网络问题，删除主节点，选举备用节点为主节点。主节点恢复后重新注册，成为新的备用节点）</p>\n<h5 id=\"为什么要使用分布式锁：\"><a href=\"#为什么要使用分布式锁：\" class=\"headerlink\" title=\"为什么要使用分布式锁：\"></a>为什么要使用分布式锁：</h5><p>为了保证一个方法或属性在高并发时只能被一个线程执行。</p>\n<p>单机控制锁失效</p>\n<p>需要跨jvm的互斥机制控制共享资源的访问</p>\n<h5 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a>实现：</h5><p>（同一个方法）myzookeeper目录下创建顺讯节点。如 1 2 3.</p>\n<p>获取MyZookeeper目录下所有的子节点,然后获取比自己小的兄弟节点，如果不存在，则说明当前线程顺序号最小，获得锁</p>\n<p>线程B获取所有节点,判断自己不是最小节点,设置监听比自己次小的节点</p>\n<p>线程A处理完,删除自己的节点，线程B监听到变更事件,判断自己是不是最小的节点，如果是则获得锁</p>"},{"title":"使用eclipse导入myeclipse项目无法识别为web项目问题的解决","date":"2020-05-15T14:27:55.000Z","_content":"\n原因eclipse默认的web目录为webcontent,而myeclipse的为webRoot,导致无法识别\n\n<!--more-->\n\n解决办法：\n在eclipse中右击项目根路径，在弹出的对话框中，选择 Properties：![在这里插入图片描述](https://img-blog.csdnimg.cn/2020051522170285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n\n选择 Project Facets，点击右边的“Convert to faceted form...”链接：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200515222409927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n勾选 Java 和 Dynamic Web Module ：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200515222615606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n\n点击“ Further Configuration availabe ” 的链接 ，更改 Content Directory 名字为你的 webRoot 目录名字即可","source":"_posts/使用eclipse导入myeclipse项目无法识别为web项目问题的解决.md","raw":"---\ntitle: 使用eclipse导入myeclipse项目无法识别为web项目问题的解决\ndate: 2020-05-15 22:27:55 \ncategories: eclipse\ntags: eclipse\n---\n\n原因eclipse默认的web目录为webcontent,而myeclipse的为webRoot,导致无法识别\n\n<!--more-->\n\n解决办法：\n在eclipse中右击项目根路径，在弹出的对话框中，选择 Properties：![在这里插入图片描述](https://img-blog.csdnimg.cn/2020051522170285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n\n选择 Project Facets，点击右边的“Convert to faceted form...”链接：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200515222409927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n勾选 Java 和 Dynamic Web Module ：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200515222615606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n\n点击“ Further Configuration availabe ” 的链接 ，更改 Content Directory 名字为你的 webRoot 目录名字即可","slug":"使用eclipse导入myeclipse项目无法识别为web项目问题的解决","published":1,"updated":"2020-08-01T03:43:37.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbna0020g0v8aherf3of","content":"<p>原因eclipse默认的web目录为webcontent,而myeclipse的为webRoot,导致无法识别</p>\n<a id=\"more\"></a>\n\n<p>解决办法：<br>在eclipse中右击项目根路径，在弹出的对话框中，选择 Properties：<img src=\"https://img-blog.csdnimg.cn/2020051522170285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>选择 Project Facets，点击右边的“Convert to faceted form…”链接：<br><img src=\"https://img-blog.csdnimg.cn/20200515222409927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>勾选 Java 和 Dynamic Web Module ：<br><img src=\"https://img-blog.csdnimg.cn/20200515222615606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>点击“ Further Configuration availabe ” 的链接 ，更改 Content Directory 名字为你的 webRoot 目录名字即可</p>\n","site":{"data":{}},"excerpt":"<p>原因eclipse默认的web目录为webcontent,而myeclipse的为webRoot,导致无法识别</p>","more":"<p>解决办法：<br>在eclipse中右击项目根路径，在弹出的对话框中，选择 Properties：<img src=\"https://img-blog.csdnimg.cn/2020051522170285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>选择 Project Facets，点击右边的“Convert to faceted form…”链接：<br><img src=\"https://img-blog.csdnimg.cn/20200515222409927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>勾选 Java 和 Dynamic Web Module ：<br><img src=\"https://img-blog.csdnimg.cn/20200515222615606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>点击“ Further Configuration availabe ” 的链接 ，更改 Content Directory 名字为你的 webRoot 目录名字即可</p>"},{"title":"区分项目中的数据实体目录 entity，dto,vo","date":"2020-03-06T02:29:19.000Z","_content":"\n1、entity 里的每一个字段，与数据库相对应，\n2、vo 里的每一个字段，是和你前台 html 页面相对应，\n3、dto 这是用来转换从 entity 到 vo，或者从 vo 到 entity 的中间的东西 。（DTO中拥有的字段应该是entity中或者是vo中的一个子集）\n[参考文章：https://www.cnblogs.com/vegetableDD/p/11732495.html](https://www.cnblogs.com/vegetableDD/p/11732495.html)","source":"_posts/区分项目中的数据实体目录-entity，dto-vo.md","raw":"---\ntitle: '区分项目中的数据实体目录 entity，dto,vo'\ndate: 2020-03-06 10:29:19\ncategories: java规范\ntags: java规范\n---\n\n1、entity 里的每一个字段，与数据库相对应，\n2、vo 里的每一个字段，是和你前台 html 页面相对应，\n3、dto 这是用来转换从 entity 到 vo，或者从 vo 到 entity 的中间的东西 。（DTO中拥有的字段应该是entity中或者是vo中的一个子集）\n[参考文章：https://www.cnblogs.com/vegetableDD/p/11732495.html](https://www.cnblogs.com/vegetableDD/p/11732495.html)","slug":"区分项目中的数据实体目录-entity，dto-vo","published":1,"updated":"2020-08-01T03:43:37.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbnb0023g0v81j8uezll","content":"<p>1、entity 里的每一个字段，与数据库相对应，<br>2、vo 里的每一个字段，是和你前台 html 页面相对应，<br>3、dto 这是用来转换从 entity 到 vo，或者从 vo 到 entity 的中间的东西 。（DTO中拥有的字段应该是entity中或者是vo中的一个子集）<br><a href=\"https://www.cnblogs.com/vegetableDD/p/11732495.html\" target=\"_blank\" rel=\"noopener\">参考文章：https://www.cnblogs.com/vegetableDD/p/11732495.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、entity 里的每一个字段，与数据库相对应，<br>2、vo 里的每一个字段，是和你前台 html 页面相对应，<br>3、dto 这是用来转换从 entity 到 vo，或者从 vo 到 entity 的中间的东西 。（DTO中拥有的字段应该是entity中或者是vo中的一个子集）<br><a href=\"https://www.cnblogs.com/vegetableDD/p/11732495.html\" target=\"_blank\" rel=\"noopener\">参考文章：https://www.cnblogs.com/vegetableDD/p/11732495.html</a></p>\n"},{"title":"区块链和Hyperledger Fabric入门","date":"2020-07-09T02:27:43.000Z","_content":"\n#### 什么是区块链\n\n##### 一个分布式账本\n\n区块链网络的核心是一个分布式账本，记录网络上发生的所有交易。\n\n<!--more-->\n\n区块链账本通常被描述为 **去中心化的** ，因为它会被复制到许多网络参与者中，每个参与者都在 **协作** 维护账本。我们将看到去中心化和协作是强大的属性，反映了企业在现实世界中交换商品和服务的方式。\n\n**去中心化**：在一个分布有众多节点的系统中，每个节点都具有高度自治的特征。节点之间彼此可以自由连接，形成新的连接单元。任何一个节点都可能成为阶段性的中心，但不具备强制性的中心控制功能。节点与节点之间的影响，会通过网络而形成非线性因果关系。这种开放式、扁平化、平等性的系统现象或结构，我们称之为去中心化。\n\n\n\n##### 智能合约\n\n为了支持以同样的方式更新信息，并启控制账本所有的功能（交易，查询等），区块链使用 **智能合约** 来提供对账本的受控访问。\n\n智能合约：是一种旨在以信息化方式传播、验证或执行[合同](https://baike.baidu.com/item/合同/20705)的计算机协议。智能合约允许在没有第三方的情况下进行可信交易，这些交易可追踪且不可逆转。\n\n\n\n#### Hyperledger Fabric 模型","source":"_posts/区块链和Hyperledger-Fabric入门.md","raw":"---\ntitle: 区块链和Hyperledger Fabric入门\ndate: 2020-07-09 10:27:43\ncategories: \n  - 区块链\n    - Hyperledger Fabric\ntags: Hyperledger Fabric\n---\n\n#### 什么是区块链\n\n##### 一个分布式账本\n\n区块链网络的核心是一个分布式账本，记录网络上发生的所有交易。\n\n<!--more-->\n\n区块链账本通常被描述为 **去中心化的** ，因为它会被复制到许多网络参与者中，每个参与者都在 **协作** 维护账本。我们将看到去中心化和协作是强大的属性，反映了企业在现实世界中交换商品和服务的方式。\n\n**去中心化**：在一个分布有众多节点的系统中，每个节点都具有高度自治的特征。节点之间彼此可以自由连接，形成新的连接单元。任何一个节点都可能成为阶段性的中心，但不具备强制性的中心控制功能。节点与节点之间的影响，会通过网络而形成非线性因果关系。这种开放式、扁平化、平等性的系统现象或结构，我们称之为去中心化。\n\n\n\n##### 智能合约\n\n为了支持以同样的方式更新信息，并启控制账本所有的功能（交易，查询等），区块链使用 **智能合约** 来提供对账本的受控访问。\n\n智能合约：是一种旨在以信息化方式传播、验证或执行[合同](https://baike.baidu.com/item/合同/20705)的计算机协议。智能合约允许在没有第三方的情况下进行可信交易，这些交易可追踪且不可逆转。\n\n\n\n#### Hyperledger Fabric 模型","slug":"区块链和Hyperledger-Fabric入门","published":1,"updated":"2020-08-01T03:43:37.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbnc0026g0v81uopg7io","content":"<h4 id=\"什么是区块链\"><a href=\"#什么是区块链\" class=\"headerlink\" title=\"什么是区块链\"></a>什么是区块链</h4><h5 id=\"一个分布式账本\"><a href=\"#一个分布式账本\" class=\"headerlink\" title=\"一个分布式账本\"></a>一个分布式账本</h5><p>区块链网络的核心是一个分布式账本，记录网络上发生的所有交易。</p>\n<a id=\"more\"></a>\n\n<p>区块链账本通常被描述为 <strong>去中心化的</strong> ，因为它会被复制到许多网络参与者中，每个参与者都在 <strong>协作</strong> 维护账本。我们将看到去中心化和协作是强大的属性，反映了企业在现实世界中交换商品和服务的方式。</p>\n<p><strong>去中心化</strong>：在一个分布有众多节点的系统中，每个节点都具有高度自治的特征。节点之间彼此可以自由连接，形成新的连接单元。任何一个节点都可能成为阶段性的中心，但不具备强制性的中心控制功能。节点与节点之间的影响，会通过网络而形成非线性因果关系。这种开放式、扁平化、平等性的系统现象或结构，我们称之为去中心化。</p>\n<h5 id=\"智能合约\"><a href=\"#智能合约\" class=\"headerlink\" title=\"智能合约\"></a>智能合约</h5><p>为了支持以同样的方式更新信息，并启控制账本所有的功能（交易，查询等），区块链使用 <strong>智能合约</strong> 来提供对账本的受控访问。</p>\n<p>智能合约：是一种旨在以信息化方式传播、验证或执行<a href=\"https://baike.baidu.com/item/合同/20705\" target=\"_blank\" rel=\"noopener\">合同</a>的计算机协议。智能合约允许在没有第三方的情况下进行可信交易，这些交易可追踪且不可逆转。</p>\n<h4 id=\"Hyperledger-Fabric-模型\"><a href=\"#Hyperledger-Fabric-模型\" class=\"headerlink\" title=\"Hyperledger Fabric 模型\"></a>Hyperledger Fabric 模型</h4>","site":{"data":{}},"excerpt":"<h4 id=\"什么是区块链\"><a href=\"#什么是区块链\" class=\"headerlink\" title=\"什么是区块链\"></a>什么是区块链</h4><h5 id=\"一个分布式账本\"><a href=\"#一个分布式账本\" class=\"headerlink\" title=\"一个分布式账本\"></a>一个分布式账本</h5><p>区块链网络的核心是一个分布式账本，记录网络上发生的所有交易。</p>","more":"<p>区块链账本通常被描述为 <strong>去中心化的</strong> ，因为它会被复制到许多网络参与者中，每个参与者都在 <strong>协作</strong> 维护账本。我们将看到去中心化和协作是强大的属性，反映了企业在现实世界中交换商品和服务的方式。</p>\n<p><strong>去中心化</strong>：在一个分布有众多节点的系统中，每个节点都具有高度自治的特征。节点之间彼此可以自由连接，形成新的连接单元。任何一个节点都可能成为阶段性的中心，但不具备强制性的中心控制功能。节点与节点之间的影响，会通过网络而形成非线性因果关系。这种开放式、扁平化、平等性的系统现象或结构，我们称之为去中心化。</p>\n<h5 id=\"智能合约\"><a href=\"#智能合约\" class=\"headerlink\" title=\"智能合约\"></a>智能合约</h5><p>为了支持以同样的方式更新信息，并启控制账本所有的功能（交易，查询等），区块链使用 <strong>智能合约</strong> 来提供对账本的受控访问。</p>\n<p>智能合约：是一种旨在以信息化方式传播、验证或执行<a href=\"https://baike.baidu.com/item/合同/20705\" target=\"_blank\" rel=\"noopener\">合同</a>的计算机协议。智能合约允许在没有第三方的情况下进行可信交易，这些交易可追踪且不可逆转。</p>\n<h4 id=\"Hyperledger-Fabric-模型\"><a href=\"#Hyperledger-Fabric-模型\" class=\"headerlink\" title=\"Hyperledger Fabric 模型\"></a>Hyperledger Fabric 模型</h4>"},{"title":"定时任务框架quartz","date":"2020-09-04T06:02:22.000Z","_content":"\n###  定时任务框架quartz\n\n#### 什么是 quartz ？\n\nQuartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目，完全由Java开发，可以用来执行定时任务，类似于java.util.Timer。但是相较于Timer， Quartz增加了很多功能：\n\n- 持久性作业 - 就是保持调度定时的状态;\n- 作业管理 - 对调度作业进行有效的管理;\n\n#### Quartz的三个组成部分\n\n- 调度器：Scheduler\n- 任务：JobDetail\n- 触发器：Trigger，包括SimpleTrigger和CronTrigger\n\n","source":"_posts/定时任务框架quartz.md","raw":"---\ntitle: 定时任务框架quartz\ndate: 2020-09-04 14:02:22\ncategories: 中间件\ntags: quartz\n\n---\n\n###  定时任务框架quartz\n\n#### 什么是 quartz ？\n\nQuartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目，完全由Java开发，可以用来执行定时任务，类似于java.util.Timer。但是相较于Timer， Quartz增加了很多功能：\n\n- 持久性作业 - 就是保持调度定时的状态;\n- 作业管理 - 对调度作业进行有效的管理;\n\n#### Quartz的三个组成部分\n\n- 调度器：Scheduler\n- 任务：JobDetail\n- 触发器：Trigger，包括SimpleTrigger和CronTrigger\n\n","slug":"定时任务框架quartz","published":1,"updated":"2020-09-11T16:29:16.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbnd0029g0v8fmro38nz","content":"<h3 id=\"定时任务框架quartz\"><a href=\"#定时任务框架quartz\" class=\"headerlink\" title=\"定时任务框架quartz\"></a>定时任务框架quartz</h3><h4 id=\"什么是-quartz-？\"><a href=\"#什么是-quartz-？\" class=\"headerlink\" title=\"什么是 quartz ？\"></a>什么是 quartz ？</h4><p>Quartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目，完全由Java开发，可以用来执行定时任务，类似于java.util.Timer。但是相较于Timer， Quartz增加了很多功能：</p>\n<ul>\n<li>持久性作业 - 就是保持调度定时的状态;</li>\n<li>作业管理 - 对调度作业进行有效的管理;</li>\n</ul>\n<h4 id=\"Quartz的三个组成部分\"><a href=\"#Quartz的三个组成部分\" class=\"headerlink\" title=\"Quartz的三个组成部分\"></a>Quartz的三个组成部分</h4><ul>\n<li>调度器：Scheduler</li>\n<li>任务：JobDetail</li>\n<li>触发器：Trigger，包括SimpleTrigger和CronTrigger</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定时任务框架quartz\"><a href=\"#定时任务框架quartz\" class=\"headerlink\" title=\"定时任务框架quartz\"></a>定时任务框架quartz</h3><h4 id=\"什么是-quartz-？\"><a href=\"#什么是-quartz-？\" class=\"headerlink\" title=\"什么是 quartz ？\"></a>什么是 quartz ？</h4><p>Quartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目，完全由Java开发，可以用来执行定时任务，类似于java.util.Timer。但是相较于Timer， Quartz增加了很多功能：</p>\n<ul>\n<li>持久性作业 - 就是保持调度定时的状态;</li>\n<li>作业管理 - 对调度作业进行有效的管理;</li>\n</ul>\n<h4 id=\"Quartz的三个组成部分\"><a href=\"#Quartz的三个组成部分\" class=\"headerlink\" title=\"Quartz的三个组成部分\"></a>Quartz的三个组成部分</h4><ul>\n<li>调度器：Scheduler</li>\n<li>任务：JobDetail</li>\n<li>触发器：Trigger，包括SimpleTrigger和CronTrigger</li>\n</ul>\n"},{"title":"在学Spring Aop 发现的注意点","date":"2019-11-18T13:16:33.000Z","_content":"\n## 基于xml\n有两种方式可以实现：1环绕通知; 2前置通知，后置通知，最终通知，异常通知\n\n<!--more-->\n\n### 1环绕通知\n配置环绕通知\n### 2前置通知，后置通知，最终通知，异常通知\n\n\n\n<!--配置aop-->\n    <aop:config>\n        <!--切入点表达式-->\n        <aop:pointcut id=\"pr\" expression=\"execution(作用范围)\"></aop:pointcut>\n        <aop:aspect id=\"txAdvice\" ref=\"txManager\">\n            <!--前置通知-->\n            <aop:before method=\"beginTransaction\" pointcut-ref=\"pr\"></aop:before>\n            <!--后置通知-->\n            <aop:after-returning method=\"commit\" pointcut-ref=\"pr\"></aop:after-returning>\n            <!--异常通知-->\n            <aop:after-throwing method=\"rollback\" pointcut-ref=\"pr\"></aop:after-throwing>\n            <!--最终通知-->\n            <aop:after method=\"release\" pointcut-ref=\"pr\"></aop:after>\n        </aop:aspect>\n\n    </aop:config>\n### 基于注解\n只能使用环绕通知\n如果使用前置通知，后置通知，最终通知，异常通知会因为执行顺序问题导致错误\n```\n @Around(\"pt1()\")\n    public Object aroundAdvice(ProceedingJoinPoint pjp){\n        Object rtValue = null;\n        try {\n            //1.获取参数\n            Object[] params = pjp.getParams();\n            //2.开启事务\n            this.beginTransaction();\n            //3.执行方法\n            rtValue = pjp.proceed(params);\n            //4.提交事务\n            this.commit();\n            //返回结果\n            return  rtValue;\n        }catch (Throwable e){\n            //5.回滚事务\n            this.rollback();\n            throw new RuntimeException(e);\n        }finally {\n            //6.释放资源\n            this.release();\n        }\n    }\n```","source":"_posts/在学Spring-Aop-发现的注意点.md","raw":"---\ntitle: 在学Spring Aop 发现的注意点\ndate: 2019-11-18 21:16:33 \ncategories: Spring\ntags: Spring\n---\n\n## 基于xml\n有两种方式可以实现：1环绕通知; 2前置通知，后置通知，最终通知，异常通知\n\n<!--more-->\n\n### 1环绕通知\n配置环绕通知\n### 2前置通知，后置通知，最终通知，异常通知\n\n\n\n<!--配置aop-->\n    <aop:config>\n        <!--切入点表达式-->\n        <aop:pointcut id=\"pr\" expression=\"execution(作用范围)\"></aop:pointcut>\n        <aop:aspect id=\"txAdvice\" ref=\"txManager\">\n            <!--前置通知-->\n            <aop:before method=\"beginTransaction\" pointcut-ref=\"pr\"></aop:before>\n            <!--后置通知-->\n            <aop:after-returning method=\"commit\" pointcut-ref=\"pr\"></aop:after-returning>\n            <!--异常通知-->\n            <aop:after-throwing method=\"rollback\" pointcut-ref=\"pr\"></aop:after-throwing>\n            <!--最终通知-->\n            <aop:after method=\"release\" pointcut-ref=\"pr\"></aop:after>\n        </aop:aspect>\n\n    </aop:config>\n### 基于注解\n只能使用环绕通知\n如果使用前置通知，后置通知，最终通知，异常通知会因为执行顺序问题导致错误\n```\n @Around(\"pt1()\")\n    public Object aroundAdvice(ProceedingJoinPoint pjp){\n        Object rtValue = null;\n        try {\n            //1.获取参数\n            Object[] params = pjp.getParams();\n            //2.开启事务\n            this.beginTransaction();\n            //3.执行方法\n            rtValue = pjp.proceed(params);\n            //4.提交事务\n            this.commit();\n            //返回结果\n            return  rtValue;\n        }catch (Throwable e){\n            //5.回滚事务\n            this.rollback();\n            throw new RuntimeException(e);\n        }finally {\n            //6.释放资源\n            this.release();\n        }\n    }\n```","slug":"在学Spring-Aop-发现的注意点","published":1,"updated":"2020-08-01T03:43:37.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbnf002bg0v8822m3pbm","content":"<h2 id=\"基于xml\"><a href=\"#基于xml\" class=\"headerlink\" title=\"基于xml\"></a>基于xml</h2><p>有两种方式可以实现：1环绕通知; 2前置通知，后置通知，最终通知，异常通知</p>\n<a id=\"more\"></a>\n\n<h3 id=\"1环绕通知\"><a href=\"#1环绕通知\" class=\"headerlink\" title=\"1环绕通知\"></a>1环绕通知</h3><p>配置环绕通知</p>\n<h3 id=\"2前置通知，后置通知，最终通知，异常通知\"><a href=\"#2前置通知，后置通知，最终通知，异常通知\" class=\"headerlink\" title=\"2前置通知，后置通知，最终通知，异常通知\"></a>2前置通知，后置通知，最终通知，异常通知</h3><!--配置aop-->\n<pre><code>&lt;aop:config&gt;\n    &lt;!--切入点表达式--&gt;\n    &lt;aop:pointcut id=&quot;pr&quot; expression=&quot;execution(作用范围)&quot;&gt;&lt;/aop:pointcut&gt;\n    &lt;aop:aspect id=&quot;txAdvice&quot; ref=&quot;txManager&quot;&gt;\n        &lt;!--前置通知--&gt;\n        &lt;aop:before method=&quot;beginTransaction&quot; pointcut-ref=&quot;pr&quot;&gt;&lt;/aop:before&gt;\n        &lt;!--后置通知--&gt;\n        &lt;aop:after-returning method=&quot;commit&quot; pointcut-ref=&quot;pr&quot;&gt;&lt;/aop:after-returning&gt;\n        &lt;!--异常通知--&gt;\n        &lt;aop:after-throwing method=&quot;rollback&quot; pointcut-ref=&quot;pr&quot;&gt;&lt;/aop:after-throwing&gt;\n        &lt;!--最终通知--&gt;\n        &lt;aop:after method=&quot;release&quot; pointcut-ref=&quot;pr&quot;&gt;&lt;/aop:after&gt;\n    &lt;/aop:aspect&gt;\n\n&lt;/aop:config&gt;</code></pre><h3 id=\"基于注解\"><a href=\"#基于注解\" class=\"headerlink\" title=\"基于注解\"></a>基于注解</h3><p>只能使用环绕通知<br>如果使用前置通知，后置通知，最终通知，异常通知会因为执行顺序问题导致错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Around(&quot;pt1()&quot;)</span><br><span class=\"line\">   public Object aroundAdvice(ProceedingJoinPoint pjp)&#123;</span><br><span class=\"line\">       Object rtValue &#x3D; null;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           &#x2F;&#x2F;1.获取参数</span><br><span class=\"line\">           Object[] params &#x3D; pjp.getParams();</span><br><span class=\"line\">           &#x2F;&#x2F;2.开启事务</span><br><span class=\"line\">           this.beginTransaction();</span><br><span class=\"line\">           &#x2F;&#x2F;3.执行方法</span><br><span class=\"line\">           rtValue &#x3D; pjp.proceed(params);</span><br><span class=\"line\">           &#x2F;&#x2F;4.提交事务</span><br><span class=\"line\">           this.commit();</span><br><span class=\"line\">           &#x2F;&#x2F;返回结果</span><br><span class=\"line\">           return  rtValue;</span><br><span class=\"line\">       &#125;catch (Throwable e)&#123;</span><br><span class=\"line\">           &#x2F;&#x2F;5.回滚事务</span><br><span class=\"line\">           this.rollback();</span><br><span class=\"line\">           throw new RuntimeException(e);</span><br><span class=\"line\">       &#125;finally &#123;</span><br><span class=\"line\">           &#x2F;&#x2F;6.释放资源</span><br><span class=\"line\">           this.release();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"基于xml\"><a href=\"#基于xml\" class=\"headerlink\" title=\"基于xml\"></a>基于xml</h2><p>有两种方式可以实现：1环绕通知; 2前置通知，后置通知，最终通知，异常通知</p>","more":"<h3 id=\"1环绕通知\"><a href=\"#1环绕通知\" class=\"headerlink\" title=\"1环绕通知\"></a>1环绕通知</h3><p>配置环绕通知</p>\n<h3 id=\"2前置通知，后置通知，最终通知，异常通知\"><a href=\"#2前置通知，后置通知，最终通知，异常通知\" class=\"headerlink\" title=\"2前置通知，后置通知，最终通知，异常通知\"></a>2前置通知，后置通知，最终通知，异常通知</h3><!--配置aop-->\n<pre><code>&lt;aop:config&gt;\n    &lt;!--切入点表达式--&gt;\n    &lt;aop:pointcut id=&quot;pr&quot; expression=&quot;execution(作用范围)&quot;&gt;&lt;/aop:pointcut&gt;\n    &lt;aop:aspect id=&quot;txAdvice&quot; ref=&quot;txManager&quot;&gt;\n        &lt;!--前置通知--&gt;\n        &lt;aop:before method=&quot;beginTransaction&quot; pointcut-ref=&quot;pr&quot;&gt;&lt;/aop:before&gt;\n        &lt;!--后置通知--&gt;\n        &lt;aop:after-returning method=&quot;commit&quot; pointcut-ref=&quot;pr&quot;&gt;&lt;/aop:after-returning&gt;\n        &lt;!--异常通知--&gt;\n        &lt;aop:after-throwing method=&quot;rollback&quot; pointcut-ref=&quot;pr&quot;&gt;&lt;/aop:after-throwing&gt;\n        &lt;!--最终通知--&gt;\n        &lt;aop:after method=&quot;release&quot; pointcut-ref=&quot;pr&quot;&gt;&lt;/aop:after&gt;\n    &lt;/aop:aspect&gt;\n\n&lt;/aop:config&gt;</code></pre><h3 id=\"基于注解\"><a href=\"#基于注解\" class=\"headerlink\" title=\"基于注解\"></a>基于注解</h3><p>只能使用环绕通知<br>如果使用前置通知，后置通知，最终通知，异常通知会因为执行顺序问题导致错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Around(&quot;pt1()&quot;)</span><br><span class=\"line\">   public Object aroundAdvice(ProceedingJoinPoint pjp)&#123;</span><br><span class=\"line\">       Object rtValue &#x3D; null;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           &#x2F;&#x2F;1.获取参数</span><br><span class=\"line\">           Object[] params &#x3D; pjp.getParams();</span><br><span class=\"line\">           &#x2F;&#x2F;2.开启事务</span><br><span class=\"line\">           this.beginTransaction();</span><br><span class=\"line\">           &#x2F;&#x2F;3.执行方法</span><br><span class=\"line\">           rtValue &#x3D; pjp.proceed(params);</span><br><span class=\"line\">           &#x2F;&#x2F;4.提交事务</span><br><span class=\"line\">           this.commit();</span><br><span class=\"line\">           &#x2F;&#x2F;返回结果</span><br><span class=\"line\">           return  rtValue;</span><br><span class=\"line\">       &#125;catch (Throwable e)&#123;</span><br><span class=\"line\">           &#x2F;&#x2F;5.回滚事务</span><br><span class=\"line\">           this.rollback();</span><br><span class=\"line\">           throw new RuntimeException(e);</span><br><span class=\"line\">       &#125;finally &#123;</span><br><span class=\"line\">           &#x2F;&#x2F;6.释放资源</span><br><span class=\"line\">           this.release();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>"},{"title":"戴尔惠普华硕笔记本Fn键反了，按F1、F2等键出来Fn+F1、F2的效果","date":"2020-03-02T13:21:04.000Z","_content":"\n惠普笔记本，几天按f12调试的时候，笔记本直接睡眠了，试验了一番发现Fn键反了按F12等键出来Fn+F2的效果，按F1到F12等键出来Fn+F1到F12的效果。在网上寻找一番答案发现是是fn键被锁住了。\n找到键盘上的一个Fnlock（缩写FnLk）或Numlock键，然后按Fn+Fnlock/Numlock解锁\n[参考文章:\nhttps://jingyan.baidu.com/article/ff41162594df7f12e48237ee.html](https://jingyan.baidu.com/article/ff41162594df7f12e48237ee.html).","source":"_posts/戴尔惠普华硕笔记本Fn键反了，按F1、F2等键出来Fn-F1、F2的效果.md","raw":"---\ntitle: 戴尔惠普华硕笔记本Fn键反了，按F1、F2等键出来Fn+F1、F2的效果\ndate: 2020-03-02 21:21:04 \ncategories: \n\t- 电脑问题\n\t\t- 键盘\ntags: 键盘\n---\n\n惠普笔记本，几天按f12调试的时候，笔记本直接睡眠了，试验了一番发现Fn键反了按F12等键出来Fn+F2的效果，按F1到F12等键出来Fn+F1到F12的效果。在网上寻找一番答案发现是是fn键被锁住了。\n找到键盘上的一个Fnlock（缩写FnLk）或Numlock键，然后按Fn+Fnlock/Numlock解锁\n[参考文章:\nhttps://jingyan.baidu.com/article/ff41162594df7f12e48237ee.html](https://jingyan.baidu.com/article/ff41162594df7f12e48237ee.html).","slug":"戴尔惠普华硕笔记本Fn键反了，按F1、F2等键出来Fn-F1、F2的效果","published":1,"updated":"2020-08-01T03:43:37.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbng002fg0v8grrf90fs","content":"<p>惠普笔记本，几天按f12调试的时候，笔记本直接睡眠了，试验了一番发现Fn键反了按F12等键出来Fn+F2的效果，按F1到F12等键出来Fn+F1到F12的效果。在网上寻找一番答案发现是是fn键被锁住了。<br>找到键盘上的一个Fnlock（缩写FnLk）或Numlock键，然后按Fn+Fnlock/Numlock解锁<br><a href=\"https://jingyan.baidu.com/article/ff41162594df7f12e48237ee.html\" target=\"_blank\" rel=\"noopener\">参考文章:<br>https://jingyan.baidu.com/article/ff41162594df7f12e48237ee.html</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>惠普笔记本，几天按f12调试的时候，笔记本直接睡眠了，试验了一番发现Fn键反了按F12等键出来Fn+F2的效果，按F1到F12等键出来Fn+F1到F12的效果。在网上寻找一番答案发现是是fn键被锁住了。<br>找到键盘上的一个Fnlock（缩写FnLk）或Numlock键，然后按Fn+Fnlock/Numlock解锁<br><a href=\"https://jingyan.baidu.com/article/ff41162594df7f12e48237ee.html\" target=\"_blank\" rel=\"noopener\">参考文章:<br>https://jingyan.baidu.com/article/ff41162594df7f12e48237ee.html</a>.</p>\n"},{"title":"工作流activiti","date":"2020-09-24T09:31:42.000Z","_content":"\n### 工作流activit\n\n工作流(Workflow)，就是通过计算机对业务流程自动化执行管理。Activiti 是一个工作流引擎， activiti 可以将业务系统中复杂的业务流程抽取出来，使用专门的 建模语言（BPMN2.0）进行定义，业务系统按照预先定义的流程进行执行，实现了业务系统的业务 流程由 activiti进行管理，减少业务系统由于流程变更进行系统升级改造的工作量，从而提高系统的 健壮性，同时也减少了系统开发维护成本。 \n\n<!--more-->\n\n##### 1，ProcessEngine \n\n一般创建方式:\n\n```java\n// 创建processEngineConfiguration \nProcessEngineConfiguration configuration = ProcessEngineConfiguration;  .createProcessEngineConfigurationFromResource(\"activiti.cfg.xml\") \n//通过ProcessEngineConfiguration创建ProcessEngine   \n    ProcessEngine processEngine =  processEngineConfiguration.buildProcessEngine();\n```\n\n 简单创建方式 :\n\n```java\n//使用classpath下的activiti.cfg.xml中的配置创建processEngine   \nProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();   \nSystem.out.println(processEngine); \n```\n\n##### 2, Service\n\n工作流中的Service 的创建\n\n```java\n//在上文中创建了processEngine\nRuntimeService runtimeService = processEngine.getRuntimeService();\nRepositoryService repositoryService = processEngine.getRepositoryService();\nTaskService taskService = processEngine.getTaskService();\n\n```\n\n常用Service以及功能：\n\n2.1RepositoryService \n\nRepositoryService 是 activiti 的资源管理类，提供了管理和控制流程发布包和流程定义的操作。使用工作流建模工 具设计的业务流程图需要使用此 service 将流程定义文件的内容部署到计算机。 除了部署流程定义以外还可以： 查询引擎中的发布包和流程定义。 暂停或激活发布包，对应全部和特定流程定义。 暂停意味着它们不能再执行任何操作了，激活 是对应的反向操作。 获得多种资源，像是包含在发布包里的文件， 或引擎自动生成的流程图。 获得流程定义的 pojo 版本， 可以用来通过 java 解析流程，而不必通过 xml。\n\n 2.2 RuntimeService \n\nRuntimeService 是 activiti 的流程运行管理类。可以从这个服务类中获取很多关于流程执行相关的信息 \n\n2.3 TaskService \n\nTaskService 是 activiti 的任务管理类。可以从这个类中获取任务的信息。\n\n 2.4 HistoryService \n\nHistoryService 是 activiti 的历史管理类，可以查询历史信息，执行流程时，引擎会保存很多数据（根据配置），比 如流程实例启动时间，任务的参与者， 完成任务的时间，每个流程实例的执行路径，等等。 这个 服务主要通过查询功能来获得这些数据。\n\n 2.5 ManagementService \n\nManagementService 是 activiti 的引擎管理类，提供了对 Activiti 流程引擎的管理和维护功能，这些功能不在工作流驱动 的应用程序中使用，主要用于 Activiti 系统的日常维护。\n\n\n\n##### 3. 工作流数据库\n\n1. 资源库流程规则表\n   1. act_re_deployment 部署信息表\n   2. act_re_model 流程设计模型部署表\n   3. act_re_procdef 流程定义数据表\n2. 运行时数据库表\n   1. act_ru_execution 运行时流程执行实例表\n   2. act_ru_identitylink 运行时流程人员表，主要存储任务节点与参与者的相关信息\n   3. act_ru_task 运行时任务节点表\n   4. act_ru_variable 运行时流程变量数据表\n3. 历史数据库表\n   1. act_hi_actinst 历史节点表\n   2. act_hi_attachment 历史附件表\n   3. act_hi_comment 历史意见表\n   4. act_hi_identitylink 历史流程人员表\n   5. act_hi_detail 历史详情表，提供历史变量的查询\n   6. act_hi_procinst 历史流程实例表\n   7. act_hi_taskinst 历史任务实例表\n   8. act_hi_varinst 历史变量表\n4. 组织机构表\n   1. act_id_group 用户组信息表\n   2. act_id_info 用户扩展信息表\n   3. act_id_membership 用户与用户组对应信息表\n   4. act_id_user 用户信息表\n\n1. 通用数据表\n   1. act_ge_bytearray 二进制数据表\n   2. act_ge_property 属性数据表存储整个流程引擎级别的数据,初始化表结构时，会默认插入三条记录，\n\n\n\n","source":"_posts/工作流activiti.md","raw":"---\ntitle: 工作流activiti\ndate: 2020-09-24 17:31:42\ncategories: 工作流\ntags: activiti\n---\n\n### 工作流activit\n\n工作流(Workflow)，就是通过计算机对业务流程自动化执行管理。Activiti 是一个工作流引擎， activiti 可以将业务系统中复杂的业务流程抽取出来，使用专门的 建模语言（BPMN2.0）进行定义，业务系统按照预先定义的流程进行执行，实现了业务系统的业务 流程由 activiti进行管理，减少业务系统由于流程变更进行系统升级改造的工作量，从而提高系统的 健壮性，同时也减少了系统开发维护成本。 \n\n<!--more-->\n\n##### 1，ProcessEngine \n\n一般创建方式:\n\n```java\n// 创建processEngineConfiguration \nProcessEngineConfiguration configuration = ProcessEngineConfiguration;  .createProcessEngineConfigurationFromResource(\"activiti.cfg.xml\") \n//通过ProcessEngineConfiguration创建ProcessEngine   \n    ProcessEngine processEngine =  processEngineConfiguration.buildProcessEngine();\n```\n\n 简单创建方式 :\n\n```java\n//使用classpath下的activiti.cfg.xml中的配置创建processEngine   \nProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();   \nSystem.out.println(processEngine); \n```\n\n##### 2, Service\n\n工作流中的Service 的创建\n\n```java\n//在上文中创建了processEngine\nRuntimeService runtimeService = processEngine.getRuntimeService();\nRepositoryService repositoryService = processEngine.getRepositoryService();\nTaskService taskService = processEngine.getTaskService();\n\n```\n\n常用Service以及功能：\n\n2.1RepositoryService \n\nRepositoryService 是 activiti 的资源管理类，提供了管理和控制流程发布包和流程定义的操作。使用工作流建模工 具设计的业务流程图需要使用此 service 将流程定义文件的内容部署到计算机。 除了部署流程定义以外还可以： 查询引擎中的发布包和流程定义。 暂停或激活发布包，对应全部和特定流程定义。 暂停意味着它们不能再执行任何操作了，激活 是对应的反向操作。 获得多种资源，像是包含在发布包里的文件， 或引擎自动生成的流程图。 获得流程定义的 pojo 版本， 可以用来通过 java 解析流程，而不必通过 xml。\n\n 2.2 RuntimeService \n\nRuntimeService 是 activiti 的流程运行管理类。可以从这个服务类中获取很多关于流程执行相关的信息 \n\n2.3 TaskService \n\nTaskService 是 activiti 的任务管理类。可以从这个类中获取任务的信息。\n\n 2.4 HistoryService \n\nHistoryService 是 activiti 的历史管理类，可以查询历史信息，执行流程时，引擎会保存很多数据（根据配置），比 如流程实例启动时间，任务的参与者， 完成任务的时间，每个流程实例的执行路径，等等。 这个 服务主要通过查询功能来获得这些数据。\n\n 2.5 ManagementService \n\nManagementService 是 activiti 的引擎管理类，提供了对 Activiti 流程引擎的管理和维护功能，这些功能不在工作流驱动 的应用程序中使用，主要用于 Activiti 系统的日常维护。\n\n\n\n##### 3. 工作流数据库\n\n1. 资源库流程规则表\n   1. act_re_deployment 部署信息表\n   2. act_re_model 流程设计模型部署表\n   3. act_re_procdef 流程定义数据表\n2. 运行时数据库表\n   1. act_ru_execution 运行时流程执行实例表\n   2. act_ru_identitylink 运行时流程人员表，主要存储任务节点与参与者的相关信息\n   3. act_ru_task 运行时任务节点表\n   4. act_ru_variable 运行时流程变量数据表\n3. 历史数据库表\n   1. act_hi_actinst 历史节点表\n   2. act_hi_attachment 历史附件表\n   3. act_hi_comment 历史意见表\n   4. act_hi_identitylink 历史流程人员表\n   5. act_hi_detail 历史详情表，提供历史变量的查询\n   6. act_hi_procinst 历史流程实例表\n   7. act_hi_taskinst 历史任务实例表\n   8. act_hi_varinst 历史变量表\n4. 组织机构表\n   1. act_id_group 用户组信息表\n   2. act_id_info 用户扩展信息表\n   3. act_id_membership 用户与用户组对应信息表\n   4. act_id_user 用户信息表\n\n1. 通用数据表\n   1. act_ge_bytearray 二进制数据表\n   2. act_ge_property 属性数据表存储整个流程引擎级别的数据,初始化表结构时，会默认插入三条记录，\n\n\n\n","slug":"工作流activiti","published":1,"updated":"2020-10-18T08:24:24.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbnh002ig0v807ot8unp","content":"<h3 id=\"工作流activit\"><a href=\"#工作流activit\" class=\"headerlink\" title=\"工作流activit\"></a>工作流activit</h3><p>工作流(Workflow)，就是通过计算机对业务流程自动化执行管理。Activiti 是一个工作流引擎， activiti 可以将业务系统中复杂的业务流程抽取出来，使用专门的 建模语言（BPMN2.0）进行定义，业务系统按照预先定义的流程进行执行，实现了业务系统的业务 流程由 activiti进行管理，减少业务系统由于流程变更进行系统升级改造的工作量，从而提高系统的 健壮性，同时也减少了系统开发维护成本。 </p>\n<a id=\"more\"></a>\n\n<h5 id=\"1，ProcessEngine\"><a href=\"#1，ProcessEngine\" class=\"headerlink\" title=\"1，ProcessEngine\"></a>1，ProcessEngine</h5><p>一般创建方式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建processEngineConfiguration </span></span><br><span class=\"line\">ProcessEngineConfiguration configuration = ProcessEngineConfiguration;  .createProcessEngineConfigurationFromResource(<span class=\"string\">\"activiti.cfg.xml\"</span>) </span><br><span class=\"line\"><span class=\"comment\">//通过ProcessEngineConfiguration创建ProcessEngine   </span></span><br><span class=\"line\">    ProcessEngine processEngine =  processEngineConfiguration.buildProcessEngine();</span><br></pre></td></tr></table></figure>\n\n<p> 简单创建方式 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用classpath下的activiti.cfg.xml中的配置创建processEngine   </span></span><br><span class=\"line\">ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();   </span><br><span class=\"line\">System.out.println(processEngine);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-Service\"><a href=\"#2-Service\" class=\"headerlink\" title=\"2, Service\"></a>2, Service</h5><p>工作流中的Service 的创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在上文中创建了processEngine</span></span><br><span class=\"line\">RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class=\"line\">RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class=\"line\">TaskService taskService = processEngine.getTaskService();</span><br></pre></td></tr></table></figure>\n\n<p>常用Service以及功能：</p>\n<p>2.1RepositoryService </p>\n<p>RepositoryService 是 activiti 的资源管理类，提供了管理和控制流程发布包和流程定义的操作。使用工作流建模工 具设计的业务流程图需要使用此 service 将流程定义文件的内容部署到计算机。 除了部署流程定义以外还可以： 查询引擎中的发布包和流程定义。 暂停或激活发布包，对应全部和特定流程定义。 暂停意味着它们不能再执行任何操作了，激活 是对应的反向操作。 获得多种资源，像是包含在发布包里的文件， 或引擎自动生成的流程图。 获得流程定义的 pojo 版本， 可以用来通过 java 解析流程，而不必通过 xml。</p>\n<p> 2.2 RuntimeService </p>\n<p>RuntimeService 是 activiti 的流程运行管理类。可以从这个服务类中获取很多关于流程执行相关的信息 </p>\n<p>2.3 TaskService </p>\n<p>TaskService 是 activiti 的任务管理类。可以从这个类中获取任务的信息。</p>\n<p> 2.4 HistoryService </p>\n<p>HistoryService 是 activiti 的历史管理类，可以查询历史信息，执行流程时，引擎会保存很多数据（根据配置），比 如流程实例启动时间，任务的参与者， 完成任务的时间，每个流程实例的执行路径，等等。 这个 服务主要通过查询功能来获得这些数据。</p>\n<p> 2.5 ManagementService </p>\n<p>ManagementService 是 activiti 的引擎管理类，提供了对 Activiti 流程引擎的管理和维护功能，这些功能不在工作流驱动 的应用程序中使用，主要用于 Activiti 系统的日常维护。</p>\n<h5 id=\"3-工作流数据库\"><a href=\"#3-工作流数据库\" class=\"headerlink\" title=\"3. 工作流数据库\"></a>3. 工作流数据库</h5><ol>\n<li><p>资源库流程规则表</p>\n<ol>\n<li>act_re_deployment 部署信息表</li>\n<li>act_re_model 流程设计模型部署表</li>\n<li>act_re_procdef 流程定义数据表</li>\n</ol>\n</li>\n<li><p>运行时数据库表</p>\n<ol>\n<li>act_ru_execution 运行时流程执行实例表</li>\n<li>act_ru_identitylink 运行时流程人员表，主要存储任务节点与参与者的相关信息</li>\n<li>act_ru_task 运行时任务节点表</li>\n<li>act_ru_variable 运行时流程变量数据表</li>\n</ol>\n</li>\n<li><p>历史数据库表</p>\n<ol>\n<li>act_hi_actinst 历史节点表</li>\n<li>act_hi_attachment 历史附件表</li>\n<li>act_hi_comment 历史意见表</li>\n<li>act_hi_identitylink 历史流程人员表</li>\n<li>act_hi_detail 历史详情表，提供历史变量的查询</li>\n<li>act_hi_procinst 历史流程实例表</li>\n<li>act_hi_taskinst 历史任务实例表</li>\n<li>act_hi_varinst 历史变量表</li>\n</ol>\n</li>\n<li><p>组织机构表</p>\n<ol>\n<li>act_id_group 用户组信息表</li>\n<li>act_id_info 用户扩展信息表</li>\n<li>act_id_membership 用户与用户组对应信息表</li>\n<li>act_id_user 用户信息表</li>\n</ol>\n</li>\n<li><p>通用数据表</p>\n<ol>\n<li>act_ge_bytearray 二进制数据表</li>\n<li>act_ge_property 属性数据表存储整个流程引擎级别的数据,初始化表结构时，会默认插入三条记录，</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"工作流activit\"><a href=\"#工作流activit\" class=\"headerlink\" title=\"工作流activit\"></a>工作流activit</h3><p>工作流(Workflow)，就是通过计算机对业务流程自动化执行管理。Activiti 是一个工作流引擎， activiti 可以将业务系统中复杂的业务流程抽取出来，使用专门的 建模语言（BPMN2.0）进行定义，业务系统按照预先定义的流程进行执行，实现了业务系统的业务 流程由 activiti进行管理，减少业务系统由于流程变更进行系统升级改造的工作量，从而提高系统的 健壮性，同时也减少了系统开发维护成本。 </p>","more":"<h5 id=\"1，ProcessEngine\"><a href=\"#1，ProcessEngine\" class=\"headerlink\" title=\"1，ProcessEngine\"></a>1，ProcessEngine</h5><p>一般创建方式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建processEngineConfiguration </span></span><br><span class=\"line\">ProcessEngineConfiguration configuration = ProcessEngineConfiguration;  .createProcessEngineConfigurationFromResource(<span class=\"string\">\"activiti.cfg.xml\"</span>) </span><br><span class=\"line\"><span class=\"comment\">//通过ProcessEngineConfiguration创建ProcessEngine   </span></span><br><span class=\"line\">    ProcessEngine processEngine =  processEngineConfiguration.buildProcessEngine();</span><br></pre></td></tr></table></figure>\n\n<p> 简单创建方式 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用classpath下的activiti.cfg.xml中的配置创建processEngine   </span></span><br><span class=\"line\">ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();   </span><br><span class=\"line\">System.out.println(processEngine);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-Service\"><a href=\"#2-Service\" class=\"headerlink\" title=\"2, Service\"></a>2, Service</h5><p>工作流中的Service 的创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在上文中创建了processEngine</span></span><br><span class=\"line\">RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class=\"line\">RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class=\"line\">TaskService taskService = processEngine.getTaskService();</span><br></pre></td></tr></table></figure>\n\n<p>常用Service以及功能：</p>\n<p>2.1RepositoryService </p>\n<p>RepositoryService 是 activiti 的资源管理类，提供了管理和控制流程发布包和流程定义的操作。使用工作流建模工 具设计的业务流程图需要使用此 service 将流程定义文件的内容部署到计算机。 除了部署流程定义以外还可以： 查询引擎中的发布包和流程定义。 暂停或激活发布包，对应全部和特定流程定义。 暂停意味着它们不能再执行任何操作了，激活 是对应的反向操作。 获得多种资源，像是包含在发布包里的文件， 或引擎自动生成的流程图。 获得流程定义的 pojo 版本， 可以用来通过 java 解析流程，而不必通过 xml。</p>\n<p> 2.2 RuntimeService </p>\n<p>RuntimeService 是 activiti 的流程运行管理类。可以从这个服务类中获取很多关于流程执行相关的信息 </p>\n<p>2.3 TaskService </p>\n<p>TaskService 是 activiti 的任务管理类。可以从这个类中获取任务的信息。</p>\n<p> 2.4 HistoryService </p>\n<p>HistoryService 是 activiti 的历史管理类，可以查询历史信息，执行流程时，引擎会保存很多数据（根据配置），比 如流程实例启动时间，任务的参与者， 完成任务的时间，每个流程实例的执行路径，等等。 这个 服务主要通过查询功能来获得这些数据。</p>\n<p> 2.5 ManagementService </p>\n<p>ManagementService 是 activiti 的引擎管理类，提供了对 Activiti 流程引擎的管理和维护功能，这些功能不在工作流驱动 的应用程序中使用，主要用于 Activiti 系统的日常维护。</p>\n<h5 id=\"3-工作流数据库\"><a href=\"#3-工作流数据库\" class=\"headerlink\" title=\"3. 工作流数据库\"></a>3. 工作流数据库</h5><ol>\n<li><p>资源库流程规则表</p>\n<ol>\n<li>act_re_deployment 部署信息表</li>\n<li>act_re_model 流程设计模型部署表</li>\n<li>act_re_procdef 流程定义数据表</li>\n</ol>\n</li>\n<li><p>运行时数据库表</p>\n<ol>\n<li>act_ru_execution 运行时流程执行实例表</li>\n<li>act_ru_identitylink 运行时流程人员表，主要存储任务节点与参与者的相关信息</li>\n<li>act_ru_task 运行时任务节点表</li>\n<li>act_ru_variable 运行时流程变量数据表</li>\n</ol>\n</li>\n<li><p>历史数据库表</p>\n<ol>\n<li>act_hi_actinst 历史节点表</li>\n<li>act_hi_attachment 历史附件表</li>\n<li>act_hi_comment 历史意见表</li>\n<li>act_hi_identitylink 历史流程人员表</li>\n<li>act_hi_detail 历史详情表，提供历史变量的查询</li>\n<li>act_hi_procinst 历史流程实例表</li>\n<li>act_hi_taskinst 历史任务实例表</li>\n<li>act_hi_varinst 历史变量表</li>\n</ol>\n</li>\n<li><p>组织机构表</p>\n<ol>\n<li>act_id_group 用户组信息表</li>\n<li>act_id_info 用户扩展信息表</li>\n<li>act_id_membership 用户与用户组对应信息表</li>\n<li>act_id_user 用户信息表</li>\n</ol>\n</li>\n<li><p>通用数据表</p>\n<ol>\n<li>act_ge_bytearray 二进制数据表</li>\n<li>act_ge_property 属性数据表存储整个流程引擎级别的数据,初始化表结构时，会默认插入三条记录，</li>\n</ol>\n</li>\n</ol>"},{"title":"消息队列和rabbitMQ","date":"2020-08-02T05:50:19.000Z","_content":"\n#### 消息中间件概述\n\n消息队列已经逐渐成为企业IT系统内部通信的核心手段。它具有低耦合、可靠投递、广播、流量控制、最终一致性等一系列功能，成为异步RPC的主要手段之一。当今市面上有很多主流的消息中间件，如老牌的ActiveMQ、RabbitMQ，炙手可热的Kafka，阿里巴巴自主开发RocketMQ等。\n\n<!--more-->\n\n##### 协议\n\nMQ是消息通信的模型。实现MQ的大致有两种主流方式:AMQP,JMS.\n\nAMQP:AMQP（Advanced Message Queuing Protocol，高级消息队列协议）是一个进程间传递**异步消息**的**网络协议**。\n\n**JMS**:　JMS即[Java消息服务](http://baike.baidu.com/view/3292569.htm)（Java Message Service）应用程序接口，是一个[Java平台](http://baike.baidu.com/view/209634.htm)中关于面向[消息中间件](http://baike.baidu.com/view/3118541.htm)（MOM）的[API](http://baike.baidu.com/subview/16068/5889234.htm)，用于在两个应用程序之间，或[分布式系统](http://baike.baidu.com/view/991489.htm)中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持（百度百科给出的概述）。我们可以简单的理解：两个应用程序之间需要进行通信，我们使用一个JMS服务，进行中间的转发，通过JMS 的使用，我们可以解除两个程序之间的耦合。（如ActiveMQ,RocketMQ）\n\n**RbbitMQ**：基于AMQP协议。使用erlang语言开发，稳定性好。它是应用程序之间的通信方法，消息队列在分布式系统中应用十分广泛。（生产者，消费者）\n\n**RbbitMQ的六种工作模式**\n\n简单模式，work模式，Publish/Subscribe发布与订阅模式，Routing路由模式，Topics主题模式，RPC远程调用模式。\n\n\n\n#### 消息自动确认机制\n\n默认情况下，生产者生产的消息平均分配给每一个消费者。\n\n##### work模式\n\n平均的吧消息分发给每一个消费者\n\n某个消费者宕机的情况下：\n\n关闭自动确认。在业务代码执行完成时手动确认。\n\n\n\n##### Publish/Subscribe发布与订阅模式\n\n广播。通过指定交换机发给 所有与此交换机绑定的队列（交换机类型fanout）\n\n\n\n##### Routing路由模式\n\n通过指定交换机 发给所有与此交换机下指定的路由键绑定的队列(交换机类型direct)\n\n\n\n##### Topics主题模式(动态路由)\n\n通过指定交换机 发给所有与此交换机下指定的(路由键通配符，如a.*)绑定的队列(交换机类型topic)\n\n\n\n","source":"_posts/消息队列和rabbitMQ.md","raw":"---\ntitle: 消息队列和rabbitMQ\ndate: 2020-08-02 13:50:19\ncategories: 消息队列\t\ntags: rabbitMQ\n\n---\n\n#### 消息中间件概述\n\n消息队列已经逐渐成为企业IT系统内部通信的核心手段。它具有低耦合、可靠投递、广播、流量控制、最终一致性等一系列功能，成为异步RPC的主要手段之一。当今市面上有很多主流的消息中间件，如老牌的ActiveMQ、RabbitMQ，炙手可热的Kafka，阿里巴巴自主开发RocketMQ等。\n\n<!--more-->\n\n##### 协议\n\nMQ是消息通信的模型。实现MQ的大致有两种主流方式:AMQP,JMS.\n\nAMQP:AMQP（Advanced Message Queuing Protocol，高级消息队列协议）是一个进程间传递**异步消息**的**网络协议**。\n\n**JMS**:　JMS即[Java消息服务](http://baike.baidu.com/view/3292569.htm)（Java Message Service）应用程序接口，是一个[Java平台](http://baike.baidu.com/view/209634.htm)中关于面向[消息中间件](http://baike.baidu.com/view/3118541.htm)（MOM）的[API](http://baike.baidu.com/subview/16068/5889234.htm)，用于在两个应用程序之间，或[分布式系统](http://baike.baidu.com/view/991489.htm)中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持（百度百科给出的概述）。我们可以简单的理解：两个应用程序之间需要进行通信，我们使用一个JMS服务，进行中间的转发，通过JMS 的使用，我们可以解除两个程序之间的耦合。（如ActiveMQ,RocketMQ）\n\n**RbbitMQ**：基于AMQP协议。使用erlang语言开发，稳定性好。它是应用程序之间的通信方法，消息队列在分布式系统中应用十分广泛。（生产者，消费者）\n\n**RbbitMQ的六种工作模式**\n\n简单模式，work模式，Publish/Subscribe发布与订阅模式，Routing路由模式，Topics主题模式，RPC远程调用模式。\n\n\n\n#### 消息自动确认机制\n\n默认情况下，生产者生产的消息平均分配给每一个消费者。\n\n##### work模式\n\n平均的吧消息分发给每一个消费者\n\n某个消费者宕机的情况下：\n\n关闭自动确认。在业务代码执行完成时手动确认。\n\n\n\n##### Publish/Subscribe发布与订阅模式\n\n广播。通过指定交换机发给 所有与此交换机绑定的队列（交换机类型fanout）\n\n\n\n##### Routing路由模式\n\n通过指定交换机 发给所有与此交换机下指定的路由键绑定的队列(交换机类型direct)\n\n\n\n##### Topics主题模式(动态路由)\n\n通过指定交换机 发给所有与此交换机下指定的(路由键通配符，如a.*)绑定的队列(交换机类型topic)\n\n\n\n","slug":"消息队列和rabbitMQ","published":1,"updated":"2020-09-11T16:31:52.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbni002lg0v897aze9q6","content":"<h4 id=\"消息中间件概述\"><a href=\"#消息中间件概述\" class=\"headerlink\" title=\"消息中间件概述\"></a>消息中间件概述</h4><p>消息队列已经逐渐成为企业IT系统内部通信的核心手段。它具有低耦合、可靠投递、广播、流量控制、最终一致性等一系列功能，成为异步RPC的主要手段之一。当今市面上有很多主流的消息中间件，如老牌的ActiveMQ、RabbitMQ，炙手可热的Kafka，阿里巴巴自主开发RocketMQ等。</p>\n<a id=\"more\"></a>\n\n<h5 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h5><p>MQ是消息通信的模型。实现MQ的大致有两种主流方式:AMQP,JMS.</p>\n<p>AMQP:AMQP（Advanced Message Queuing Protocol，高级消息队列协议）是一个进程间传递<strong>异步消息</strong>的<strong>网络协议</strong>。</p>\n<p><strong>JMS</strong>:　JMS即<a href=\"http://baike.baidu.com/view/3292569.htm\" target=\"_blank\" rel=\"noopener\">Java消息服务</a>（Java Message Service）应用程序接口，是一个<a href=\"http://baike.baidu.com/view/209634.htm\" target=\"_blank\" rel=\"noopener\">Java平台</a>中关于面向<a href=\"http://baike.baidu.com/view/3118541.htm\" target=\"_blank\" rel=\"noopener\">消息中间件</a>（MOM）的<a href=\"http://baike.baidu.com/subview/16068/5889234.htm\" target=\"_blank\" rel=\"noopener\">API</a>，用于在两个应用程序之间，或<a href=\"http://baike.baidu.com/view/991489.htm\" target=\"_blank\" rel=\"noopener\">分布式系统</a>中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持（百度百科给出的概述）。我们可以简单的理解：两个应用程序之间需要进行通信，我们使用一个JMS服务，进行中间的转发，通过JMS 的使用，我们可以解除两个程序之间的耦合。（如ActiveMQ,RocketMQ）</p>\n<p><strong>RbbitMQ</strong>：基于AMQP协议。使用erlang语言开发，稳定性好。它是应用程序之间的通信方法，消息队列在分布式系统中应用十分广泛。（生产者，消费者）</p>\n<p><strong>RbbitMQ的六种工作模式</strong></p>\n<p>简单模式，work模式，Publish/Subscribe发布与订阅模式，Routing路由模式，Topics主题模式，RPC远程调用模式。</p>\n<h4 id=\"消息自动确认机制\"><a href=\"#消息自动确认机制\" class=\"headerlink\" title=\"消息自动确认机制\"></a>消息自动确认机制</h4><p>默认情况下，生产者生产的消息平均分配给每一个消费者。</p>\n<h5 id=\"work模式\"><a href=\"#work模式\" class=\"headerlink\" title=\"work模式\"></a>work模式</h5><p>平均的吧消息分发给每一个消费者</p>\n<p>某个消费者宕机的情况下：</p>\n<p>关闭自动确认。在业务代码执行完成时手动确认。</p>\n<h5 id=\"Publish-Subscribe发布与订阅模式\"><a href=\"#Publish-Subscribe发布与订阅模式\" class=\"headerlink\" title=\"Publish/Subscribe发布与订阅模式\"></a>Publish/Subscribe发布与订阅模式</h5><p>广播。通过指定交换机发给 所有与此交换机绑定的队列（交换机类型fanout）</p>\n<h5 id=\"Routing路由模式\"><a href=\"#Routing路由模式\" class=\"headerlink\" title=\"Routing路由模式\"></a>Routing路由模式</h5><p>通过指定交换机 发给所有与此交换机下指定的路由键绑定的队列(交换机类型direct)</p>\n<h5 id=\"Topics主题模式-动态路由\"><a href=\"#Topics主题模式-动态路由\" class=\"headerlink\" title=\"Topics主题模式(动态路由)\"></a>Topics主题模式(动态路由)</h5><p>通过指定交换机 发给所有与此交换机下指定的(路由键通配符，如a.*)绑定的队列(交换机类型topic)</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"消息中间件概述\"><a href=\"#消息中间件概述\" class=\"headerlink\" title=\"消息中间件概述\"></a>消息中间件概述</h4><p>消息队列已经逐渐成为企业IT系统内部通信的核心手段。它具有低耦合、可靠投递、广播、流量控制、最终一致性等一系列功能，成为异步RPC的主要手段之一。当今市面上有很多主流的消息中间件，如老牌的ActiveMQ、RabbitMQ，炙手可热的Kafka，阿里巴巴自主开发RocketMQ等。</p>","more":"<h5 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h5><p>MQ是消息通信的模型。实现MQ的大致有两种主流方式:AMQP,JMS.</p>\n<p>AMQP:AMQP（Advanced Message Queuing Protocol，高级消息队列协议）是一个进程间传递<strong>异步消息</strong>的<strong>网络协议</strong>。</p>\n<p><strong>JMS</strong>:　JMS即<a href=\"http://baike.baidu.com/view/3292569.htm\" target=\"_blank\" rel=\"noopener\">Java消息服务</a>（Java Message Service）应用程序接口，是一个<a href=\"http://baike.baidu.com/view/209634.htm\" target=\"_blank\" rel=\"noopener\">Java平台</a>中关于面向<a href=\"http://baike.baidu.com/view/3118541.htm\" target=\"_blank\" rel=\"noopener\">消息中间件</a>（MOM）的<a href=\"http://baike.baidu.com/subview/16068/5889234.htm\" target=\"_blank\" rel=\"noopener\">API</a>，用于在两个应用程序之间，或<a href=\"http://baike.baidu.com/view/991489.htm\" target=\"_blank\" rel=\"noopener\">分布式系统</a>中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持（百度百科给出的概述）。我们可以简单的理解：两个应用程序之间需要进行通信，我们使用一个JMS服务，进行中间的转发，通过JMS 的使用，我们可以解除两个程序之间的耦合。（如ActiveMQ,RocketMQ）</p>\n<p><strong>RbbitMQ</strong>：基于AMQP协议。使用erlang语言开发，稳定性好。它是应用程序之间的通信方法，消息队列在分布式系统中应用十分广泛。（生产者，消费者）</p>\n<p><strong>RbbitMQ的六种工作模式</strong></p>\n<p>简单模式，work模式，Publish/Subscribe发布与订阅模式，Routing路由模式，Topics主题模式，RPC远程调用模式。</p>\n<h4 id=\"消息自动确认机制\"><a href=\"#消息自动确认机制\" class=\"headerlink\" title=\"消息自动确认机制\"></a>消息自动确认机制</h4><p>默认情况下，生产者生产的消息平均分配给每一个消费者。</p>\n<h5 id=\"work模式\"><a href=\"#work模式\" class=\"headerlink\" title=\"work模式\"></a>work模式</h5><p>平均的吧消息分发给每一个消费者</p>\n<p>某个消费者宕机的情况下：</p>\n<p>关闭自动确认。在业务代码执行完成时手动确认。</p>\n<h5 id=\"Publish-Subscribe发布与订阅模式\"><a href=\"#Publish-Subscribe发布与订阅模式\" class=\"headerlink\" title=\"Publish/Subscribe发布与订阅模式\"></a>Publish/Subscribe发布与订阅模式</h5><p>广播。通过指定交换机发给 所有与此交换机绑定的队列（交换机类型fanout）</p>\n<h5 id=\"Routing路由模式\"><a href=\"#Routing路由模式\" class=\"headerlink\" title=\"Routing路由模式\"></a>Routing路由模式</h5><p>通过指定交换机 发给所有与此交换机下指定的路由键绑定的队列(交换机类型direct)</p>\n<h5 id=\"Topics主题模式-动态路由\"><a href=\"#Topics主题模式-动态路由\" class=\"headerlink\" title=\"Topics主题模式(动态路由)\"></a>Topics主题模式(动态路由)</h5><p>通过指定交换机 发给所有与此交换机下指定的(路由键通配符，如a.*)绑定的队列(交换机类型topic)</p>"},{"title":" 阿里云centos7 运行tomcat 之后远程无法访问的解决","date":"2020-01-17T07:05:57.000Z","_content":"\n在安装好 jdk tomcat,并且配好环境变量之后返现远程通过8080无法访问\n解决方法如下：\n\n<!--more-->\n\n#### 1 查看在服务器本地是否能够访问\n\n```\n curl -i http://localhost:8080\n```\n看一下有没有数据返回，比较慢可能需要等待几分钟时间\n#### 2 添加安全组规则\n在阿里云的控制添加安全组规则：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200117145259792.png)\n### 3在服务器放开放防火墙firewall端口\n查看8080在firewall是否开启。发现没有开启\n```\n firewall-cmd --query-port=8080/tcp\nno\n```\n添加8080\n\n```\n firewall-cmd --add-port=8080/tcp --permanent\n```\n重新载入防火墙\n\n```\nfirewall-cmd --reload\n```\n查询8080端口是否开启成功：\n\n```\nfirewall-cmd --query-port=8080/tcp\n```\n参考文章：\n[Linux下Centos7对外开放端口：](https://blog.csdn.net/realjh/article/details/82048492)\n[https://blog.csdn.net/realjh/article/details/82048492](https://blog.csdn.net/realjh/article/details/82048492)","source":"_posts/阿里云centos7-运行tomcat-之后远程无法访问的解决.md","raw":"---\ntitle: ' 阿里云centos7 运行tomcat 之后远程无法访问的解决'\ndate: 2020-01-17 15:05:57 \ncategories: \n\t- linux\n\t\t- centos\ntags: 阿里云服务器\n---\n\n在安装好 jdk tomcat,并且配好环境变量之后返现远程通过8080无法访问\n解决方法如下：\n\n<!--more-->\n\n#### 1 查看在服务器本地是否能够访问\n\n```\n curl -i http://localhost:8080\n```\n看一下有没有数据返回，比较慢可能需要等待几分钟时间\n#### 2 添加安全组规则\n在阿里云的控制添加安全组规则：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200117145259792.png)\n### 3在服务器放开放防火墙firewall端口\n查看8080在firewall是否开启。发现没有开启\n```\n firewall-cmd --query-port=8080/tcp\nno\n```\n添加8080\n\n```\n firewall-cmd --add-port=8080/tcp --permanent\n```\n重新载入防火墙\n\n```\nfirewall-cmd --reload\n```\n查询8080端口是否开启成功：\n\n```\nfirewall-cmd --query-port=8080/tcp\n```\n参考文章：\n[Linux下Centos7对外开放端口：](https://blog.csdn.net/realjh/article/details/82048492)\n[https://blog.csdn.net/realjh/article/details/82048492](https://blog.csdn.net/realjh/article/details/82048492)","slug":"阿里云centos7-运行tomcat-之后远程无法访问的解决","published":1,"updated":"2020-08-01T03:43:37.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbnj002pg0v883c26wh5","content":"<p>在安装好 jdk tomcat,并且配好环境变量之后返现远程通过8080无法访问<br>解决方法如下：</p>\n<a id=\"more\"></a>\n\n<h4 id=\"1-查看在服务器本地是否能够访问\"><a href=\"#1-查看在服务器本地是否能够访问\" class=\"headerlink\" title=\"1 查看在服务器本地是否能够访问\"></a>1 查看在服务器本地是否能够访问</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -i http:&#x2F;&#x2F;localhost:8080</span><br></pre></td></tr></table></figure>\n<p>看一下有没有数据返回，比较慢可能需要等待几分钟时间</p>\n<h4 id=\"2-添加安全组规则\"><a href=\"#2-添加安全组规则\" class=\"headerlink\" title=\"2 添加安全组规则\"></a>2 添加安全组规则</h4><p>在阿里云的控制添加安全组规则：<br><img src=\"https://img-blog.csdnimg.cn/20200117145259792.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"3在服务器放开放防火墙firewall端口\"><a href=\"#3在服务器放开放防火墙firewall端口\" class=\"headerlink\" title=\"3在服务器放开放防火墙firewall端口\"></a>3在服务器放开放防火墙firewall端口</h3><p>查看8080在firewall是否开启。发现没有开启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> firewall-cmd --query-port&#x3D;8080&#x2F;tcp</span><br><span class=\"line\">no</span><br></pre></td></tr></table></figure>\n<p>添加8080</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;8080&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure>\n<p>重新载入防火墙</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<p>查询8080端口是否开启成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --query-port&#x3D;8080&#x2F;tcp</span><br></pre></td></tr></table></figure>\n<p>参考文章：<br><a href=\"https://blog.csdn.net/realjh/article/details/82048492\" target=\"_blank\" rel=\"noopener\">Linux下Centos7对外开放端口：</a><br><a href=\"https://blog.csdn.net/realjh/article/details/82048492\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/realjh/article/details/82048492</a></p>\n","site":{"data":{}},"excerpt":"<p>在安装好 jdk tomcat,并且配好环境变量之后返现远程通过8080无法访问<br>解决方法如下：</p>","more":"<h4 id=\"1-查看在服务器本地是否能够访问\"><a href=\"#1-查看在服务器本地是否能够访问\" class=\"headerlink\" title=\"1 查看在服务器本地是否能够访问\"></a>1 查看在服务器本地是否能够访问</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -i http:&#x2F;&#x2F;localhost:8080</span><br></pre></td></tr></table></figure>\n<p>看一下有没有数据返回，比较慢可能需要等待几分钟时间</p>\n<h4 id=\"2-添加安全组规则\"><a href=\"#2-添加安全组规则\" class=\"headerlink\" title=\"2 添加安全组规则\"></a>2 添加安全组规则</h4><p>在阿里云的控制添加安全组规则：<br><img src=\"https://img-blog.csdnimg.cn/20200117145259792.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"3在服务器放开放防火墙firewall端口\"><a href=\"#3在服务器放开放防火墙firewall端口\" class=\"headerlink\" title=\"3在服务器放开放防火墙firewall端口\"></a>3在服务器放开放防火墙firewall端口</h3><p>查看8080在firewall是否开启。发现没有开启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> firewall-cmd --query-port&#x3D;8080&#x2F;tcp</span><br><span class=\"line\">no</span><br></pre></td></tr></table></figure>\n<p>添加8080</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;8080&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure>\n<p>重新载入防火墙</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<p>查询8080端口是否开启成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --query-port&#x3D;8080&#x2F;tcp</span><br></pre></td></tr></table></figure>\n<p>参考文章：<br><a href=\"https://blog.csdn.net/realjh/article/details/82048492\" target=\"_blank\" rel=\"noopener\">Linux下Centos7对外开放端口：</a><br><a href=\"https://blog.csdn.net/realjh/article/details/82048492\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/realjh/article/details/82048492</a></p>"},{"title":"解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题","date":"2019-12-08T05:50:04.000Z","_content":"\n解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题\n\n<!--more-->\n\n执行保存操作，执行插入语句\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134343121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n发现插入的数据，中文在数据库中变成了问号\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134506604.png)\n在数据库中执行以下插入语句：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134633703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n发现没问题：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134717513.png)\n于是检查一下自己的连接配置，发现url中没有加utf-8，于是加上：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134847707.png)\n再次执行程序保存操作，发现问题解决：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134937709.png)","source":"_posts/解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题.md","raw":"---\ntitle: 解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题\ndate: 2019-12-08 13:50:04\ncategories: mysql\ntags: mysql\n---\n\n解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题\n\n<!--more-->\n\n执行保存操作，执行插入语句\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134343121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n发现插入的数据，中文在数据库中变成了问号\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134506604.png)\n在数据库中执行以下插入语句：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134633703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n发现没问题：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134717513.png)\n于是检查一下自己的连接配置，发现url中没有加utf-8，于是加上：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134847707.png)\n再次执行程序保存操作，发现问题解决：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134937709.png)","slug":"解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题","published":1,"updated":"2020-08-01T03:43:37.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbnk002rg0v8hrb7c730","content":"<p>解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题</p>\n<a id=\"more\"></a>\n\n<p>执行保存操作，执行插入语句<br><img src=\"https://img-blog.csdnimg.cn/20191208134343121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>发现插入的数据，中文在数据库中变成了问号<br><img src=\"https://img-blog.csdnimg.cn/20191208134506604.png\" alt=\"在这里插入图片描述\"><br>在数据库中执行以下插入语句：<br><img src=\"https://img-blog.csdnimg.cn/20191208134633703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>发现没问题：<br><img src=\"https://img-blog.csdnimg.cn/20191208134717513.png\" alt=\"在这里插入图片描述\"><br>于是检查一下自己的连接配置，发现url中没有加utf-8，于是加上：<br><img src=\"https://img-blog.csdnimg.cn/20191208134847707.png\" alt=\"在这里插入图片描述\"><br>再次执行程序保存操作，发现问题解决：<br><img src=\"https://img-blog.csdnimg.cn/20191208134937709.png\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"<p>解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题</p>","more":"<p>执行保存操作，执行插入语句<br><img src=\"https://img-blog.csdnimg.cn/20191208134343121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>发现插入的数据，中文在数据库中变成了问号<br><img src=\"https://img-blog.csdnimg.cn/20191208134506604.png\" alt=\"在这里插入图片描述\"><br>在数据库中执行以下插入语句：<br><img src=\"https://img-blog.csdnimg.cn/20191208134633703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>发现没问题：<br><img src=\"https://img-blog.csdnimg.cn/20191208134717513.png\" alt=\"在这里插入图片描述\"><br>于是检查一下自己的连接配置，发现url中没有加utf-8，于是加上：<br><img src=\"https://img-blog.csdnimg.cn/20191208134847707.png\" alt=\"在这里插入图片描述\"><br>再次执行程序保存操作，发现问题解决：<br><img src=\"https://img-blog.csdnimg.cn/20191208134937709.png\" alt=\"在这里插入图片描述\"></p>"},{"title":"阿里巴巴java开发手册-编程规约","date":"2020-08-14T01:15:55.000Z","_content":"\n### 编程规约\n\n<!--more-->\n\n#### 命名风格\n\n##### 接口和实现类命名规则\n\n1）【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部\n\n的实现类用 Impl 的后缀与接口区别。\n\n##### 三层架构各层命名规约：\n\nA) Service/DAO 层方法命名规约\n\n1） 获取单个对象的方法用 get 做前缀。\n\n2） 获取多个对象的方法用 list 做前缀，复数形式结尾如：listObjects。 \n\n3） 获取统计值的方法用 count 做前缀。 \n\n4） 插入的方法用 save/insert 做前缀。\n\n5） 删除的方法用 remove/delete 做前缀。\n\n6） 修改的方法用 update 做前缀。\n\nB) 领域模型命名规约\n\n1） 数据对象：xxxDO，xxx 即为数据表名。\n\n2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。\n\n3） 展示对象：xxxVO，xxx 一般为网页名称。\n\n4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。\n\n####  常量定义\n\n \n\n【强制】不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。\n\n反例：String key = \"Id#taobao_\" + tradeId;\n\n cache.put(key, value);\n\n#### 代码格式\n\n##### 换行\n\n【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果\n\n是非空代码块则：\n\n1） 左大括号前不换行。\n\n2） 左大括号后换行。\n\n3） 右大括号前换行。\n\n4） 右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行。\n\n##### 空格\n\n1【强制】左小括号和字符之间不出现空格；同样，右小括号和字符之间也不出现空格；而左大\n\n括号前需要空格。详见第 5 条下方正例提示。\n\n反例：if (空格 a == b 空格)\n\n2【强制】if/for/while/switch/do 等保留字与括号之间都必须加空格。\n\n3【强制】任何二目、三目运算符的左右两边都需要加一个空格。\n\n说明：运算符包括赋值运算符=、逻辑运算符&&、加减乘除符号等\n\n4 \n\n【强制】采用 4 个空格缩进，禁止使用 tab 字符。\n\n说明：如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，\n\n请勿勾选 Use tab character；而在 eclipse 中，必须勾选 insert spaces for tabs。\n\n```java\n正例： \npublic static void main(String[] args) { \n// 缩进 4 个空格 \nString say = \"hello\"; \n// 运算符的左右必须有一个空格 \nint flag = 0; \n// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格 \nif (flag == 0) { \nSystem.out.println(say); \n} \n// 左大括号前加空格且不换行；左大括号后换行 \nif (flag == 1) { \nSystem.out.println(\"world\"); \n// 右大括号前换行，右大括号后有 else，不用换行 \n} else { \nSystem.out.println(\"ok\"); \n// 在右大括号后直接结束，则必须换行 \n} \n}\n```\n\n5【强制】注释的双斜线与注释内容之间有且仅有一个空格\n\n```java\n正例：\n// 这是示例注释，请注意在双斜线之后有一个空格\nString ygb = new String();\n```\n\n6【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：\n\n1） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。\n\n2） 运算符与下文一起换行。\n\n3） 方法调用的点符号与下文一起换行。\n\n4） 方法调用中的多个参数需要换行时，在逗号后进行。 \n\n5） 在括号前不要换行，见反例\n\n```java\n//正例：\nStringBuffer sb = new StringBuffer(); \n// 超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行\nsb.append(\"zi\").append(\"xin\")... \n.append(\"huang\")... \n.append(\"huang\")... \n.append(\"huang\");\n反例：\nStringBuffer sb = new StringBuffer(); \n// 超过 120 个字符的情况下，不要在括号前换行\nsb.append(\"zi\").append(\"xin\")...append \n(\"huang\"); \n// 参数很多的方法调用可能超过 120 个字符，不要在逗号前换行\nmethod(args1, args2, args3, ... \n, argsX);\n```\n\n7【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。\n\n```java\n//正例：下例中实参的 args1，后边必须要有一个空格。\nmethod(args1, args2, args3);\n```\n\n8【强制】IDE 的 text file encoding 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，\n\n不要使用 Windows 格式。\n\n#### OOP规约\n\n1. 【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成\n\n本，直接用类名来访问即可。\n\n2. 【强制】所有的覆写方法，必须加@Override 注解。\n\n说明：getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override\n\n可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编\n\n译报错。\n\n3. 【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。\n\n说明：可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数编程）\n\n正例：public List<User> listUsers(String type, Long... ids) {...}\n\n4. 【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生\n\n影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。\n\n5. 【强制】不能使用过时的类或方法。\n\n说明：java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应\n\n该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，\n\n那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。\n\n6. 【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用\n\nequals。\n\n正例：\"test\".equals(object);\n\n反例：object.equals(\"test\");\n\n说明：推荐使用 java.util.Objects#equals（JDK7 引入的工具类）\n\n7. 【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。\n\n说明：对于 Integer var = ? 在-128 至 127 范围内的赋值，Integer 对象是在\n\nIntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行\n\n判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，\n\n推荐使用 equals 方法进行判断\n\n8. 关于基本数据类型与包装数据类型的使用标准如下：\n\n1） 【强制】所有的 POJO 类属性必须使用包装数据类型。\n\n2） 【强制】RPC 方法的返回值和参数必须使用包装数据类型。\n\n3） 【推荐】所有的局部变量使用基本数据类型。\n\n说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何\n\nNPE 问题，或者入库检查，都由使用者来保证。\n\n正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。\n\n反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用\n\n不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装\n\n数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出\n\n9. 【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。\n\n反例：POJO 类的 gmtCreate 默认值为 new Date()，但是这个属性在数据提取时并没有置入具\n\n体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。\n\n10. 【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如\n\n果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。\n\n说明：注意 serialVersionUID 不一致会抛出序列化运行时异常。\n\n11. 【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。\n12. 【强制】POJO 类必须写 toString 方法。使用 IDE 中的工具：source> generate toString  时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。\n13. 【强制】禁止在 POJO 类中，同时存在对应属性 xxx 的 isXxx()和 getXxx()方法。\n\n说明：框架在调用属性 xxx 的提取方法时，并不能确定哪个方法一定是被优先调用到，神坑之一。\n\n#### 日期时间\n\n1.【强制】日期格式化时，传入 pattern 中表示年份统一使用小写的 y。\n\n说明：日期格式化时，yyyy 表示当天所在的年，而大写的 YYYY 代表是 week in which year（JDK7 之后\n\n引入的概念），意思是当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，返回的 YYYY\n\n就是下一年。\n\n```java\n//正例：表示日期和时间的格式如下所示：\nnew SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n```\n\n2.【强制】在日期格式中分清楚大写的 M 和小写的 m，大写的 H 和小写的 h 分别指代的意义。\n\n说明：日期格式中的这两对字母表意如下：\n\n1） 表示月份是大写的 M； \n\n2） 表示分钟则是小写的 m； \n\n3） 24 小时制的是大写的 H； \n\n4） 12 小时制的则是小写的 h。\n\n3.【强制】获取当前毫秒数：System.currentTimeMillis(); 而不是 new Date().getTime()。\n\n说明：如果想获取更加精确的纳秒级时间值，使用 System.nanoTime 的方式。在 JDK8 中，针对统计时间\n\n等场景，推荐使用 Instant 类。\n\n4.【强制】不允许在程序任何地方中使用：1）java.sql.Date 2）java.sql.Time 3）\n\njava.sql.Timestamp。\n\n说明：第 1 个不记录时间，getHours()抛出异常；第 2 个不记录日期，getYear()抛出异常；第 3 个在构造\n\n方法 super((time/1000)*1000)，fastTime 和 nanos 分开存储秒和纳秒信息。\n\n反例： java.util.Date.after(Date)进行时间比较时，当入参是 java.sql.Timestamp 时，会触发 JDK \n\nBUG(JDK9 已修复)，可能导致比较时的意外结果\n\n5.【强制】不要在程序中写死一年为 365 天，避免在公历闰年时出现日期转换错误或程序逻辑\n\n错误。\n\n\n\n#### 集合处理\n\n1.【强制】关于 hashCode 和 equals 的处理，遵循如下规则：\n\n1） 只要重写 equals，就必须重写 hashCode。 \n\n2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写\n\n这两个方法。\n\n3） 如果自定义对象作为 Map 的键，那么必须覆写 hashCode 和 equals。\n\n说明：String 因为重写了 hashCode 和 equals 方法，所以我们可以愉快地使用 String 对象作为 key 来使\n\n用。\n\n2.【强制】判断所有集合内部的元素是否为空，使用 isEmpty()方法，而不是 size()==0 的方式。\n\n说明：前者的时间复杂度为 O(1)，而且可读性更好。\n\n```java\n//正例：\nMap<String, Object> map = new HashMap<>();\nif(map.isEmpty()) {\n System.out.println(\"no element in this map.\");\n}\n```\n\n3.【强制】在使用 java.util.stream.Collectors 类的 toMap()方法转为 Map 集合时，一定要使\n\n用含有参数类型为 BinaryOperator，参数名为 mergeFunction 的方法，否则当出现相同 key\n\n值时会抛出 IllegalStateException 异常。\n\n说明：参数 mergeFunction 的作用是当出现 key 重复时，自定义对 value 的处理策略。\n\n```java\n//正例：\nList<Pair<String, Double>> pairArrayList = new ArrayList<>(3);\npairArrayList.add(new Pair<>(\"version\", 6.19));\npairArrayList.add(new Pair<>(\"version\", 10.24));\npairArrayList.add(new Pair<>(\"version\", 13.14));\nMap<String, Double> map = pairArrayList.stream().collect(\n// 生成的 map 集合中只有一个键值对：{version=13.14}\nCollectors.toMap(Pair::getKey, Pair::getValue, (v1, v2) -> v2));\n//反例：\nString[] departments = new String[] {\"iERP\", \"iERP\", \"EIBU\"};\n// 抛出 IllegalStateException 异常\nMap<Integer, String> map = Arrays.stream(departments)\n .collect(Collectors.toMap(String::hashCode, str -> str))\n```\n\n4.【强制】在使用 java.util.stream.Collectors 类的 toMap()方法转为 Map 集合时，一定要注\n\n意当 value 为 null 时会抛 NPE 异常。\n\n```java\n//说明：在 java.util.HashMap 的 merge 方法里会进行如下的判断：\nif (value == null || remappingFunction == null)\nthrow new NullPointerException();\n//反例：\nList<Pair<String, Double>> pairArrayList = new ArrayList<>(2);\npairArrayList.add(new Pair<>(\"version1\", 4.22));\npairArrayList.add(new Pair<>(\"version2\", null));\nMap<String, Double> map = pairArrayList.stream().collect(\n// 抛出 NullPointerException 异常\nCollectors.toMap(Pair::getKey, Pair::getValue, (v1, v2) -> v2));\n```\n\n5.【强制】ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClassCastException 异 \n\n常：java.util.RandomAccessSubList cannot be cast to java.util.ArrayList。\n\n说明：subList 返回的是 ArrayList 的内部类 SubList，并不是 ArrayList 而是 ArrayList 的一个视图，对\n\n于 SubList 子列表的所有操作最终会反映到原列表上。\n\n6.【强制】使用 Map 的方法 keySet()/values()/entrySet()返回集合对象时，不可以对其进行添\n\n加元素操作，否则会抛出 UnsupportedOperationException 异常。\n\n7.【强制】Collections 类返回的对象，如：emptyList()/singletonList()等都是 immutable list，\n\n不可对其进行添加或者删除元素的操作。\n\n反例：如果查询无结果，返回 Collections.emptyList()空集合对象，调用方一旦进行了添加元素的操作，就\n\n会触发 UnsupportedOperationException 异常。\n\n8.【强制】在 subList 场景中，高度注意对父集合元素的增加或删除，均会导致子列表的遍历、\n\n增加、删除产生 ConcurrentModificationException 异常。\n\n9.【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一\n\n致、长度为 0 的空数组。\n\n反例：直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现\n\nClassCastException 错误。\n\n```java\n//正例：\nList<String> list = new ArrayList<>(2);\nlist.add(\"guan\");\nlist.add(\"bao\");\nString[] array = list.toArray(new String[0]);\n```\n\n 说明：使用 toArray 带参方法，数组空间大小的 length， \n\n1） 等于 0，动态创建与 size 相同的数组，性能最好。\n\n2） 大于 0 但小于 size，重新创建大小等于 size 的数组，增加 GC 负担。\n\n3） 等于 size，在高并发情况下，数组创建完成之后，size 正在变大的情况下，负面影响与 2 相同。\n\n4） 大于 size，空间浪费，且在 size 处插入 null 值，存在 NPE 隐患。\n\n10.【强制】在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行\n\nNPE 判断。\n\n说明：在 ArrayList#addAll 方法的第一行代码即 Object[] a = c.toArray(); 其中 c 为输入集合参数，如果\n\n为 null，则直接抛出异常。\n\n11.【强制】使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，\n\n它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。\n\n说明：asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList 体现的是适配\n\n器模式，只是转换接口，后台的数据仍是数组。\n\n```java\n String[] str = new String[] { \"yang\", \"hao\" };\n List list = Arrays.asList(str);\n//第一种情况：list.add(\"yangguanbao\"); 运行时异常。\n//第二种情况：str[0] = \"changed\"; 也会随之修改，反之亦然。\n```\n\n12 【强制】泛型通配符<? extends T>来接收返回的数据，此写法的泛型集合不能使用 add 方法， \n\n而<? super T>不能使用 get 方法，两者在接口调用赋值的场景中容易出错。\n\n说明：扩展说一下 PECS(Producer Extends Consumer Super)原则：第一、频繁往外读取内容的，适合用\n\n<? extends T>。第二、经常往里插入的，适合用<? super T>\n\n13.【强制】在无泛型限制定义的集合赋值给泛型限制的集合时，在使用集合元素时，需要进行\n\ninstanceof 判断，避免抛出 ClassCastException 异常。\n\n说明：毕竟泛型是在 JDK5 后才出现，考虑到向前兼容，编译器是允许非泛型集合与泛型集合互相赋值。\n\n```java\n//反例：\nList<String> generics = null;\nList notGenerics = new ArrayList(10);\nnotGenerics.add(new Object());\nnotGenerics.add(new Integer(1));\ngenerics = notGenerics;\n// 此处抛出 ClassCastException 异常\nString string = generics.get(0);\n```\n\n14.【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator\n\n方式，如果并发操作，需要对 Iterator 对象加锁。\n\n\n\n```java\n/*说明：三个条件如下 \n*1） x，y 的比较结果和 y，x 的比较结果相反。\n*2） x>y，y>z，则 x>z。 \n*3） x=y，则 x，z 比较结果和 y，z 比较结果相同。\n**/\n//反例：下例中没有处理相等的情况，交换两个对象判断结果并不互反，不符合第一个条件，在实际使用中可能会出现异常。\nnew Comparator<Student>() {\n @Override\n public int compare(Student o1, Student o2) {\n return o1.getId() > o2.getId() ? 1 : -1;\n }\n};\n```\n\n\n\n#### 并发处理\n\n1.【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。\n\n说明：资源驱动类、工具类、单例工厂类都需要注意。\n\n2.【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。\n\n正例：自定义线程工厂，并且根据外部特征进行分组，比如，来自同一机房的调用，把机房编号赋值给\n\nwhatFeaturOfGroup\n\n```java\npublic class UserThreadFactory implements ThreadFactory {\n private final String namePrefix;\n private final AtomicInteger nextId = new AtomicInteger(1);\n // 定义线程组名称，在 jstack 问题排查时，非常有帮助\n UserThreadFactory(String whatFeaturOfGroup) {\n namePrefix = \"From UserThreadFactory's \" + whatFeaturOfGroup + \"-Worker-\";\n }\n @Override\n public Thread newThread(Runnable task) {\n String name = namePrefix + nextId.getAndIncrement();\n Thread thread = new Thread(null, task, name, 0, false);\n System.out.println(thread.getName());\n return thread;\n } }\n```\n\n3.【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。\n\n说明：线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。\n\n如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\n\n4.【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这\n\n样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。\n\n说明：Executors 返回的线程池对象的弊端如下： \n\n1） FixedThreadPool 和 SingleThreadPool：\n\n允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。 \n\n2） CachedThreadPool：\n\n允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。\n\n5.【强制】SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为 static，\n\n必须加锁，或者使用 DateUtils 工具类。\n\n```java\n//正例：注意线程安全，使用 DateUtils。亦推荐如下处理：\nprivate static final ThreadLocal<DateFormat> df = new ThreadLocal<DateFormat>() {\n @Override\n protected DateFormat initialValue() {\n return new SimpleDateFormat(\"yyyy-MM-dd\");\n }\n};\n\n```\n\n6.【强制】必须回收自定义的 ThreadLocal 变量，尤其在线程池场景下，线程经常会被复用，\n\n如果不清理自定义的 ThreadLocal 变量，可能会影响后续业务逻辑和造成内存泄露等问题。\n\n尽量在代理中使用 try-finally 块进行回收。\n\n```java\n//正例：\nobjectThreadLocal.set(userInfo);\ntry {\n // ...\n} finally {\n objectThreadLocal.remove();\n}\n```\n\n7.【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能\n\n锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。\n\n说明：尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。\n\n8.【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造\n\n成死锁。\n\n说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、 \n\nB、C，否则可能出现死锁。\n\n9.【强制】在使用阻塞等待获取锁的方式中，必须在 try 代码块之外，并且在加锁方法与 try 代\n\n码块之间没有任何可能抛出异常的方法调用，避免加锁成功后，在 finally 中无法解锁。\n\n说明一：如果在 lock 方法与 try 代码块之间的方法调用抛出异常，那么无法解锁，造成其它线程无法成功\n\n获取锁。\n\n说明二：如果 lock 方法在 try 代码块之内，可能由于其它方法抛出异常，导致在 finally 代码块中，unlock\n\n对未加锁的对象解锁，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），抛出\n\nIllegalMonitorStateException 异常。\n\n说明三：在 Lock 对象的 lock 方法实现中可能抛出 unchecked 异常，产生的后果与说明二相同。\n\n```java\n//正例：\nLock lock = new XxxLock();\n// ...\nlock.lock();\ntry {\n doSomething();\n doOthers();\n} finally {\n lock.unlock();\n}\n//反例：\nLock lock = new XxxLock();\n// ...\ntry {\n // 如果此处抛出异常，则直接执行 finally 代码块\n doSomething();\n // 无论加锁是否成功，finally 代码块都会执行\n lock.lock();\n doOthers();\n} finally {\n lock.unlock();\n}\n```\n\n10.【强制】在使用尝试机制来获取锁的方式中，进入业务代码块之前，必须先判断当前线程是否\n\n持有锁。锁的释放规则与锁的阻塞等待方式相同。\n\n说明：Lock 对象的 unlock 方法在执行时，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），如果\n\n当前线程不持有锁，则抛出 IllegalMonitorStateException 异常。\n\n```java\n//正例：\nLock lock = new XxxLock();\n// ...\nboolean isLocked = lock.tryLock();\nif (isLocked) {\n try {\n doSomething();\n doOthers();\n } finally {\n lock.unlock();\n } }\n```\n\n11.【强制】并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加\n\n锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。\n\n说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于\n\n3 次。\n\n12.【强制】多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛\n\n出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。\n\n#### 控制语句\n\n1.【强制】在一个 switch 块内，每个 case 要么通过 continue/break/return 等来终止，要么\n\n注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default\n\n2.【强制】当 switch 括号内的变量类型为 String 并且此变量为外部参数时，必须先进行 null\n\n判断。\n\n```java\n//反例：如下的代码输出是什么？\npublic class SwitchString {\n public static void main(String[] args) {\n method(null);\n }\n public static void method(String param) {\n switch (param) {\n // 肯定不是进入这里\n case \"sth\":\n System.out.println(\"it's sth\");\n break;\n // 也不是进入这里\n case \"null\":\n System.out.println(\"it's null\");\n break;\n // 也不是进入这里\n default:\n System.out.println(\"default\");\n }\n } }\n```\n\n3.【强制】在 if/else/for/while/do 语句中必须使用大括号。\n\n说明：即使只有一行代码，禁止不采用大括号的编码方式：if (condition) statements; \n\n4.【强制】三目运算符 condition? 表达式 1 : 表达式 2 中，高度注意表达式 1 和 2 在类型对齐\n\n时，可能抛出因自动拆箱导致的 NPE 异常。\n\n说明：以下两种场景会触发类型对齐的拆箱操作：\n\n1） 表达式 1 或表达式 2 的值只要有一个是原始类型。\n\n2） 表达式 1 或表达式 2 的值的类型不一致，会强制拆箱升级成表示范围更大的那个类型。\n\n```java\n//反例：\nInteger a = 1;\nInteger b = 2;\nInteger c = null;\nBoolean flag = false;\n// a*b 的结果是 int 类型，那么 c 会强制拆箱成 int 类型，抛出 NPE 异常\nInteger result=(flag? a*b : c)\n```\n\n5.【强制】在高并发场景中，避免使用”等于”判断作为中断或退出的条件。\n\n说明：如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件\n\n来代替。\n\n反例：判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，\n\n这样的话，活动无法终止。\n\n\n\n#### 注释规约\n\n1.【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/**内容*/格式，不得使用\n\n// xxx 方式。\n\n说明：在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE\n\n中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。\n\n2.【强制】所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释、除了返回值、参数、\n\n异常说明外，还必须指出该方法做什么事情，实现什么功能。\n\n说明：对子类的实现要求，或者调用注意事项，请一并说明。\n\n3【强制】所有的类都必须添加创建者和创建日期。\n\n说明：在设置模板时，注意 IDEA 的@author 为`${USER}`，而 eclipse 的@author 为`${user}`，大小写有\n\n区别，而日期的设置统一为 yyyy/MM/dd 的格式。\n\n```java\n正例：\n /**\n* @author yangguanbao\n* @date 2016/10/31\n*/\n```\n\n4 【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使\n\n用/* */注释，注意与代码对齐。\n\n5【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。","source":"_posts/阿里巴巴java开发手册-编程规约.md","raw":"---\ntitle: 阿里巴巴java开发手册-编程规约\ndate: 2020-08-14 09:15:55\ncategories: java开发手册\ntags: 编程规约\n---\n\n### 编程规约\n\n<!--more-->\n\n#### 命名风格\n\n##### 接口和实现类命名规则\n\n1）【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部\n\n的实现类用 Impl 的后缀与接口区别。\n\n##### 三层架构各层命名规约：\n\nA) Service/DAO 层方法命名规约\n\n1） 获取单个对象的方法用 get 做前缀。\n\n2） 获取多个对象的方法用 list 做前缀，复数形式结尾如：listObjects。 \n\n3） 获取统计值的方法用 count 做前缀。 \n\n4） 插入的方法用 save/insert 做前缀。\n\n5） 删除的方法用 remove/delete 做前缀。\n\n6） 修改的方法用 update 做前缀。\n\nB) 领域模型命名规约\n\n1） 数据对象：xxxDO，xxx 即为数据表名。\n\n2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。\n\n3） 展示对象：xxxVO，xxx 一般为网页名称。\n\n4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。\n\n####  常量定义\n\n \n\n【强制】不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。\n\n反例：String key = \"Id#taobao_\" + tradeId;\n\n cache.put(key, value);\n\n#### 代码格式\n\n##### 换行\n\n【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果\n\n是非空代码块则：\n\n1） 左大括号前不换行。\n\n2） 左大括号后换行。\n\n3） 右大括号前换行。\n\n4） 右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行。\n\n##### 空格\n\n1【强制】左小括号和字符之间不出现空格；同样，右小括号和字符之间也不出现空格；而左大\n\n括号前需要空格。详见第 5 条下方正例提示。\n\n反例：if (空格 a == b 空格)\n\n2【强制】if/for/while/switch/do 等保留字与括号之间都必须加空格。\n\n3【强制】任何二目、三目运算符的左右两边都需要加一个空格。\n\n说明：运算符包括赋值运算符=、逻辑运算符&&、加减乘除符号等\n\n4 \n\n【强制】采用 4 个空格缩进，禁止使用 tab 字符。\n\n说明：如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，\n\n请勿勾选 Use tab character；而在 eclipse 中，必须勾选 insert spaces for tabs。\n\n```java\n正例： \npublic static void main(String[] args) { \n// 缩进 4 个空格 \nString say = \"hello\"; \n// 运算符的左右必须有一个空格 \nint flag = 0; \n// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格 \nif (flag == 0) { \nSystem.out.println(say); \n} \n// 左大括号前加空格且不换行；左大括号后换行 \nif (flag == 1) { \nSystem.out.println(\"world\"); \n// 右大括号前换行，右大括号后有 else，不用换行 \n} else { \nSystem.out.println(\"ok\"); \n// 在右大括号后直接结束，则必须换行 \n} \n}\n```\n\n5【强制】注释的双斜线与注释内容之间有且仅有一个空格\n\n```java\n正例：\n// 这是示例注释，请注意在双斜线之后有一个空格\nString ygb = new String();\n```\n\n6【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：\n\n1） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。\n\n2） 运算符与下文一起换行。\n\n3） 方法调用的点符号与下文一起换行。\n\n4） 方法调用中的多个参数需要换行时，在逗号后进行。 \n\n5） 在括号前不要换行，见反例\n\n```java\n//正例：\nStringBuffer sb = new StringBuffer(); \n// 超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行\nsb.append(\"zi\").append(\"xin\")... \n.append(\"huang\")... \n.append(\"huang\")... \n.append(\"huang\");\n反例：\nStringBuffer sb = new StringBuffer(); \n// 超过 120 个字符的情况下，不要在括号前换行\nsb.append(\"zi\").append(\"xin\")...append \n(\"huang\"); \n// 参数很多的方法调用可能超过 120 个字符，不要在逗号前换行\nmethod(args1, args2, args3, ... \n, argsX);\n```\n\n7【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。\n\n```java\n//正例：下例中实参的 args1，后边必须要有一个空格。\nmethod(args1, args2, args3);\n```\n\n8【强制】IDE 的 text file encoding 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，\n\n不要使用 Windows 格式。\n\n#### OOP规约\n\n1. 【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成\n\n本，直接用类名来访问即可。\n\n2. 【强制】所有的覆写方法，必须加@Override 注解。\n\n说明：getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override\n\n可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编\n\n译报错。\n\n3. 【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。\n\n说明：可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数编程）\n\n正例：public List<User> listUsers(String type, Long... ids) {...}\n\n4. 【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生\n\n影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。\n\n5. 【强制】不能使用过时的类或方法。\n\n说明：java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应\n\n该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，\n\n那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。\n\n6. 【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用\n\nequals。\n\n正例：\"test\".equals(object);\n\n反例：object.equals(\"test\");\n\n说明：推荐使用 java.util.Objects#equals（JDK7 引入的工具类）\n\n7. 【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。\n\n说明：对于 Integer var = ? 在-128 至 127 范围内的赋值，Integer 对象是在\n\nIntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行\n\n判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，\n\n推荐使用 equals 方法进行判断\n\n8. 关于基本数据类型与包装数据类型的使用标准如下：\n\n1） 【强制】所有的 POJO 类属性必须使用包装数据类型。\n\n2） 【强制】RPC 方法的返回值和参数必须使用包装数据类型。\n\n3） 【推荐】所有的局部变量使用基本数据类型。\n\n说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何\n\nNPE 问题，或者入库检查，都由使用者来保证。\n\n正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。\n\n反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用\n\n不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装\n\n数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出\n\n9. 【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。\n\n反例：POJO 类的 gmtCreate 默认值为 new Date()，但是这个属性在数据提取时并没有置入具\n\n体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。\n\n10. 【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如\n\n果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。\n\n说明：注意 serialVersionUID 不一致会抛出序列化运行时异常。\n\n11. 【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。\n12. 【强制】POJO 类必须写 toString 方法。使用 IDE 中的工具：source> generate toString  时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。\n13. 【强制】禁止在 POJO 类中，同时存在对应属性 xxx 的 isXxx()和 getXxx()方法。\n\n说明：框架在调用属性 xxx 的提取方法时，并不能确定哪个方法一定是被优先调用到，神坑之一。\n\n#### 日期时间\n\n1.【强制】日期格式化时，传入 pattern 中表示年份统一使用小写的 y。\n\n说明：日期格式化时，yyyy 表示当天所在的年，而大写的 YYYY 代表是 week in which year（JDK7 之后\n\n引入的概念），意思是当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，返回的 YYYY\n\n就是下一年。\n\n```java\n//正例：表示日期和时间的格式如下所示：\nnew SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n```\n\n2.【强制】在日期格式中分清楚大写的 M 和小写的 m，大写的 H 和小写的 h 分别指代的意义。\n\n说明：日期格式中的这两对字母表意如下：\n\n1） 表示月份是大写的 M； \n\n2） 表示分钟则是小写的 m； \n\n3） 24 小时制的是大写的 H； \n\n4） 12 小时制的则是小写的 h。\n\n3.【强制】获取当前毫秒数：System.currentTimeMillis(); 而不是 new Date().getTime()。\n\n说明：如果想获取更加精确的纳秒级时间值，使用 System.nanoTime 的方式。在 JDK8 中，针对统计时间\n\n等场景，推荐使用 Instant 类。\n\n4.【强制】不允许在程序任何地方中使用：1）java.sql.Date 2）java.sql.Time 3）\n\njava.sql.Timestamp。\n\n说明：第 1 个不记录时间，getHours()抛出异常；第 2 个不记录日期，getYear()抛出异常；第 3 个在构造\n\n方法 super((time/1000)*1000)，fastTime 和 nanos 分开存储秒和纳秒信息。\n\n反例： java.util.Date.after(Date)进行时间比较时，当入参是 java.sql.Timestamp 时，会触发 JDK \n\nBUG(JDK9 已修复)，可能导致比较时的意外结果\n\n5.【强制】不要在程序中写死一年为 365 天，避免在公历闰年时出现日期转换错误或程序逻辑\n\n错误。\n\n\n\n#### 集合处理\n\n1.【强制】关于 hashCode 和 equals 的处理，遵循如下规则：\n\n1） 只要重写 equals，就必须重写 hashCode。 \n\n2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写\n\n这两个方法。\n\n3） 如果自定义对象作为 Map 的键，那么必须覆写 hashCode 和 equals。\n\n说明：String 因为重写了 hashCode 和 equals 方法，所以我们可以愉快地使用 String 对象作为 key 来使\n\n用。\n\n2.【强制】判断所有集合内部的元素是否为空，使用 isEmpty()方法，而不是 size()==0 的方式。\n\n说明：前者的时间复杂度为 O(1)，而且可读性更好。\n\n```java\n//正例：\nMap<String, Object> map = new HashMap<>();\nif(map.isEmpty()) {\n System.out.println(\"no element in this map.\");\n}\n```\n\n3.【强制】在使用 java.util.stream.Collectors 类的 toMap()方法转为 Map 集合时，一定要使\n\n用含有参数类型为 BinaryOperator，参数名为 mergeFunction 的方法，否则当出现相同 key\n\n值时会抛出 IllegalStateException 异常。\n\n说明：参数 mergeFunction 的作用是当出现 key 重复时，自定义对 value 的处理策略。\n\n```java\n//正例：\nList<Pair<String, Double>> pairArrayList = new ArrayList<>(3);\npairArrayList.add(new Pair<>(\"version\", 6.19));\npairArrayList.add(new Pair<>(\"version\", 10.24));\npairArrayList.add(new Pair<>(\"version\", 13.14));\nMap<String, Double> map = pairArrayList.stream().collect(\n// 生成的 map 集合中只有一个键值对：{version=13.14}\nCollectors.toMap(Pair::getKey, Pair::getValue, (v1, v2) -> v2));\n//反例：\nString[] departments = new String[] {\"iERP\", \"iERP\", \"EIBU\"};\n// 抛出 IllegalStateException 异常\nMap<Integer, String> map = Arrays.stream(departments)\n .collect(Collectors.toMap(String::hashCode, str -> str))\n```\n\n4.【强制】在使用 java.util.stream.Collectors 类的 toMap()方法转为 Map 集合时，一定要注\n\n意当 value 为 null 时会抛 NPE 异常。\n\n```java\n//说明：在 java.util.HashMap 的 merge 方法里会进行如下的判断：\nif (value == null || remappingFunction == null)\nthrow new NullPointerException();\n//反例：\nList<Pair<String, Double>> pairArrayList = new ArrayList<>(2);\npairArrayList.add(new Pair<>(\"version1\", 4.22));\npairArrayList.add(new Pair<>(\"version2\", null));\nMap<String, Double> map = pairArrayList.stream().collect(\n// 抛出 NullPointerException 异常\nCollectors.toMap(Pair::getKey, Pair::getValue, (v1, v2) -> v2));\n```\n\n5.【强制】ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClassCastException 异 \n\n常：java.util.RandomAccessSubList cannot be cast to java.util.ArrayList。\n\n说明：subList 返回的是 ArrayList 的内部类 SubList，并不是 ArrayList 而是 ArrayList 的一个视图，对\n\n于 SubList 子列表的所有操作最终会反映到原列表上。\n\n6.【强制】使用 Map 的方法 keySet()/values()/entrySet()返回集合对象时，不可以对其进行添\n\n加元素操作，否则会抛出 UnsupportedOperationException 异常。\n\n7.【强制】Collections 类返回的对象，如：emptyList()/singletonList()等都是 immutable list，\n\n不可对其进行添加或者删除元素的操作。\n\n反例：如果查询无结果，返回 Collections.emptyList()空集合对象，调用方一旦进行了添加元素的操作，就\n\n会触发 UnsupportedOperationException 异常。\n\n8.【强制】在 subList 场景中，高度注意对父集合元素的增加或删除，均会导致子列表的遍历、\n\n增加、删除产生 ConcurrentModificationException 异常。\n\n9.【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一\n\n致、长度为 0 的空数组。\n\n反例：直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现\n\nClassCastException 错误。\n\n```java\n//正例：\nList<String> list = new ArrayList<>(2);\nlist.add(\"guan\");\nlist.add(\"bao\");\nString[] array = list.toArray(new String[0]);\n```\n\n 说明：使用 toArray 带参方法，数组空间大小的 length， \n\n1） 等于 0，动态创建与 size 相同的数组，性能最好。\n\n2） 大于 0 但小于 size，重新创建大小等于 size 的数组，增加 GC 负担。\n\n3） 等于 size，在高并发情况下，数组创建完成之后，size 正在变大的情况下，负面影响与 2 相同。\n\n4） 大于 size，空间浪费，且在 size 处插入 null 值，存在 NPE 隐患。\n\n10.【强制】在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行\n\nNPE 判断。\n\n说明：在 ArrayList#addAll 方法的第一行代码即 Object[] a = c.toArray(); 其中 c 为输入集合参数，如果\n\n为 null，则直接抛出异常。\n\n11.【强制】使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，\n\n它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。\n\n说明：asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList 体现的是适配\n\n器模式，只是转换接口，后台的数据仍是数组。\n\n```java\n String[] str = new String[] { \"yang\", \"hao\" };\n List list = Arrays.asList(str);\n//第一种情况：list.add(\"yangguanbao\"); 运行时异常。\n//第二种情况：str[0] = \"changed\"; 也会随之修改，反之亦然。\n```\n\n12 【强制】泛型通配符<? extends T>来接收返回的数据，此写法的泛型集合不能使用 add 方法， \n\n而<? super T>不能使用 get 方法，两者在接口调用赋值的场景中容易出错。\n\n说明：扩展说一下 PECS(Producer Extends Consumer Super)原则：第一、频繁往外读取内容的，适合用\n\n<? extends T>。第二、经常往里插入的，适合用<? super T>\n\n13.【强制】在无泛型限制定义的集合赋值给泛型限制的集合时，在使用集合元素时，需要进行\n\ninstanceof 判断，避免抛出 ClassCastException 异常。\n\n说明：毕竟泛型是在 JDK5 后才出现，考虑到向前兼容，编译器是允许非泛型集合与泛型集合互相赋值。\n\n```java\n//反例：\nList<String> generics = null;\nList notGenerics = new ArrayList(10);\nnotGenerics.add(new Object());\nnotGenerics.add(new Integer(1));\ngenerics = notGenerics;\n// 此处抛出 ClassCastException 异常\nString string = generics.get(0);\n```\n\n14.【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator\n\n方式，如果并发操作，需要对 Iterator 对象加锁。\n\n\n\n```java\n/*说明：三个条件如下 \n*1） x，y 的比较结果和 y，x 的比较结果相反。\n*2） x>y，y>z，则 x>z。 \n*3） x=y，则 x，z 比较结果和 y，z 比较结果相同。\n**/\n//反例：下例中没有处理相等的情况，交换两个对象判断结果并不互反，不符合第一个条件，在实际使用中可能会出现异常。\nnew Comparator<Student>() {\n @Override\n public int compare(Student o1, Student o2) {\n return o1.getId() > o2.getId() ? 1 : -1;\n }\n};\n```\n\n\n\n#### 并发处理\n\n1.【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。\n\n说明：资源驱动类、工具类、单例工厂类都需要注意。\n\n2.【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。\n\n正例：自定义线程工厂，并且根据外部特征进行分组，比如，来自同一机房的调用，把机房编号赋值给\n\nwhatFeaturOfGroup\n\n```java\npublic class UserThreadFactory implements ThreadFactory {\n private final String namePrefix;\n private final AtomicInteger nextId = new AtomicInteger(1);\n // 定义线程组名称，在 jstack 问题排查时，非常有帮助\n UserThreadFactory(String whatFeaturOfGroup) {\n namePrefix = \"From UserThreadFactory's \" + whatFeaturOfGroup + \"-Worker-\";\n }\n @Override\n public Thread newThread(Runnable task) {\n String name = namePrefix + nextId.getAndIncrement();\n Thread thread = new Thread(null, task, name, 0, false);\n System.out.println(thread.getName());\n return thread;\n } }\n```\n\n3.【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。\n\n说明：线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。\n\n如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\n\n4.【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这\n\n样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。\n\n说明：Executors 返回的线程池对象的弊端如下： \n\n1） FixedThreadPool 和 SingleThreadPool：\n\n允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。 \n\n2） CachedThreadPool：\n\n允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。\n\n5.【强制】SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为 static，\n\n必须加锁，或者使用 DateUtils 工具类。\n\n```java\n//正例：注意线程安全，使用 DateUtils。亦推荐如下处理：\nprivate static final ThreadLocal<DateFormat> df = new ThreadLocal<DateFormat>() {\n @Override\n protected DateFormat initialValue() {\n return new SimpleDateFormat(\"yyyy-MM-dd\");\n }\n};\n\n```\n\n6.【强制】必须回收自定义的 ThreadLocal 变量，尤其在线程池场景下，线程经常会被复用，\n\n如果不清理自定义的 ThreadLocal 变量，可能会影响后续业务逻辑和造成内存泄露等问题。\n\n尽量在代理中使用 try-finally 块进行回收。\n\n```java\n//正例：\nobjectThreadLocal.set(userInfo);\ntry {\n // ...\n} finally {\n objectThreadLocal.remove();\n}\n```\n\n7.【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能\n\n锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。\n\n说明：尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。\n\n8.【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造\n\n成死锁。\n\n说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、 \n\nB、C，否则可能出现死锁。\n\n9.【强制】在使用阻塞等待获取锁的方式中，必须在 try 代码块之外，并且在加锁方法与 try 代\n\n码块之间没有任何可能抛出异常的方法调用，避免加锁成功后，在 finally 中无法解锁。\n\n说明一：如果在 lock 方法与 try 代码块之间的方法调用抛出异常，那么无法解锁，造成其它线程无法成功\n\n获取锁。\n\n说明二：如果 lock 方法在 try 代码块之内，可能由于其它方法抛出异常，导致在 finally 代码块中，unlock\n\n对未加锁的对象解锁，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），抛出\n\nIllegalMonitorStateException 异常。\n\n说明三：在 Lock 对象的 lock 方法实现中可能抛出 unchecked 异常，产生的后果与说明二相同。\n\n```java\n//正例：\nLock lock = new XxxLock();\n// ...\nlock.lock();\ntry {\n doSomething();\n doOthers();\n} finally {\n lock.unlock();\n}\n//反例：\nLock lock = new XxxLock();\n// ...\ntry {\n // 如果此处抛出异常，则直接执行 finally 代码块\n doSomething();\n // 无论加锁是否成功，finally 代码块都会执行\n lock.lock();\n doOthers();\n} finally {\n lock.unlock();\n}\n```\n\n10.【强制】在使用尝试机制来获取锁的方式中，进入业务代码块之前，必须先判断当前线程是否\n\n持有锁。锁的释放规则与锁的阻塞等待方式相同。\n\n说明：Lock 对象的 unlock 方法在执行时，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），如果\n\n当前线程不持有锁，则抛出 IllegalMonitorStateException 异常。\n\n```java\n//正例：\nLock lock = new XxxLock();\n// ...\nboolean isLocked = lock.tryLock();\nif (isLocked) {\n try {\n doSomething();\n doOthers();\n } finally {\n lock.unlock();\n } }\n```\n\n11.【强制】并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加\n\n锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。\n\n说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于\n\n3 次。\n\n12.【强制】多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛\n\n出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。\n\n#### 控制语句\n\n1.【强制】在一个 switch 块内，每个 case 要么通过 continue/break/return 等来终止，要么\n\n注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default\n\n2.【强制】当 switch 括号内的变量类型为 String 并且此变量为外部参数时，必须先进行 null\n\n判断。\n\n```java\n//反例：如下的代码输出是什么？\npublic class SwitchString {\n public static void main(String[] args) {\n method(null);\n }\n public static void method(String param) {\n switch (param) {\n // 肯定不是进入这里\n case \"sth\":\n System.out.println(\"it's sth\");\n break;\n // 也不是进入这里\n case \"null\":\n System.out.println(\"it's null\");\n break;\n // 也不是进入这里\n default:\n System.out.println(\"default\");\n }\n } }\n```\n\n3.【强制】在 if/else/for/while/do 语句中必须使用大括号。\n\n说明：即使只有一行代码，禁止不采用大括号的编码方式：if (condition) statements; \n\n4.【强制】三目运算符 condition? 表达式 1 : 表达式 2 中，高度注意表达式 1 和 2 在类型对齐\n\n时，可能抛出因自动拆箱导致的 NPE 异常。\n\n说明：以下两种场景会触发类型对齐的拆箱操作：\n\n1） 表达式 1 或表达式 2 的值只要有一个是原始类型。\n\n2） 表达式 1 或表达式 2 的值的类型不一致，会强制拆箱升级成表示范围更大的那个类型。\n\n```java\n//反例：\nInteger a = 1;\nInteger b = 2;\nInteger c = null;\nBoolean flag = false;\n// a*b 的结果是 int 类型，那么 c 会强制拆箱成 int 类型，抛出 NPE 异常\nInteger result=(flag? a*b : c)\n```\n\n5.【强制】在高并发场景中，避免使用”等于”判断作为中断或退出的条件。\n\n说明：如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件\n\n来代替。\n\n反例：判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，\n\n这样的话，活动无法终止。\n\n\n\n#### 注释规约\n\n1.【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/**内容*/格式，不得使用\n\n// xxx 方式。\n\n说明：在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE\n\n中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。\n\n2.【强制】所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释、除了返回值、参数、\n\n异常说明外，还必须指出该方法做什么事情，实现什么功能。\n\n说明：对子类的实现要求，或者调用注意事项，请一并说明。\n\n3【强制】所有的类都必须添加创建者和创建日期。\n\n说明：在设置模板时，注意 IDEA 的@author 为`${USER}`，而 eclipse 的@author 为`${user}`，大小写有\n\n区别，而日期的设置统一为 yyyy/MM/dd 的格式。\n\n```java\n正例：\n /**\n* @author yangguanbao\n* @date 2016/10/31\n*/\n```\n\n4 【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使\n\n用/* */注释，注意与代码对齐。\n\n5【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。","slug":"阿里巴巴java开发手册-编程规约","published":1,"updated":"2020-09-07T04:24:13.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgevbbov004hg0v804ycb6hl","content":"<h3 id=\"编程规约\"><a href=\"#编程规约\" class=\"headerlink\" title=\"编程规约\"></a>编程规约</h3><a id=\"more\"></a>\n\n<h4 id=\"命名风格\"><a href=\"#命名风格\" class=\"headerlink\" title=\"命名风格\"></a>命名风格</h4><h5 id=\"接口和实现类命名规则\"><a href=\"#接口和实现类命名规则\" class=\"headerlink\" title=\"接口和实现类命名规则\"></a>接口和实现类命名规则</h5><p>1）【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部</p>\n<p>的实现类用 Impl 的后缀与接口区别。</p>\n<h5 id=\"三层架构各层命名规约：\"><a href=\"#三层架构各层命名规约：\" class=\"headerlink\" title=\"三层架构各层命名规约：\"></a>三层架构各层命名规约：</h5><p>A) Service/DAO 层方法命名规约</p>\n<p>1） 获取单个对象的方法用 get 做前缀。</p>\n<p>2） 获取多个对象的方法用 list 做前缀，复数形式结尾如：listObjects。 </p>\n<p>3） 获取统计值的方法用 count 做前缀。 </p>\n<p>4） 插入的方法用 save/insert 做前缀。</p>\n<p>5） 删除的方法用 remove/delete 做前缀。</p>\n<p>6） 修改的方法用 update 做前缀。</p>\n<p>B) 领域模型命名规约</p>\n<p>1） 数据对象：xxxDO，xxx 即为数据表名。</p>\n<p>2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。</p>\n<p>3） 展示对象：xxxVO，xxx 一般为网页名称。</p>\n<p>4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</p>\n<h4 id=\"常量定义\"><a href=\"#常量定义\" class=\"headerlink\" title=\"常量定义\"></a>常量定义</h4><p>【强制】不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。</p>\n<p>反例：String key = “Id#taobao_” + tradeId;</p>\n<p> cache.put(key, value);</p>\n<h4 id=\"代码格式\"><a href=\"#代码格式\" class=\"headerlink\" title=\"代码格式\"></a>代码格式</h4><h5 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h5><p>【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果</p>\n<p>是非空代码块则：</p>\n<p>1） 左大括号前不换行。</p>\n<p>2） 左大括号后换行。</p>\n<p>3） 右大括号前换行。</p>\n<p>4） 右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行。</p>\n<h5 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h5><p>1【强制】左小括号和字符之间不出现空格；同样，右小括号和字符之间也不出现空格；而左大</p>\n<p>括号前需要空格。详见第 5 条下方正例提示。</p>\n<p>反例：if (空格 a == b 空格)</p>\n<p>2【强制】if/for/while/switch/do 等保留字与括号之间都必须加空格。</p>\n<p>3【强制】任何二目、三目运算符的左右两边都需要加一个空格。</p>\n<p>说明：运算符包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号等</p>\n<p>4 </p>\n<p>【强制】采用 4 个空格缩进，禁止使用 tab 字符。</p>\n<p>说明：如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，</p>\n<p>请勿勾选 Use tab character；而在 eclipse 中，必须勾选 insert spaces for tabs。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正例： </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\"><span class=\"comment\">// 缩进 4 个空格 </span></span><br><span class=\"line\">String say = <span class=\"string\">\"hello\"</span>; </span><br><span class=\"line\"><span class=\"comment\">// 运算符的左右必须有一个空格 </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"comment\">// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (flag == <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">System.out.println(say); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// 左大括号前加空格且不换行；左大括号后换行 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) &#123; </span><br><span class=\"line\">System.out.println(<span class=\"string\">\"world\"</span>); </span><br><span class=\"line\"><span class=\"comment\">// 右大括号前换行，右大括号后有 else，不用换行 </span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">System.out.println(<span class=\"string\">\"ok\"</span>); </span><br><span class=\"line\"><span class=\"comment\">// 在右大括号后直接结束，则必须换行 </span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5【强制】注释的双斜线与注释内容之间有且仅有一个空格</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正例：</span><br><span class=\"line\"><span class=\"comment\">// 这是示例注释，请注意在双斜线之后有一个空格</span></span><br><span class=\"line\">String ygb = <span class=\"keyword\">new</span> String();</span><br></pre></td></tr></table></figure>\n\n<p>6【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：</p>\n<p>1） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。</p>\n<p>2） 运算符与下文一起换行。</p>\n<p>3） 方法调用的点符号与下文一起换行。</p>\n<p>4） 方法调用中的多个参数需要换行时，在逗号后进行。 </p>\n<p>5） 在括号前不要换行，见反例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：</span></span><br><span class=\"line\">StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(); </span><br><span class=\"line\"><span class=\"comment\">// 超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行</span></span><br><span class=\"line\">sb.append(<span class=\"string\">\"zi\"</span>).append(<span class=\"string\">\"xin\"</span>)... </span><br><span class=\"line\">.append(<span class=\"string\">\"huang\"</span>)... </span><br><span class=\"line\">.append(<span class=\"string\">\"huang\"</span>)... </span><br><span class=\"line\">.append(<span class=\"string\">\"huang\"</span>);</span><br><span class=\"line\">反例：</span><br><span class=\"line\">StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(); </span><br><span class=\"line\"><span class=\"comment\">// 超过 120 个字符的情况下，不要在括号前换行</span></span><br><span class=\"line\">sb.append(<span class=\"string\">\"zi\"</span>).append(<span class=\"string\">\"xin\"</span>)...append </span><br><span class=\"line\">(<span class=\"string\">\"huang\"</span>); </span><br><span class=\"line\"><span class=\"comment\">// 参数很多的方法调用可能超过 120 个字符，不要在逗号前换行</span></span><br><span class=\"line\">method(args1, args2, args3, ... </span><br><span class=\"line\">, argsX);</span><br></pre></td></tr></table></figure>\n\n<p>7【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：下例中实参的 args1，后边必须要有一个空格。</span></span><br><span class=\"line\">method(args1, args2, args3);</span><br></pre></td></tr></table></figure>\n\n<p>8【强制】IDE 的 text file encoding 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，</p>\n<p>不要使用 Windows 格式。</p>\n<h4 id=\"OOP规约\"><a href=\"#OOP规约\" class=\"headerlink\" title=\"OOP规约\"></a>OOP规约</h4><ol>\n<li>【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成</li>\n</ol>\n<p>本，直接用类名来访问即可。</p>\n<ol start=\"2\">\n<li>【强制】所有的覆写方法，必须加@Override 注解。</li>\n</ol>\n<p>说明：getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override</p>\n<p>可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编</p>\n<p>译报错。</p>\n<ol start=\"3\">\n<li>【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。</li>\n</ol>\n<p>说明：可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数编程）</p>\n<p>正例：public List<User> listUsers(String type, Long… ids) {…}</p>\n<ol start=\"4\">\n<li>【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生</li>\n</ol>\n<p>影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</p>\n<ol start=\"5\">\n<li>【强制】不能使用过时的类或方法。</li>\n</ol>\n<p>说明：java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应</p>\n<p>该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，</p>\n<p>那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。</p>\n<ol start=\"6\">\n<li>【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用</li>\n</ol>\n<p>equals。</p>\n<p>正例：”test”.equals(object);</p>\n<p>反例：object.equals(“test”);</p>\n<p>说明：推荐使用 java.util.Objects#equals（JDK7 引入的工具类）</p>\n<ol start=\"7\">\n<li>【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。</li>\n</ol>\n<p>说明：对于 Integer var = ? 在-128 至 127 范围内的赋值，Integer 对象是在</p>\n<p>IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行</p>\n<p>判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，</p>\n<p>推荐使用 equals 方法进行判断</p>\n<ol start=\"8\">\n<li>关于基本数据类型与包装数据类型的使用标准如下：</li>\n</ol>\n<p>1） 【强制】所有的 POJO 类属性必须使用包装数据类型。</p>\n<p>2） 【强制】RPC 方法的返回值和参数必须使用包装数据类型。</p>\n<p>3） 【推荐】所有的局部变量使用基本数据类型。</p>\n<p>说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何</p>\n<p>NPE 问题，或者入库检查，都由使用者来保证。</p>\n<p>正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</p>\n<p>反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用</p>\n<p>不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装</p>\n<p>数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出</p>\n<ol start=\"9\">\n<li>【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。</li>\n</ol>\n<p>反例：POJO 类的 gmtCreate 默认值为 new Date()，但是这个属性在数据提取时并没有置入具</p>\n<p>体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p>\n<ol start=\"10\">\n<li>【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如</li>\n</ol>\n<p>果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。</p>\n<p>说明：注意 serialVersionUID 不一致会抛出序列化运行时异常。</p>\n<ol start=\"11\">\n<li>【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</li>\n<li>【强制】POJO 类必须写 toString 方法。使用 IDE 中的工具：source&gt; generate toString  时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。</li>\n<li>【强制】禁止在 POJO 类中，同时存在对应属性 xxx 的 isXxx()和 getXxx()方法。</li>\n</ol>\n<p>说明：框架在调用属性 xxx 的提取方法时，并不能确定哪个方法一定是被优先调用到，神坑之一。</p>\n<h4 id=\"日期时间\"><a href=\"#日期时间\" class=\"headerlink\" title=\"日期时间\"></a>日期时间</h4><p>1.【强制】日期格式化时，传入 pattern 中表示年份统一使用小写的 y。</p>\n<p>说明：日期格式化时，yyyy 表示当天所在的年，而大写的 YYYY 代表是 week in which year（JDK7 之后</p>\n<p>引入的概念），意思是当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，返回的 YYYY</p>\n<p>就是下一年。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：表示日期和时间的格式如下所示：</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>2.【强制】在日期格式中分清楚大写的 M 和小写的 m，大写的 H 和小写的 h 分别指代的意义。</p>\n<p>说明：日期格式中的这两对字母表意如下：</p>\n<p>1） 表示月份是大写的 M； </p>\n<p>2） 表示分钟则是小写的 m； </p>\n<p>3） 24 小时制的是大写的 H； </p>\n<p>4） 12 小时制的则是小写的 h。</p>\n<p>3.【强制】获取当前毫秒数：System.currentTimeMillis(); 而不是 new Date().getTime()。</p>\n<p>说明：如果想获取更加精确的纳秒级时间值，使用 System.nanoTime 的方式。在 JDK8 中，针对统计时间</p>\n<p>等场景，推荐使用 Instant 类。</p>\n<p>4.【强制】不允许在程序任何地方中使用：1）java.sql.Date 2）java.sql.Time 3）</p>\n<p>java.sql.Timestamp。</p>\n<p>说明：第 1 个不记录时间，getHours()抛出异常；第 2 个不记录日期，getYear()抛出异常；第 3 个在构造</p>\n<p>方法 super((time/1000)*1000)，fastTime 和 nanos 分开存储秒和纳秒信息。</p>\n<p>反例： java.util.Date.after(Date)进行时间比较时，当入参是 java.sql.Timestamp 时，会触发 JDK </p>\n<p>BUG(JDK9 已修复)，可能导致比较时的意外结果</p>\n<p>5.【强制】不要在程序中写死一年为 365 天，避免在公历闰年时出现日期转换错误或程序逻辑</p>\n<p>错误。</p>\n<h4 id=\"集合处理\"><a href=\"#集合处理\" class=\"headerlink\" title=\"集合处理\"></a>集合处理</h4><p>1.【强制】关于 hashCode 和 equals 的处理，遵循如下规则：</p>\n<p>1） 只要重写 equals，就必须重写 hashCode。 </p>\n<p>2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写</p>\n<p>这两个方法。</p>\n<p>3） 如果自定义对象作为 Map 的键，那么必须覆写 hashCode 和 equals。</p>\n<p>说明：String 因为重写了 hashCode 和 equals 方法，所以我们可以愉快地使用 String 对象作为 key 来使</p>\n<p>用。</p>\n<p>2.【强制】判断所有集合内部的元素是否为空，使用 isEmpty()方法，而不是 size()==0 的方式。</p>\n<p>说明：前者的时间复杂度为 O(1)，而且可读性更好。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：</span></span><br><span class=\"line\">Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(map.isEmpty()) &#123;</span><br><span class=\"line\"> System.out.println(<span class=\"string\">\"no element in this map.\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.【强制】在使用 java.util.stream.Collectors 类的 toMap()方法转为 Map 集合时，一定要使</p>\n<p>用含有参数类型为 BinaryOperator，参数名为 mergeFunction 的方法，否则当出现相同 key</p>\n<p>值时会抛出 IllegalStateException 异常。</p>\n<p>说明：参数 mergeFunction 的作用是当出现 key 重复时，自定义对 value 的处理策略。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：</span></span><br><span class=\"line\">List&lt;Pair&lt;String, Double&gt;&gt; pairArrayList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\">pairArrayList.add(<span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"string\">\"version\"</span>, <span class=\"number\">6.19</span>));</span><br><span class=\"line\">pairArrayList.add(<span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"string\">\"version\"</span>, <span class=\"number\">10.24</span>));</span><br><span class=\"line\">pairArrayList.add(<span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"string\">\"version\"</span>, <span class=\"number\">13.14</span>));</span><br><span class=\"line\">Map&lt;String, Double&gt; map = pairArrayList.stream().collect(</span><br><span class=\"line\"><span class=\"comment\">// 生成的 map 集合中只有一个键值对：&#123;version=13.14&#125;</span></span><br><span class=\"line\">Collectors.toMap(Pair::getKey, Pair::getValue, (v1, v2) -&gt; v2));</span><br><span class=\"line\"><span class=\"comment\">//反例：</span></span><br><span class=\"line\">String[] departments = <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"iERP\"</span>, <span class=\"string\">\"iERP\"</span>, <span class=\"string\">\"EIBU\"</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 抛出 IllegalStateException 异常</span></span><br><span class=\"line\">Map&lt;Integer, String&gt; map = Arrays.stream(departments)</span><br><span class=\"line\"> .collect(Collectors.toMap(String::hashCode, str -&gt; str))</span><br></pre></td></tr></table></figure>\n\n<p>4.【强制】在使用 java.util.stream.Collectors 类的 toMap()方法转为 Map 集合时，一定要注</p>\n<p>意当 value 为 null 时会抛 NPE 异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//说明：在 java.util.HashMap 的 merge 方法里会进行如下的判断：</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span> || remappingFunction == <span class=\"keyword\">null</span>)</span><br><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\"><span class=\"comment\">//反例：</span></span><br><span class=\"line\">List&lt;Pair&lt;String, Double&gt;&gt; pairArrayList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\">pairArrayList.add(<span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"string\">\"version1\"</span>, <span class=\"number\">4.22</span>));</span><br><span class=\"line\">pairArrayList.add(<span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"string\">\"version2\"</span>, <span class=\"keyword\">null</span>));</span><br><span class=\"line\">Map&lt;String, Double&gt; map = pairArrayList.stream().collect(</span><br><span class=\"line\"><span class=\"comment\">// 抛出 NullPointerException 异常</span></span><br><span class=\"line\">Collectors.toMap(Pair::getKey, Pair::getValue, (v1, v2) -&gt; v2));</span><br></pre></td></tr></table></figure>\n\n<p>5.【强制】ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClassCastException 异 </p>\n<p>常：java.util.RandomAccessSubList cannot be cast to java.util.ArrayList。</p>\n<p>说明：subList 返回的是 ArrayList 的内部类 SubList，并不是 ArrayList 而是 ArrayList 的一个视图，对</p>\n<p>于 SubList 子列表的所有操作最终会反映到原列表上。</p>\n<p>6.【强制】使用 Map 的方法 keySet()/values()/entrySet()返回集合对象时，不可以对其进行添</p>\n<p>加元素操作，否则会抛出 UnsupportedOperationException 异常。</p>\n<p>7.【强制】Collections 类返回的对象，如：emptyList()/singletonList()等都是 immutable list，</p>\n<p>不可对其进行添加或者删除元素的操作。</p>\n<p>反例：如果查询无结果，返回 Collections.emptyList()空集合对象，调用方一旦进行了添加元素的操作，就</p>\n<p>会触发 UnsupportedOperationException 异常。</p>\n<p>8.【强制】在 subList 场景中，高度注意对父集合元素的增加或删除，均会导致子列表的遍历、</p>\n<p>增加、删除产生 ConcurrentModificationException 异常。</p>\n<p>9.【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一</p>\n<p>致、长度为 0 的空数组。</p>\n<p>反例：直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现</p>\n<p>ClassCastException 错误。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：</span></span><br><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"guan\"</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"bao\"</span>);</span><br><span class=\"line\">String[] array = list.toArray(<span class=\"keyword\">new</span> String[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n\n<p> 说明：使用 toArray 带参方法，数组空间大小的 length， </p>\n<p>1） 等于 0，动态创建与 size 相同的数组，性能最好。</p>\n<p>2） 大于 0 但小于 size，重新创建大小等于 size 的数组，增加 GC 负担。</p>\n<p>3） 等于 size，在高并发情况下，数组创建完成之后，size 正在变大的情况下，负面影响与 2 相同。</p>\n<p>4） 大于 size，空间浪费，且在 size 处插入 null 值，存在 NPE 隐患。</p>\n<p>10.【强制】在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行</p>\n<p>NPE 判断。</p>\n<p>说明：在 ArrayList#addAll 方法的第一行代码即 Object[] a = c.toArray(); 其中 c 为输入集合参数，如果</p>\n<p>为 null，则直接抛出异常。</p>\n<p>11.【强制】使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，</p>\n<p>它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。</p>\n<p>说明：asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList 体现的是适配</p>\n<p>器模式，只是转换接口，后台的数据仍是数组。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> String[] str = <span class=\"keyword\">new</span> String[] &#123; <span class=\"string\">\"yang\"</span>, <span class=\"string\">\"hao\"</span> &#125;;</span><br><span class=\"line\"> List list = Arrays.asList(str);</span><br><span class=\"line\"><span class=\"comment\">//第一种情况：list.add(\"yangguanbao\"); 运行时异常。</span></span><br><span class=\"line\"><span class=\"comment\">//第二种情况：str[0] = \"changed\"; 也会随之修改，反之亦然。</span></span><br></pre></td></tr></table></figure>\n\n<p>12 【强制】泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用 add 方法， </p>\n<p>而&lt;? super T&gt;不能使用 get 方法，两者在接口调用赋值的场景中容易出错。</p>\n<p>说明：扩展说一下 PECS(Producer Extends Consumer Super)原则：第一、频繁往外读取内容的，适合用</p>\n<p>&lt;? extends T&gt;。第二、经常往里插入的，适合用&lt;? super T&gt;</p>\n<p>13.【强制】在无泛型限制定义的集合赋值给泛型限制的集合时，在使用集合元素时，需要进行</p>\n<p>instanceof 判断，避免抛出 ClassCastException 异常。</p>\n<p>说明：毕竟泛型是在 JDK5 后才出现，考虑到向前兼容，编译器是允许非泛型集合与泛型集合互相赋值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//反例：</span></span><br><span class=\"line\">List&lt;String&gt; generics = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">List notGenerics = <span class=\"keyword\">new</span> ArrayList(<span class=\"number\">10</span>);</span><br><span class=\"line\">notGenerics.add(<span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">notGenerics.add(<span class=\"keyword\">new</span> Integer(<span class=\"number\">1</span>));</span><br><span class=\"line\">generics = notGenerics;</span><br><span class=\"line\"><span class=\"comment\">// 此处抛出 ClassCastException 异常</span></span><br><span class=\"line\">String string = generics.get(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>14.【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator</p>\n<p>方式，如果并发操作，需要对 Iterator 对象加锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*说明：三个条件如下 </span></span><br><span class=\"line\"><span class=\"comment\">*1） x，y 的比较结果和 y，x 的比较结果相反。</span></span><br><span class=\"line\"><span class=\"comment\">*2） x&gt;y，y&gt;z，则 x&gt;z。 </span></span><br><span class=\"line\"><span class=\"comment\">*3） x=y，则 x，z 比较结果和 y，z 比较结果相同。</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"comment\">//反例：下例中没有处理相等的情况，交换两个对象判断结果并不互反，不符合第一个条件，在实际使用中可能会出现异常。</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Student o1, Student o2)</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> o1.getId() &gt; o2.getId() ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"并发处理\"><a href=\"#并发处理\" class=\"headerlink\" title=\"并发处理\"></a>并发处理</h4><p>1.【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。</p>\n<p>说明：资源驱动类、工具类、单例工厂类都需要注意。</p>\n<p>2.【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</p>\n<p>正例：自定义线程工厂，并且根据外部特征进行分组，比如，来自同一机房的调用，把机房编号赋值给</p>\n<p>whatFeaturOfGroup</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserThreadFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ThreadFactory</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String namePrefix;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicInteger nextId = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">1</span>);</span><br><span class=\"line\"> <span class=\"comment\">// 定义线程组名称，在 jstack 问题排查时，非常有帮助</span></span><br><span class=\"line\"> UserThreadFactory(String whatFeaturOfGroup) &#123;</span><br><span class=\"line\"> namePrefix = <span class=\"string\">\"From UserThreadFactory's \"</span> + whatFeaturOfGroup + <span class=\"string\">\"-Worker-\"</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable task)</span> </span>&#123;</span><br><span class=\"line\"> String name = namePrefix + nextId.getAndIncrement();</span><br><span class=\"line\"> Thread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">null</span>, task, name, <span class=\"number\">0</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\"> System.out.println(thread.getName());</span><br><span class=\"line\"> <span class=\"keyword\">return</span> thread;</span><br><span class=\"line\"> &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</p>\n<p>说明：线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。</p>\n<p>如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p>\n<p>4.【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这</p>\n<p>样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p>\n<p>说明：Executors 返回的线程池对象的弊端如下： </p>\n<p>1） FixedThreadPool 和 SingleThreadPool：</p>\n<p>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。 </p>\n<p>2） CachedThreadPool：</p>\n<p>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p>\n<p>5.【强制】SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为 static，</p>\n<p>必须加锁，或者使用 DateUtils 工具类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：注意线程安全，使用 DateUtils。亦推荐如下处理：</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class=\"keyword\">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> DateFormat <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>6.【强制】必须回收自定义的 ThreadLocal 变量，尤其在线程池场景下，线程经常会被复用，</p>\n<p>如果不清理自定义的 ThreadLocal 变量，可能会影响后续业务逻辑和造成内存泄露等问题。</p>\n<p>尽量在代理中使用 try-finally 块进行回收。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：</span></span><br><span class=\"line\">objectThreadLocal.set(userInfo);</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"> objectThreadLocal.remove();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7.【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能</p>\n<p>锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。</p>\n<p>说明：尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。</p>\n<p>8.【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造</p>\n<p>成死锁。</p>\n<p>说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、 </p>\n<p>B、C，否则可能出现死锁。</p>\n<p>9.【强制】在使用阻塞等待获取锁的方式中，必须在 try 代码块之外，并且在加锁方法与 try 代</p>\n<p>码块之间没有任何可能抛出异常的方法调用，避免加锁成功后，在 finally 中无法解锁。</p>\n<p>说明一：如果在 lock 方法与 try 代码块之间的方法调用抛出异常，那么无法解锁，造成其它线程无法成功</p>\n<p>获取锁。</p>\n<p>说明二：如果 lock 方法在 try 代码块之内，可能由于其它方法抛出异常，导致在 finally 代码块中，unlock</p>\n<p>对未加锁的对象解锁，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），抛出</p>\n<p>IllegalMonitorStateException 异常。</p>\n<p>说明三：在 Lock 对象的 lock 方法实现中可能抛出 unchecked 异常，产生的后果与说明二相同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：</span></span><br><span class=\"line\">Lock lock = <span class=\"keyword\">new</span> XxxLock();</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">lock.lock();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> doSomething();</span><br><span class=\"line\"> doOthers();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"> lock.unlock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//反例：</span></span><br><span class=\"line\">Lock lock = <span class=\"keyword\">new</span> XxxLock();</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 如果此处抛出异常，则直接执行 finally 代码块</span></span><br><span class=\"line\"> doSomething();</span><br><span class=\"line\"> <span class=\"comment\">// 无论加锁是否成功，finally 代码块都会执行</span></span><br><span class=\"line\"> lock.lock();</span><br><span class=\"line\"> doOthers();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"> lock.unlock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>10.【强制】在使用尝试机制来获取锁的方式中，进入业务代码块之前，必须先判断当前线程是否</p>\n<p>持有锁。锁的释放规则与锁的阻塞等待方式相同。</p>\n<p>说明：Lock 对象的 unlock 方法在执行时，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），如果</p>\n<p>当前线程不持有锁，则抛出 IllegalMonitorStateException 异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：</span></span><br><span class=\"line\">Lock lock = <span class=\"keyword\">new</span> XxxLock();</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> isLocked = lock.tryLock();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isLocked) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> doSomething();</span><br><span class=\"line\"> doOthers();</span><br><span class=\"line\"> &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"> lock.unlock();</span><br><span class=\"line\"> &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>11.【强制】并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加</p>\n<p>锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。</p>\n<p>说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于</p>\n<p>3 次。</p>\n<p>12.【强制】多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛</p>\n<p>出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。</p>\n<h4 id=\"控制语句\"><a href=\"#控制语句\" class=\"headerlink\" title=\"控制语句\"></a>控制语句</h4><p>1.【强制】在一个 switch 块内，每个 case 要么通过 continue/break/return 等来终止，要么</p>\n<p>注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default</p>\n<p>2.【强制】当 switch 括号内的变量类型为 String 并且此变量为外部参数时，必须先进行 null</p>\n<p>判断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//反例：如下的代码输出是什么？</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwitchString</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"> method(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(String param)</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">switch</span> (param) &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 肯定不是进入这里</span></span><br><span class=\"line\"> <span class=\"keyword\">case</span> <span class=\"string\">\"sth\"</span>:</span><br><span class=\"line\"> System.out.println(<span class=\"string\">\"it's sth\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> <span class=\"comment\">// 也不是进入这里</span></span><br><span class=\"line\"> <span class=\"keyword\">case</span> <span class=\"string\">\"null\"</span>:</span><br><span class=\"line\"> System.out.println(<span class=\"string\">\"it's null\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> <span class=\"comment\">// 也不是进入这里</span></span><br><span class=\"line\"> <span class=\"keyword\">default</span>:</span><br><span class=\"line\"> System.out.println(<span class=\"string\">\"default\"</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.【强制】在 if/else/for/while/do 语句中必须使用大括号。</p>\n<p>说明：即使只有一行代码，禁止不采用大括号的编码方式：if (condition) statements; </p>\n<p>4.【强制】三目运算符 condition? 表达式 1 : 表达式 2 中，高度注意表达式 1 和 2 在类型对齐</p>\n<p>时，可能抛出因自动拆箱导致的 NPE 异常。</p>\n<p>说明：以下两种场景会触发类型对齐的拆箱操作：</p>\n<p>1） 表达式 1 或表达式 2 的值只要有一个是原始类型。</p>\n<p>2） 表达式 1 或表达式 2 的值的类型不一致，会强制拆箱升级成表示范围更大的那个类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//反例：</span></span><br><span class=\"line\">Integer a = <span class=\"number\">1</span>;</span><br><span class=\"line\">Integer b = <span class=\"number\">2</span>;</span><br><span class=\"line\">Integer c = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">Boolean flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// a*b 的结果是 int 类型，那么 c 会强制拆箱成 int 类型，抛出 NPE 异常</span></span><br><span class=\"line\">Integer result=(flag? a*b : c)</span><br></pre></td></tr></table></figure>\n\n<p>5.【强制】在高并发场景中，避免使用”等于”判断作为中断或退出的条件。</p>\n<p>说明：如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件</p>\n<p>来代替。</p>\n<p>反例：判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，</p>\n<p>这样的话，活动无法终止。</p>\n<h4 id=\"注释规约\"><a href=\"#注释规约\" class=\"headerlink\" title=\"注释规约\"></a>注释规约</h4><p>1.【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/<em>*内容</em>/格式，不得使用</p>\n<p>// xxx 方式。</p>\n<p>说明：在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE</p>\n<p>中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p>\n<p>2.【强制】所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释、除了返回值、参数、</p>\n<p>异常说明外，还必须指出该方法做什么事情，实现什么功能。</p>\n<p>说明：对子类的实现要求，或者调用注意事项，请一并说明。</p>\n<p>3【强制】所有的类都必须添加创建者和创建日期。</p>\n<p>说明：在设置模板时，注意 IDEA 的@author 为<code>${USER}</code>，而 eclipse 的@author 为<code>${user}</code>，大小写有</p>\n<p>区别，而日期的设置统一为 yyyy/MM/dd 的格式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正例：</span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> yangguanbao</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@date</span> 2016/10/31</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>4 【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使</p>\n<p>用/* */注释，注意与代码对齐。</p>\n<p>5【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"编程规约\"><a href=\"#编程规约\" class=\"headerlink\" title=\"编程规约\"></a>编程规约</h3>","more":"<h4 id=\"命名风格\"><a href=\"#命名风格\" class=\"headerlink\" title=\"命名风格\"></a>命名风格</h4><h5 id=\"接口和实现类命名规则\"><a href=\"#接口和实现类命名规则\" class=\"headerlink\" title=\"接口和实现类命名规则\"></a>接口和实现类命名规则</h5><p>1）【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部</p>\n<p>的实现类用 Impl 的后缀与接口区别。</p>\n<h5 id=\"三层架构各层命名规约：\"><a href=\"#三层架构各层命名规约：\" class=\"headerlink\" title=\"三层架构各层命名规约：\"></a>三层架构各层命名规约：</h5><p>A) Service/DAO 层方法命名规约</p>\n<p>1） 获取单个对象的方法用 get 做前缀。</p>\n<p>2） 获取多个对象的方法用 list 做前缀，复数形式结尾如：listObjects。 </p>\n<p>3） 获取统计值的方法用 count 做前缀。 </p>\n<p>4） 插入的方法用 save/insert 做前缀。</p>\n<p>5） 删除的方法用 remove/delete 做前缀。</p>\n<p>6） 修改的方法用 update 做前缀。</p>\n<p>B) 领域模型命名规约</p>\n<p>1） 数据对象：xxxDO，xxx 即为数据表名。</p>\n<p>2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。</p>\n<p>3） 展示对象：xxxVO，xxx 一般为网页名称。</p>\n<p>4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</p>\n<h4 id=\"常量定义\"><a href=\"#常量定义\" class=\"headerlink\" title=\"常量定义\"></a>常量定义</h4><p>【强制】不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。</p>\n<p>反例：String key = “Id#taobao_” + tradeId;</p>\n<p> cache.put(key, value);</p>\n<h4 id=\"代码格式\"><a href=\"#代码格式\" class=\"headerlink\" title=\"代码格式\"></a>代码格式</h4><h5 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h5><p>【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果</p>\n<p>是非空代码块则：</p>\n<p>1） 左大括号前不换行。</p>\n<p>2） 左大括号后换行。</p>\n<p>3） 右大括号前换行。</p>\n<p>4） 右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行。</p>\n<h5 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h5><p>1【强制】左小括号和字符之间不出现空格；同样，右小括号和字符之间也不出现空格；而左大</p>\n<p>括号前需要空格。详见第 5 条下方正例提示。</p>\n<p>反例：if (空格 a == b 空格)</p>\n<p>2【强制】if/for/while/switch/do 等保留字与括号之间都必须加空格。</p>\n<p>3【强制】任何二目、三目运算符的左右两边都需要加一个空格。</p>\n<p>说明：运算符包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号等</p>\n<p>4 </p>\n<p>【强制】采用 4 个空格缩进，禁止使用 tab 字符。</p>\n<p>说明：如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，</p>\n<p>请勿勾选 Use tab character；而在 eclipse 中，必须勾选 insert spaces for tabs。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正例： </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\"><span class=\"comment\">// 缩进 4 个空格 </span></span><br><span class=\"line\">String say = <span class=\"string\">\"hello\"</span>; </span><br><span class=\"line\"><span class=\"comment\">// 运算符的左右必须有一个空格 </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"comment\">// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (flag == <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">System.out.println(say); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// 左大括号前加空格且不换行；左大括号后换行 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) &#123; </span><br><span class=\"line\">System.out.println(<span class=\"string\">\"world\"</span>); </span><br><span class=\"line\"><span class=\"comment\">// 右大括号前换行，右大括号后有 else，不用换行 </span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">System.out.println(<span class=\"string\">\"ok\"</span>); </span><br><span class=\"line\"><span class=\"comment\">// 在右大括号后直接结束，则必须换行 </span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5【强制】注释的双斜线与注释内容之间有且仅有一个空格</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正例：</span><br><span class=\"line\"><span class=\"comment\">// 这是示例注释，请注意在双斜线之后有一个空格</span></span><br><span class=\"line\">String ygb = <span class=\"keyword\">new</span> String();</span><br></pre></td></tr></table></figure>\n\n<p>6【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：</p>\n<p>1） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。</p>\n<p>2） 运算符与下文一起换行。</p>\n<p>3） 方法调用的点符号与下文一起换行。</p>\n<p>4） 方法调用中的多个参数需要换行时，在逗号后进行。 </p>\n<p>5） 在括号前不要换行，见反例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：</span></span><br><span class=\"line\">StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(); </span><br><span class=\"line\"><span class=\"comment\">// 超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行</span></span><br><span class=\"line\">sb.append(<span class=\"string\">\"zi\"</span>).append(<span class=\"string\">\"xin\"</span>)... </span><br><span class=\"line\">.append(<span class=\"string\">\"huang\"</span>)... </span><br><span class=\"line\">.append(<span class=\"string\">\"huang\"</span>)... </span><br><span class=\"line\">.append(<span class=\"string\">\"huang\"</span>);</span><br><span class=\"line\">反例：</span><br><span class=\"line\">StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(); </span><br><span class=\"line\"><span class=\"comment\">// 超过 120 个字符的情况下，不要在括号前换行</span></span><br><span class=\"line\">sb.append(<span class=\"string\">\"zi\"</span>).append(<span class=\"string\">\"xin\"</span>)...append </span><br><span class=\"line\">(<span class=\"string\">\"huang\"</span>); </span><br><span class=\"line\"><span class=\"comment\">// 参数很多的方法调用可能超过 120 个字符，不要在逗号前换行</span></span><br><span class=\"line\">method(args1, args2, args3, ... </span><br><span class=\"line\">, argsX);</span><br></pre></td></tr></table></figure>\n\n<p>7【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：下例中实参的 args1，后边必须要有一个空格。</span></span><br><span class=\"line\">method(args1, args2, args3);</span><br></pre></td></tr></table></figure>\n\n<p>8【强制】IDE 的 text file encoding 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，</p>\n<p>不要使用 Windows 格式。</p>\n<h4 id=\"OOP规约\"><a href=\"#OOP规约\" class=\"headerlink\" title=\"OOP规约\"></a>OOP规约</h4><ol>\n<li>【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成</li>\n</ol>\n<p>本，直接用类名来访问即可。</p>\n<ol start=\"2\">\n<li>【强制】所有的覆写方法，必须加@Override 注解。</li>\n</ol>\n<p>说明：getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override</p>\n<p>可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编</p>\n<p>译报错。</p>\n<ol start=\"3\">\n<li>【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。</li>\n</ol>\n<p>说明：可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数编程）</p>\n<p>正例：public List<User> listUsers(String type, Long… ids) {…}</p>\n<ol start=\"4\">\n<li>【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生</li>\n</ol>\n<p>影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</p>\n<ol start=\"5\">\n<li>【强制】不能使用过时的类或方法。</li>\n</ol>\n<p>说明：java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应</p>\n<p>该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，</p>\n<p>那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。</p>\n<ol start=\"6\">\n<li>【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用</li>\n</ol>\n<p>equals。</p>\n<p>正例：”test”.equals(object);</p>\n<p>反例：object.equals(“test”);</p>\n<p>说明：推荐使用 java.util.Objects#equals（JDK7 引入的工具类）</p>\n<ol start=\"7\">\n<li>【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。</li>\n</ol>\n<p>说明：对于 Integer var = ? 在-128 至 127 范围内的赋值，Integer 对象是在</p>\n<p>IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行</p>\n<p>判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，</p>\n<p>推荐使用 equals 方法进行判断</p>\n<ol start=\"8\">\n<li>关于基本数据类型与包装数据类型的使用标准如下：</li>\n</ol>\n<p>1） 【强制】所有的 POJO 类属性必须使用包装数据类型。</p>\n<p>2） 【强制】RPC 方法的返回值和参数必须使用包装数据类型。</p>\n<p>3） 【推荐】所有的局部变量使用基本数据类型。</p>\n<p>说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何</p>\n<p>NPE 问题，或者入库检查，都由使用者来保证。</p>\n<p>正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</p>\n<p>反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用</p>\n<p>不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装</p>\n<p>数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出</p>\n<ol start=\"9\">\n<li>【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。</li>\n</ol>\n<p>反例：POJO 类的 gmtCreate 默认值为 new Date()，但是这个属性在数据提取时并没有置入具</p>\n<p>体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p>\n<ol start=\"10\">\n<li>【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如</li>\n</ol>\n<p>果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。</p>\n<p>说明：注意 serialVersionUID 不一致会抛出序列化运行时异常。</p>\n<ol start=\"11\">\n<li>【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</li>\n<li>【强制】POJO 类必须写 toString 方法。使用 IDE 中的工具：source&gt; generate toString  时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。</li>\n<li>【强制】禁止在 POJO 类中，同时存在对应属性 xxx 的 isXxx()和 getXxx()方法。</li>\n</ol>\n<p>说明：框架在调用属性 xxx 的提取方法时，并不能确定哪个方法一定是被优先调用到，神坑之一。</p>\n<h4 id=\"日期时间\"><a href=\"#日期时间\" class=\"headerlink\" title=\"日期时间\"></a>日期时间</h4><p>1.【强制】日期格式化时，传入 pattern 中表示年份统一使用小写的 y。</p>\n<p>说明：日期格式化时，yyyy 表示当天所在的年，而大写的 YYYY 代表是 week in which year（JDK7 之后</p>\n<p>引入的概念），意思是当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，返回的 YYYY</p>\n<p>就是下一年。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：表示日期和时间的格式如下所示：</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>2.【强制】在日期格式中分清楚大写的 M 和小写的 m，大写的 H 和小写的 h 分别指代的意义。</p>\n<p>说明：日期格式中的这两对字母表意如下：</p>\n<p>1） 表示月份是大写的 M； </p>\n<p>2） 表示分钟则是小写的 m； </p>\n<p>3） 24 小时制的是大写的 H； </p>\n<p>4） 12 小时制的则是小写的 h。</p>\n<p>3.【强制】获取当前毫秒数：System.currentTimeMillis(); 而不是 new Date().getTime()。</p>\n<p>说明：如果想获取更加精确的纳秒级时间值，使用 System.nanoTime 的方式。在 JDK8 中，针对统计时间</p>\n<p>等场景，推荐使用 Instant 类。</p>\n<p>4.【强制】不允许在程序任何地方中使用：1）java.sql.Date 2）java.sql.Time 3）</p>\n<p>java.sql.Timestamp。</p>\n<p>说明：第 1 个不记录时间，getHours()抛出异常；第 2 个不记录日期，getYear()抛出异常；第 3 个在构造</p>\n<p>方法 super((time/1000)*1000)，fastTime 和 nanos 分开存储秒和纳秒信息。</p>\n<p>反例： java.util.Date.after(Date)进行时间比较时，当入参是 java.sql.Timestamp 时，会触发 JDK </p>\n<p>BUG(JDK9 已修复)，可能导致比较时的意外结果</p>\n<p>5.【强制】不要在程序中写死一年为 365 天，避免在公历闰年时出现日期转换错误或程序逻辑</p>\n<p>错误。</p>\n<h4 id=\"集合处理\"><a href=\"#集合处理\" class=\"headerlink\" title=\"集合处理\"></a>集合处理</h4><p>1.【强制】关于 hashCode 和 equals 的处理，遵循如下规则：</p>\n<p>1） 只要重写 equals，就必须重写 hashCode。 </p>\n<p>2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写</p>\n<p>这两个方法。</p>\n<p>3） 如果自定义对象作为 Map 的键，那么必须覆写 hashCode 和 equals。</p>\n<p>说明：String 因为重写了 hashCode 和 equals 方法，所以我们可以愉快地使用 String 对象作为 key 来使</p>\n<p>用。</p>\n<p>2.【强制】判断所有集合内部的元素是否为空，使用 isEmpty()方法，而不是 size()==0 的方式。</p>\n<p>说明：前者的时间复杂度为 O(1)，而且可读性更好。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：</span></span><br><span class=\"line\">Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(map.isEmpty()) &#123;</span><br><span class=\"line\"> System.out.println(<span class=\"string\">\"no element in this map.\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.【强制】在使用 java.util.stream.Collectors 类的 toMap()方法转为 Map 集合时，一定要使</p>\n<p>用含有参数类型为 BinaryOperator，参数名为 mergeFunction 的方法，否则当出现相同 key</p>\n<p>值时会抛出 IllegalStateException 异常。</p>\n<p>说明：参数 mergeFunction 的作用是当出现 key 重复时，自定义对 value 的处理策略。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：</span></span><br><span class=\"line\">List&lt;Pair&lt;String, Double&gt;&gt; pairArrayList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\">pairArrayList.add(<span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"string\">\"version\"</span>, <span class=\"number\">6.19</span>));</span><br><span class=\"line\">pairArrayList.add(<span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"string\">\"version\"</span>, <span class=\"number\">10.24</span>));</span><br><span class=\"line\">pairArrayList.add(<span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"string\">\"version\"</span>, <span class=\"number\">13.14</span>));</span><br><span class=\"line\">Map&lt;String, Double&gt; map = pairArrayList.stream().collect(</span><br><span class=\"line\"><span class=\"comment\">// 生成的 map 集合中只有一个键值对：&#123;version=13.14&#125;</span></span><br><span class=\"line\">Collectors.toMap(Pair::getKey, Pair::getValue, (v1, v2) -&gt; v2));</span><br><span class=\"line\"><span class=\"comment\">//反例：</span></span><br><span class=\"line\">String[] departments = <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"iERP\"</span>, <span class=\"string\">\"iERP\"</span>, <span class=\"string\">\"EIBU\"</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 抛出 IllegalStateException 异常</span></span><br><span class=\"line\">Map&lt;Integer, String&gt; map = Arrays.stream(departments)</span><br><span class=\"line\"> .collect(Collectors.toMap(String::hashCode, str -&gt; str))</span><br></pre></td></tr></table></figure>\n\n<p>4.【强制】在使用 java.util.stream.Collectors 类的 toMap()方法转为 Map 集合时，一定要注</p>\n<p>意当 value 为 null 时会抛 NPE 异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//说明：在 java.util.HashMap 的 merge 方法里会进行如下的判断：</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span> || remappingFunction == <span class=\"keyword\">null</span>)</span><br><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\"><span class=\"comment\">//反例：</span></span><br><span class=\"line\">List&lt;Pair&lt;String, Double&gt;&gt; pairArrayList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\">pairArrayList.add(<span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"string\">\"version1\"</span>, <span class=\"number\">4.22</span>));</span><br><span class=\"line\">pairArrayList.add(<span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"string\">\"version2\"</span>, <span class=\"keyword\">null</span>));</span><br><span class=\"line\">Map&lt;String, Double&gt; map = pairArrayList.stream().collect(</span><br><span class=\"line\"><span class=\"comment\">// 抛出 NullPointerException 异常</span></span><br><span class=\"line\">Collectors.toMap(Pair::getKey, Pair::getValue, (v1, v2) -&gt; v2));</span><br></pre></td></tr></table></figure>\n\n<p>5.【强制】ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClassCastException 异 </p>\n<p>常：java.util.RandomAccessSubList cannot be cast to java.util.ArrayList。</p>\n<p>说明：subList 返回的是 ArrayList 的内部类 SubList，并不是 ArrayList 而是 ArrayList 的一个视图，对</p>\n<p>于 SubList 子列表的所有操作最终会反映到原列表上。</p>\n<p>6.【强制】使用 Map 的方法 keySet()/values()/entrySet()返回集合对象时，不可以对其进行添</p>\n<p>加元素操作，否则会抛出 UnsupportedOperationException 异常。</p>\n<p>7.【强制】Collections 类返回的对象，如：emptyList()/singletonList()等都是 immutable list，</p>\n<p>不可对其进行添加或者删除元素的操作。</p>\n<p>反例：如果查询无结果，返回 Collections.emptyList()空集合对象，调用方一旦进行了添加元素的操作，就</p>\n<p>会触发 UnsupportedOperationException 异常。</p>\n<p>8.【强制】在 subList 场景中，高度注意对父集合元素的增加或删除，均会导致子列表的遍历、</p>\n<p>增加、删除产生 ConcurrentModificationException 异常。</p>\n<p>9.【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一</p>\n<p>致、长度为 0 的空数组。</p>\n<p>反例：直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现</p>\n<p>ClassCastException 错误。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：</span></span><br><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"guan\"</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"bao\"</span>);</span><br><span class=\"line\">String[] array = list.toArray(<span class=\"keyword\">new</span> String[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n\n<p> 说明：使用 toArray 带参方法，数组空间大小的 length， </p>\n<p>1） 等于 0，动态创建与 size 相同的数组，性能最好。</p>\n<p>2） 大于 0 但小于 size，重新创建大小等于 size 的数组，增加 GC 负担。</p>\n<p>3） 等于 size，在高并发情况下，数组创建完成之后，size 正在变大的情况下，负面影响与 2 相同。</p>\n<p>4） 大于 size，空间浪费，且在 size 处插入 null 值，存在 NPE 隐患。</p>\n<p>10.【强制】在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行</p>\n<p>NPE 判断。</p>\n<p>说明：在 ArrayList#addAll 方法的第一行代码即 Object[] a = c.toArray(); 其中 c 为输入集合参数，如果</p>\n<p>为 null，则直接抛出异常。</p>\n<p>11.【强制】使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，</p>\n<p>它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。</p>\n<p>说明：asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList 体现的是适配</p>\n<p>器模式，只是转换接口，后台的数据仍是数组。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> String[] str = <span class=\"keyword\">new</span> String[] &#123; <span class=\"string\">\"yang\"</span>, <span class=\"string\">\"hao\"</span> &#125;;</span><br><span class=\"line\"> List list = Arrays.asList(str);</span><br><span class=\"line\"><span class=\"comment\">//第一种情况：list.add(\"yangguanbao\"); 运行时异常。</span></span><br><span class=\"line\"><span class=\"comment\">//第二种情况：str[0] = \"changed\"; 也会随之修改，反之亦然。</span></span><br></pre></td></tr></table></figure>\n\n<p>12 【强制】泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用 add 方法， </p>\n<p>而&lt;? super T&gt;不能使用 get 方法，两者在接口调用赋值的场景中容易出错。</p>\n<p>说明：扩展说一下 PECS(Producer Extends Consumer Super)原则：第一、频繁往外读取内容的，适合用</p>\n<p>&lt;? extends T&gt;。第二、经常往里插入的，适合用&lt;? super T&gt;</p>\n<p>13.【强制】在无泛型限制定义的集合赋值给泛型限制的集合时，在使用集合元素时，需要进行</p>\n<p>instanceof 判断，避免抛出 ClassCastException 异常。</p>\n<p>说明：毕竟泛型是在 JDK5 后才出现，考虑到向前兼容，编译器是允许非泛型集合与泛型集合互相赋值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//反例：</span></span><br><span class=\"line\">List&lt;String&gt; generics = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">List notGenerics = <span class=\"keyword\">new</span> ArrayList(<span class=\"number\">10</span>);</span><br><span class=\"line\">notGenerics.add(<span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">notGenerics.add(<span class=\"keyword\">new</span> Integer(<span class=\"number\">1</span>));</span><br><span class=\"line\">generics = notGenerics;</span><br><span class=\"line\"><span class=\"comment\">// 此处抛出 ClassCastException 异常</span></span><br><span class=\"line\">String string = generics.get(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>14.【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator</p>\n<p>方式，如果并发操作，需要对 Iterator 对象加锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*说明：三个条件如下 </span></span><br><span class=\"line\"><span class=\"comment\">*1） x，y 的比较结果和 y，x 的比较结果相反。</span></span><br><span class=\"line\"><span class=\"comment\">*2） x&gt;y，y&gt;z，则 x&gt;z。 </span></span><br><span class=\"line\"><span class=\"comment\">*3） x=y，则 x，z 比较结果和 y，z 比较结果相同。</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"comment\">//反例：下例中没有处理相等的情况，交换两个对象判断结果并不互反，不符合第一个条件，在实际使用中可能会出现异常。</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Student o1, Student o2)</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> o1.getId() &gt; o2.getId() ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"并发处理\"><a href=\"#并发处理\" class=\"headerlink\" title=\"并发处理\"></a>并发处理</h4><p>1.【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。</p>\n<p>说明：资源驱动类、工具类、单例工厂类都需要注意。</p>\n<p>2.【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</p>\n<p>正例：自定义线程工厂，并且根据外部特征进行分组，比如，来自同一机房的调用，把机房编号赋值给</p>\n<p>whatFeaturOfGroup</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserThreadFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ThreadFactory</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String namePrefix;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicInteger nextId = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">1</span>);</span><br><span class=\"line\"> <span class=\"comment\">// 定义线程组名称，在 jstack 问题排查时，非常有帮助</span></span><br><span class=\"line\"> UserThreadFactory(String whatFeaturOfGroup) &#123;</span><br><span class=\"line\"> namePrefix = <span class=\"string\">\"From UserThreadFactory's \"</span> + whatFeaturOfGroup + <span class=\"string\">\"-Worker-\"</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable task)</span> </span>&#123;</span><br><span class=\"line\"> String name = namePrefix + nextId.getAndIncrement();</span><br><span class=\"line\"> Thread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">null</span>, task, name, <span class=\"number\">0</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\"> System.out.println(thread.getName());</span><br><span class=\"line\"> <span class=\"keyword\">return</span> thread;</span><br><span class=\"line\"> &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</p>\n<p>说明：线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。</p>\n<p>如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p>\n<p>4.【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这</p>\n<p>样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p>\n<p>说明：Executors 返回的线程池对象的弊端如下： </p>\n<p>1） FixedThreadPool 和 SingleThreadPool：</p>\n<p>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。 </p>\n<p>2） CachedThreadPool：</p>\n<p>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p>\n<p>5.【强制】SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为 static，</p>\n<p>必须加锁，或者使用 DateUtils 工具类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：注意线程安全，使用 DateUtils。亦推荐如下处理：</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class=\"keyword\">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> DateFormat <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>6.【强制】必须回收自定义的 ThreadLocal 变量，尤其在线程池场景下，线程经常会被复用，</p>\n<p>如果不清理自定义的 ThreadLocal 变量，可能会影响后续业务逻辑和造成内存泄露等问题。</p>\n<p>尽量在代理中使用 try-finally 块进行回收。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：</span></span><br><span class=\"line\">objectThreadLocal.set(userInfo);</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"> objectThreadLocal.remove();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7.【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能</p>\n<p>锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。</p>\n<p>说明：尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。</p>\n<p>8.【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造</p>\n<p>成死锁。</p>\n<p>说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、 </p>\n<p>B、C，否则可能出现死锁。</p>\n<p>9.【强制】在使用阻塞等待获取锁的方式中，必须在 try 代码块之外，并且在加锁方法与 try 代</p>\n<p>码块之间没有任何可能抛出异常的方法调用，避免加锁成功后，在 finally 中无法解锁。</p>\n<p>说明一：如果在 lock 方法与 try 代码块之间的方法调用抛出异常，那么无法解锁，造成其它线程无法成功</p>\n<p>获取锁。</p>\n<p>说明二：如果 lock 方法在 try 代码块之内，可能由于其它方法抛出异常，导致在 finally 代码块中，unlock</p>\n<p>对未加锁的对象解锁，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），抛出</p>\n<p>IllegalMonitorStateException 异常。</p>\n<p>说明三：在 Lock 对象的 lock 方法实现中可能抛出 unchecked 异常，产生的后果与说明二相同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：</span></span><br><span class=\"line\">Lock lock = <span class=\"keyword\">new</span> XxxLock();</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">lock.lock();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> doSomething();</span><br><span class=\"line\"> doOthers();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"> lock.unlock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//反例：</span></span><br><span class=\"line\">Lock lock = <span class=\"keyword\">new</span> XxxLock();</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 如果此处抛出异常，则直接执行 finally 代码块</span></span><br><span class=\"line\"> doSomething();</span><br><span class=\"line\"> <span class=\"comment\">// 无论加锁是否成功，finally 代码块都会执行</span></span><br><span class=\"line\"> lock.lock();</span><br><span class=\"line\"> doOthers();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"> lock.unlock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>10.【强制】在使用尝试机制来获取锁的方式中，进入业务代码块之前，必须先判断当前线程是否</p>\n<p>持有锁。锁的释放规则与锁的阻塞等待方式相同。</p>\n<p>说明：Lock 对象的 unlock 方法在执行时，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），如果</p>\n<p>当前线程不持有锁，则抛出 IllegalMonitorStateException 异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正例：</span></span><br><span class=\"line\">Lock lock = <span class=\"keyword\">new</span> XxxLock();</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> isLocked = lock.tryLock();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isLocked) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> doSomething();</span><br><span class=\"line\"> doOthers();</span><br><span class=\"line\"> &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"> lock.unlock();</span><br><span class=\"line\"> &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>11.【强制】并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加</p>\n<p>锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。</p>\n<p>说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于</p>\n<p>3 次。</p>\n<p>12.【强制】多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛</p>\n<p>出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。</p>\n<h4 id=\"控制语句\"><a href=\"#控制语句\" class=\"headerlink\" title=\"控制语句\"></a>控制语句</h4><p>1.【强制】在一个 switch 块内，每个 case 要么通过 continue/break/return 等来终止，要么</p>\n<p>注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default</p>\n<p>2.【强制】当 switch 括号内的变量类型为 String 并且此变量为外部参数时，必须先进行 null</p>\n<p>判断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//反例：如下的代码输出是什么？</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwitchString</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"> method(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(String param)</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">switch</span> (param) &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 肯定不是进入这里</span></span><br><span class=\"line\"> <span class=\"keyword\">case</span> <span class=\"string\">\"sth\"</span>:</span><br><span class=\"line\"> System.out.println(<span class=\"string\">\"it's sth\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> <span class=\"comment\">// 也不是进入这里</span></span><br><span class=\"line\"> <span class=\"keyword\">case</span> <span class=\"string\">\"null\"</span>:</span><br><span class=\"line\"> System.out.println(<span class=\"string\">\"it's null\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> <span class=\"comment\">// 也不是进入这里</span></span><br><span class=\"line\"> <span class=\"keyword\">default</span>:</span><br><span class=\"line\"> System.out.println(<span class=\"string\">\"default\"</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.【强制】在 if/else/for/while/do 语句中必须使用大括号。</p>\n<p>说明：即使只有一行代码，禁止不采用大括号的编码方式：if (condition) statements; </p>\n<p>4.【强制】三目运算符 condition? 表达式 1 : 表达式 2 中，高度注意表达式 1 和 2 在类型对齐</p>\n<p>时，可能抛出因自动拆箱导致的 NPE 异常。</p>\n<p>说明：以下两种场景会触发类型对齐的拆箱操作：</p>\n<p>1） 表达式 1 或表达式 2 的值只要有一个是原始类型。</p>\n<p>2） 表达式 1 或表达式 2 的值的类型不一致，会强制拆箱升级成表示范围更大的那个类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//反例：</span></span><br><span class=\"line\">Integer a = <span class=\"number\">1</span>;</span><br><span class=\"line\">Integer b = <span class=\"number\">2</span>;</span><br><span class=\"line\">Integer c = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">Boolean flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// a*b 的结果是 int 类型，那么 c 会强制拆箱成 int 类型，抛出 NPE 异常</span></span><br><span class=\"line\">Integer result=(flag? a*b : c)</span><br></pre></td></tr></table></figure>\n\n<p>5.【强制】在高并发场景中，避免使用”等于”判断作为中断或退出的条件。</p>\n<p>说明：如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件</p>\n<p>来代替。</p>\n<p>反例：判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，</p>\n<p>这样的话，活动无法终止。</p>\n<h4 id=\"注释规约\"><a href=\"#注释规约\" class=\"headerlink\" title=\"注释规约\"></a>注释规约</h4><p>1.【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/<em>*内容</em>/格式，不得使用</p>\n<p>// xxx 方式。</p>\n<p>说明：在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE</p>\n<p>中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p>\n<p>2.【强制】所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释、除了返回值、参数、</p>\n<p>异常说明外，还必须指出该方法做什么事情，实现什么功能。</p>\n<p>说明：对子类的实现要求，或者调用注意事项，请一并说明。</p>\n<p>3【强制】所有的类都必须添加创建者和创建日期。</p>\n<p>说明：在设置模板时，注意 IDEA 的@author 为<code>${USER}</code>，而 eclipse 的@author 为<code>${user}</code>，大小写有</p>\n<p>区别，而日期的设置统一为 yyyy/MM/dd 的格式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正例：</span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> yangguanbao</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@date</span> 2016/10/31</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>4 【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使</p>\n<p>用/* */注释，注意与代码对齐。</p>\n<p>5【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。</p>"}],"PostAsset":[{"_id":"source/_posts/java8学习笔记/image-20200911102914791.png","post":"ckgevbbms000ng0v89cxd9cjf","slug":"image-20200911102914791.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckgevbbma0000g0v81alm3rf6","category_id":"ckgevbbmg0002g0v874tx3wtp","_id":"ckgevbbmm000cg0v8dows7yn8"},{"post_id":"ckgevbbme0001g0v83bvt2s9z","category_id":"ckgevbbmj0007g0v8cp88b5k5","_id":"ckgevbbmr000jg0v8dct7c6nx"},{"post_id":"ckgevbbmh0004g0v830fbhzg7","category_id":"ckgevbbmj0007g0v8cp88b5k5","_id":"ckgevbbmt000pg0v83xq63mx2"},{"post_id":"ckgevbbmi0005g0v851ztg27x","category_id":"ckgevbbmj0007g0v8cp88b5k5","_id":"ckgevbbmv000ug0v897xn333h"},{"post_id":"ckgevbbmj0006g0v8h6t52gle","category_id":"ckgevbbmt000og0v8e2s48zgu","_id":"ckgevbbmx0010g0v8beg401mz"},{"post_id":"ckgevbbmv000tg0v87muu6if1","category_id":"ckgevbbmt000og0v8e2s48zgu","_id":"ckgevbbmz0015g0v83u9qddcd"},{"post_id":"ckgevbbmv000wg0v80e3a15kg","category_id":"ckgevbbmt000og0v8e2s48zgu","_id":"ckgevbbmz0018g0v8f8pvgsm6"},{"post_id":"ckgevbbmk000ag0v874ff2g87","category_id":"ckgevbbmv000vg0v8cqhw729m","_id":"ckgevbbn1001cg0v874ex4yqy"},{"post_id":"ckgevbbmy0013g0v833yac2id","category_id":"ckgevbbmt000og0v8e2s48zgu","_id":"ckgevbbn2001gg0v8hgf2902c"},{"post_id":"ckgevbbml000bg0v86jkn81a2","category_id":"ckgevbbmx0012g0v809rt9frj","_id":"ckgevbbn3001kg0v8gy2s4exo"},{"post_id":"ckgevbbmo000fg0v8bnmwb5zm","category_id":"ckgevbbmx0012g0v809rt9frj","_id":"ckgevbbn7001qg0v8f1sj1jch"},{"post_id":"ckgevbbmo000hg0v8aasa9ehe","category_id":"ckgevbbmt000og0v8e2s48zgu","_id":"ckgevbbn9001vg0v83h9o6116"},{"post_id":"ckgevbbmr000lg0v854iu9e5i","category_id":"ckgevbbn7001pg0v89wp49vhe","_id":"ckgevbbnb0021g0v857wc1t55"},{"post_id":"ckgevbbms000ng0v89cxd9cjf","category_id":"ckgevbbn9001wg0v827o97yqw","_id":"ckgevbbnd0027g0v89xcs8f3c"},{"post_id":"ckgevbbmw000zg0v81yspbaon","category_id":"ckgevbbnb0022g0v8d3g85qaw","_id":"ckgevbbng002eg0v80i06d9a6"},{"post_id":"ckgevbbmz0017g0v89m2330ad","category_id":"ckgevbbnb0022g0v8d3g85qaw","_id":"ckgevbbni002kg0v8dwz12ecy"},{"post_id":"ckgevbbnf002bg0v8822m3pbm","category_id":"ckgevbbmx0012g0v809rt9frj","_id":"ckgevbbnj002og0v8dymoa4qa"},{"post_id":"ckgevbbn0001ag0v878uhd22m","category_id":"ckgevbbnf002dg0v87j0th8ej","_id":"ckgevbbnl002tg0v8a46s2qnb"},{"post_id":"ckgevbbn1001fg0v86dmd55j3","category_id":"ckgevbbnb0022g0v8d3g85qaw","_id":"ckgevbbnm002wg0v87ebl6vg4"},{"post_id":"ckgevbbnk002rg0v8hrb7c730","category_id":"ckgevbbnb0022g0v8d3g85qaw","_id":"ckgevbbnn0030g0v816np64kp"},{"post_id":"ckgevbbn2001ig0v88jtn1y1o","category_id":"ckgevbbnl002sg0v80nz35gin","_id":"ckgevbbnn0032g0v84yg5gzxo"},{"post_id":"ckgevbbn3001mg0v86i3u9rbo","category_id":"ckgevbbnm002xg0v850sg9754","_id":"ckgevbbno0036g0v8cho9bl9w"},{"post_id":"ckgevbbn6001og0v85an89mjv","category_id":"ckgevbbnn0033g0v8d7i6brmn","_id":"ckgevbbnp003bg0v81wor35t3"},{"post_id":"ckgevbbn8001sg0v8dnee39jf","category_id":"ckgevbbnm002xg0v850sg9754","_id":"ckgevbbnq003fg0v86svn46dp"},{"post_id":"ckgevbbn8001ug0v89nmg8m28","category_id":"ckgevbbnb0022g0v8d3g85qaw","_id":"ckgevbbnq003ig0v869uo7xuh"},{"post_id":"ckgevbbn9001yg0v871jzawwd","category_id":"ckgevbbnq003eg0v83c5x1snm","_id":"ckgevbbnr003mg0v86z94enjo"},{"post_id":"ckgevbbna0020g0v8aherf3of","category_id":"ckgevbbnq003jg0v84c1g5l0h","_id":"ckgevbbns003qg0v8404gehp5"},{"post_id":"ckgevbbnb0023g0v81j8uezll","category_id":"ckgevbbnr003ng0v82mku9uz7","_id":"ckgevbbns003ug0v81nlq3kii"},{"post_id":"ckgevbbnc0026g0v81uopg7io","category_id":"ckgevbbns003rg0v8bnuf3j65","_id":"ckgevbbnt003yg0v85blybhhn"},{"post_id":"ckgevbbnd0029g0v8fmro38nz","category_id":"ckgevbbns003vg0v8hueofywv","_id":"ckgevbbnu0042g0v8gi4vej1i"},{"post_id":"ckgevbbng002fg0v8grrf90fs","category_id":"ckgevbbnt003zg0v8fm97dn27","_id":"ckgevbbnv0046g0v848sxhkj9"},{"post_id":"ckgevbbnh002ig0v807ot8unp","category_id":"ckgevbbnu0043g0v8f51ea7o9","_id":"ckgevbbnw004ag0v835qldyu3"},{"post_id":"ckgevbbni002lg0v897aze9q6","category_id":"ckgevbbnv0047g0v8e9qs8vpj","_id":"ckgevbbnw004eg0v8hidbhfwy"},{"post_id":"ckgevbbnj002pg0v883c26wh5","category_id":"ckgevbbnw004bg0v84gt1dwp9","_id":"ckgevbbnx004gg0v89s7ka503"},{"post_id":"ckgevbbov004hg0v804ycb6hl","category_id":"ckgevbbp1004kg0v82kwld6qg","_id":"ckgevbbp3004og0v8g96j1e7h"}],"PostTag":[{"post_id":"ckgevbbma0000g0v81alm3rf6","tag_id":"ckgevbbmh0003g0v8cnml5zm1","_id":"ckgevbbmk0009g0v80l2sb68r"},{"post_id":"ckgevbbme0001g0v83bvt2s9z","tag_id":"ckgevbbmk0008g0v8bb9k6f5v","_id":"ckgevbbmo000gg0v811nua98x"},{"post_id":"ckgevbbmh0004g0v830fbhzg7","tag_id":"ckgevbbmm000eg0v88ya5humc","_id":"ckgevbbms000mg0v8dp8hbmnz"},{"post_id":"ckgevbbmi0005g0v851ztg27x","tag_id":"ckgevbbmr000kg0v81eu2b1ih","_id":"ckgevbbmu000sg0v87w3fezkm"},{"post_id":"ckgevbbmv000tg0v87muu6if1","tag_id":"ckgevbbmt000qg0v8gp70fvmi","_id":"ckgevbbmw000yg0v88g749rar"},{"post_id":"ckgevbbmj0006g0v8h6t52gle","tag_id":"ckgevbbmt000qg0v8gp70fvmi","_id":"ckgevbbmx0011g0v871kyacfn"},{"post_id":"ckgevbbmv000wg0v80e3a15kg","tag_id":"ckgevbbmt000qg0v8gp70fvmi","_id":"ckgevbbmz0016g0v8evs98i87"},{"post_id":"ckgevbbmk000ag0v874ff2g87","tag_id":"ckgevbbmw000xg0v81gz1b0z8","_id":"ckgevbbn00019g0v853o26me1"},{"post_id":"ckgevbbmy0013g0v833yac2id","tag_id":"ckgevbbmt000qg0v8gp70fvmi","_id":"ckgevbbn1001eg0v8bmfma9sf"},{"post_id":"ckgevbbml000bg0v86jkn81a2","tag_id":"ckgevbbmy0014g0v8d2xmbagc","_id":"ckgevbbn2001hg0v87l99bw9v"},{"post_id":"ckgevbbmo000fg0v8bnmwb5zm","tag_id":"ckgevbbmy0014g0v8d2xmbagc","_id":"ckgevbbn6001ng0v8dgaq7irl"},{"post_id":"ckgevbbmo000hg0v8aasa9ehe","tag_id":"ckgevbbmt000qg0v8gp70fvmi","_id":"ckgevbbn8001tg0v8arcvfodm"},{"post_id":"ckgevbbmr000lg0v854iu9e5i","tag_id":"ckgevbbn7001rg0v853v3ci50","_id":"ckgevbbna001zg0v89xzmchbf"},{"post_id":"ckgevbbms000ng0v89cxd9cjf","tag_id":"ckgevbbn9001xg0v80cedblz5","_id":"ckgevbbnc0025g0v87y5agh3j"},{"post_id":"ckgevbbmw000zg0v81yspbaon","tag_id":"ckgevbbnc0024g0v89bdidfee","_id":"ckgevbbnf002cg0v83ri37boh"},{"post_id":"ckgevbbnf002bg0v8822m3pbm","tag_id":"ckgevbbmy0014g0v8d2xmbagc","_id":"ckgevbbnh002hg0v89l1pbt3j"},{"post_id":"ckgevbbmz0017g0v89m2330ad","tag_id":"ckgevbbnc0024g0v89bdidfee","_id":"ckgevbbni002jg0v8ai0ebdvh"},{"post_id":"ckgevbbn0001ag0v878uhd22m","tag_id":"ckgevbbng002gg0v85y99hxtw","_id":"ckgevbbnk002qg0v8hu4a3pam"},{"post_id":"ckgevbbn1001fg0v86dmd55j3","tag_id":"ckgevbbnc0024g0v89bdidfee","_id":"ckgevbbnm002vg0v82d35372v"},{"post_id":"ckgevbbnk002rg0v8hrb7c730","tag_id":"ckgevbbnc0024g0v89bdidfee","_id":"ckgevbbnm002yg0v897ec27vi"},{"post_id":"ckgevbbn2001ig0v88jtn1y1o","tag_id":"ckgevbbnl002ug0v8a9pg5arl","_id":"ckgevbbnn0031g0v81na29c3f"},{"post_id":"ckgevbbn3001mg0v86i3u9rbo","tag_id":"ckgevbbnn002zg0v832rj84dq","_id":"ckgevbbno0035g0v80c61da8s"},{"post_id":"ckgevbbn6001og0v85an89mjv","tag_id":"ckgevbbno0034g0v84nnte5xw","_id":"ckgevbbnp0039g0v8b9hn7vr3"},{"post_id":"ckgevbbn8001sg0v8dnee39jf","tag_id":"ckgevbbnn002zg0v832rj84dq","_id":"ckgevbbnq003dg0v8df2p2vl1"},{"post_id":"ckgevbbn8001ug0v89nmg8m28","tag_id":"ckgevbbnc0024g0v89bdidfee","_id":"ckgevbbnq003hg0v8eytn2ozn"},{"post_id":"ckgevbbn9001yg0v871jzawwd","tag_id":"ckgevbbnq003gg0v83cio2t6y","_id":"ckgevbbnr003lg0v8aco5gi4d"},{"post_id":"ckgevbbna0020g0v8aherf3of","tag_id":"ckgevbbnr003kg0v816722ljm","_id":"ckgevbbnr003pg0v8aylpfwcg"},{"post_id":"ckgevbbnb0023g0v81j8uezll","tag_id":"ckgevbbnr003og0v8btocejlt","_id":"ckgevbbns003tg0v8bqv3bwrq"},{"post_id":"ckgevbbnc0026g0v81uopg7io","tag_id":"ckgevbbns003sg0v8ebw5buyl","_id":"ckgevbbnt003xg0v8g119g5x6"},{"post_id":"ckgevbbnd0029g0v8fmro38nz","tag_id":"ckgevbbnt003wg0v8gq6u4cdl","_id":"ckgevbbnu0041g0v8g59e1pur"},{"post_id":"ckgevbbng002fg0v8grrf90fs","tag_id":"ckgevbbnu0040g0v8hiur17xd","_id":"ckgevbbnu0045g0v8c7sp2ipi"},{"post_id":"ckgevbbnh002ig0v807ot8unp","tag_id":"ckgevbbnu0044g0v85apr8ziy","_id":"ckgevbbnv0049g0v8a71mcfed"},{"post_id":"ckgevbbni002lg0v897aze9q6","tag_id":"ckgevbbnv0048g0v86n367d94","_id":"ckgevbbnw004dg0v83v0phm9z"},{"post_id":"ckgevbbnj002pg0v883c26wh5","tag_id":"ckgevbbnw004cg0v85p3zdccj","_id":"ckgevbbnx004fg0v8bgmhd5j9"},{"post_id":"ckgevbbov004hg0v804ycb6hl","tag_id":"ckgevbbp1004lg0v86a05d5bl","_id":"ckgevbbp2004ng0v80c2ldur2"}],"Tag":[{"name":"http","_id":"ckgevbbmh0003g0v8cnml5zm1"},{"name":"Docker Compose","_id":"ckgevbbmk0008g0v8bb9k6f5v"},{"name":"Dockerfile","_id":"ckgevbbmm000eg0v88ya5humc"},{"name":"docker","_id":"ckgevbbmr000kg0v81eu2b1ih"},{"name":"mybatis","_id":"ckgevbbmt000qg0v8gp70fvmi"},{"name":"SpringCloud","_id":"ckgevbbmw000xg0v81gz1b0z8"},{"name":"Spring","_id":"ckgevbbmy0014g0v8d2xmbagc"},{"name":"docker,oracle","_id":"ckgevbbn7001rg0v853v3ci50"},{"name":"java8","_id":"ckgevbbn9001xg0v80cedblz5"},{"name":"mysql","_id":"ckgevbbnc0024g0v89bdidfee"},{"name":"jdk","_id":"ckgevbbng002gg0v85y99hxtw"},{"name":"swagger","_id":"ckgevbbnl002ug0v8a9pg5arl"},{"name":"笔记","_id":"ckgevbbnn002zg0v832rj84dq"},{"name":"node","_id":"ckgevbbno0034g0v84nnte5xw"},{"name":"分布式锁","_id":"ckgevbbnq003gg0v83cio2t6y"},{"name":"eclipse","_id":"ckgevbbnr003kg0v816722ljm"},{"name":"java规范","_id":"ckgevbbnr003og0v8btocejlt"},{"name":"Hyperledger Fabric","_id":"ckgevbbns003sg0v8ebw5buyl"},{"name":"quartz","_id":"ckgevbbnt003wg0v8gq6u4cdl"},{"name":"键盘","_id":"ckgevbbnu0040g0v8hiur17xd"},{"name":"activiti","_id":"ckgevbbnu0044g0v85apr8ziy"},{"name":"rabbitMQ","_id":"ckgevbbnv0048g0v86n367d94"},{"name":"阿里云服务器","_id":"ckgevbbnw004cg0v85p3zdccj"},{"name":"编程规约","_id":"ckgevbbp1004lg0v86a05d5bl"}]}}