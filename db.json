{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/Deadpool.jpg","path":"images/Deadpool.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/aliReward.jpg","path":"images/aliReward.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatReward.jpg","path":"images/wechatReward.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas_ribbon/LICENSE","path":"lib/canvas_ribbon/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas_ribbon/README.md","path":"lib/canvas_ribbon/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas_ribbon/canvas-ribbon.js","path":"lib/canvas_ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flat-top.min.css","path":"lib/pace/pace-theme-flat-top.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-material.min.css","path":"lib/pace/pace-theme-material.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/LICENSE","path":"lib/three/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/README.md","path":"lib/three/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/gulpfile.js","path":"lib/three/gulpfile.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/package.json","path":"lib/three/package.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/renovate.json","path":"lib/three/renovate.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","path":"lib/three/lib/CanvasRenderer.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/lib/Projector.js","path":"lib/three/lib/Projector.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","path":"lib/three/src/canvas_sphere.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","path":"lib/three/src/canvas_lines.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/src/three-waves.js","path":"lib/three/src/three-waves.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1592289389415},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1592289389415},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1592289389415},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1592289389431},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1592289389431},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1592289389431},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1592289389431},{"_id":"themes/next/_config.yml","hash":"df55446bb823013f7a16810eb0b10e6f89a9adcb","modified":1592301738292},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1592289389431},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1592289389431},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1592289389446},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1592289389493},{"_id":"source/about/index.md","hash":"e7840e808b045c76c449dde388f509bc0729e1cf","modified":1592300346979},{"_id":"source/_posts/14种常见的HTTP返回状态码.md","hash":"35e5cbd31cccc9f1cf2b1d8e1505301395638cef","modified":1592279753524},{"_id":"source/_posts/Dockerfile指令详解.md","hash":"09f620cd4f1a43b96ced760c9bb9179b9fdf37eb","modified":1593850346701},{"_id":"source/_posts/Docker基础.md","hash":"4b03aaa2b5de7930e877e37965737ef337fb56e3","modified":1593844258366},{"_id":"source/_posts/Mybatis-缓存-的知识点.md","hash":"90c9b59820e8ce5434c43016b7af645b060ea6fe","modified":1592279753524},{"_id":"source/_posts/Spring-编程式事务.md","hash":"30941ff0f5489cd73f6935f24f01b2eef2f86326","modified":1592279753525},{"_id":"source/_posts/Spring-声明式事务注解-Transactional.md","hash":"8b632aabb6d9a34a1e1edc4c461c9dbb9eca154f","modified":1592279753525},{"_id":"source/_posts/hello-world.md","hash":"e32917c15a112c5d92ab95143d62d7e92876b998","modified":1592279753526},{"_id":"source/_posts/mybatic初学环境搭建.md","hash":"1b0462bef83d5d9fe3bbb7541df32deb33745230","modified":1592279753526},{"_id":"source/_posts/mybatis-延迟加载和立即加载的实现.md","hash":"889f17c36e314871ad495091aa0e5947ad25aa7c","modified":1592279753527},{"_id":"source/_posts/mybatis表间关系，多表联查如何定义实体和返回类型.md","hash":"c86cfee984114edfe76cfaee81cebb6d0ef332ec","modified":1592279753527},{"_id":"source/_posts/mybatis连接池的3种配置方式.md","hash":"6c5380498598180fbad09bf634d444029548ddd9","modified":1592279753528},{"_id":"source/_posts/mysql删除database报错ERROR-1010-HY000-Error-dropping-database-can-t-rmdir-library-errno.md","hash":"af4d97a788aed1b230ab8751040b0a2b14aeaec9","modified":1592279753528},{"_id":"source/_posts/mysql联合主键.md","hash":"d6546280fa99a46ec2cdd5204eb825db66025104","modified":1592279753529},{"_id":"source/_posts/sql获取当前插入表的id.md","hash":"f1b01287565fa56d7bac2713fe09b3a2c6a6bd29","modified":1592279753530},{"_id":"source/_posts/org-xml-sax-SAXNotRecognizedException-Feature-http-apache-org-xml-features-val.md","hash":"3d428a3b278c568c8343a4be66d09f63b302b237","modified":1593827787045},{"_id":"source/_posts/swagger接口文档UI界面的方法点不开，只能点统一展开，关闭.md","hash":"8a0f1c5451a3ca40fe3aab7c079e99e6e1c22cea","modified":1592279753530},{"_id":"source/_posts/windows下升级node-js-在cmd-运行n-stable报错bash不是内部或外部命令，也不是可运行的程序-或批处理文件.md","hash":"a682c87664d85127430cd7f9602ec6f5bc76d5a6","modified":1592279753531},{"_id":"source/_posts/《thinking-in-java》读书笔记.md","hash":"471d6ac7b68931336c25f3c9b3d8f3f85955b6b2","modified":1592279753532},{"_id":"source/_posts/《thinking-in-java》读书笔记2：对象.md","hash":"125be7a757f581980739fcc456016fb84a87e351","modified":1592279753532},{"_id":"source/_posts/使用dhcp始终无法连接mysql的问题解决.md","hash":"73870d9090c739e05f57ea7fcbbdf42409526d68","modified":1592279753533},{"_id":"source/_posts/使用eclipse导入myeclipse项目无法识别为web项目问题的解决.md","hash":"b76df1b63ab037eb194ed58574df71de5e43c327","modified":1592279753533},{"_id":"source/_posts/区分项目中的数据实体目录-entity，dto-vo.md","hash":"03620370fa75feda9cbc04c70c94d1d551d03081","modified":1592279753534},{"_id":"source/_posts/在学Spring-Aop-发现的注意点.md","hash":"a081eeb765aa36688369502a994fd893cc644ed9","modified":1592279753534},{"_id":"source/_posts/戴尔惠普华硕笔记本Fn键反了，按F1、F2等键出来Fn-F1、F2的效果.md","hash":"b922f672c60be168eaf281c0cce2161e086d6b96","modified":1592279753535},{"_id":"source/_posts/解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题.md","hash":"a2bb718a556616bd01267f48a600e99ab00d077e","modified":1592279753535},{"_id":"source/_posts/阿里云centos7-运行tomcat-之后远程无法访问的解决.md","hash":"83d49dba751fdaf1dece2c6b358c00654a104b13","modified":1592279753536},{"_id":"source/categories/index.md","hash":"23dd124bbb7e99c9d363523bd2e9380e840a7b8a","modified":1592291518762},{"_id":"source/tags/index.md","hash":"db56fb75a0ba726d74eb556ebcd41a50293d054e","modified":1592291538996},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1592289389415},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1592289389415},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1592289389431},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1592289389431},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1592289389431},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1592289389431},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1592289389431},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1592289389431},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1592289389431},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1592289389431},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1592289389431},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1592289389431},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1592289389431},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1592289389431},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1592289389431},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1592289389431},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1592289389431},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1592289389431},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1592289389431},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1592289389431},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1592289389446},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1592289389446},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1592289389446},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1592289389446},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1592289389446},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1592289389446},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1592289389446},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1592289389446},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1592289389446},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1592289389446},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1592289389446},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1592289389446},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1592289389446},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1592289389446},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1592289389446},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1592289389446},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1592289389446},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1592289389446},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1592289389446},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1592289389446},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1592289389446},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1592289389446},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1592289389462},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1592289389493},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1592289389493},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1592289389493},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1592289389493},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1592289389493},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1592289389493},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1592289389513},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1592289389415},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1592289389415},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1592289389431},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1592289389431},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1592289389431},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1592289389431},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1592289389431},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1592289389446},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1592289389431},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1592289389446},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1592289389446},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1592289389446},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1592289389446},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1592289389446},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1592289389446},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1592289389446},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1592289389446},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1592289389462},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1592289389462},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1592289389462},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0e650e97d5fadc4b8a9a0fec00fe7db642dc3f76","modified":1592289389462},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1592289389462},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1592289389462},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1592289389462},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1592289389462},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1592289389477},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1592289389477},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1592289389477},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1592289389477},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1592289389477},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1592289389477},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1592289389477},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1592289389477},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1592289389477},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1592289389493},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1592289389509},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1592289389509},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1592289389510},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1592289389511},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1592289389511},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1592289389512},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1592289389512},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1592289389510},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1592289389513},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1592289389514},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1592289389514},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1592289389515},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1592289389516},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1592289389516},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1592289389517},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1592289389517},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1592289389518},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1592289389518},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1592289389518},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1592289389519},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1592289389541},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1592289389557},{"_id":"themes/next/source/images/Deadpool.jpg","hash":"7fdbe7b7a68556d510e595962c11f06743fc5b3f","modified":1592289792702},{"_id":"themes/next/source/images/aliReward.jpg","hash":"12c7d07723ad7ac16daef63c2399fbd21d0b85ce","modified":1592291744877},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1592289389557},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1592289389557},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1592289389557},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1592289389557},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1592289389557},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1592289389557},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1592289389557},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1592289389557},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1592289389557},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1592289389557},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1592289389557},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1592289389557},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1592289389557},{"_id":"themes/next/source/images/wechatReward.jpg","hash":"bf5ce68d793e84674b2e8c821692e66b2d4d9865","modified":1592291744877},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1592289389572},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1592289389572},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1592289389572},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1592289389572},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1592289389572},{"_id":"themes/next/source/js/utils.js","hash":"53ce574c301a8b958e7f825beb193c77fb975e33","modified":1592289389572},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1592289389572},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1592289389462},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1592289389462},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1592289389462},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1592289389462},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1592289389462},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1592289389462},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1592289389462},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1592289389462},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1592289389462},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1592289389462},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1592289389462},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1592289389462},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1592289389462},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1592289389462},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1592289389462},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1592289389462},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1592289389462},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1592289389462},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1592289389477},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1592289389477},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1592289389477},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1592289389477},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1592289389477},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1592289389477},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1592289389477},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1592289389477},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1592289389477},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1592289389477},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1592289389477},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1592289389477},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1592289389477},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1592289389477},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1592289389477},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1592289389477},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1592289389477},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1592289389477},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1592289389477},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1592289389477},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1592289389493},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1592289389493},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1592289389493},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1592289389493},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1592289389493},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1592289389493},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1592289389493},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1592289389493},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1592289389493},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1592289389493},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1592289389493},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1592289389493},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1592289389493},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1592289389493},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1592289389493},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1592289389493},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1592289389493},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1592289389493},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1592289389493},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1592289389509},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1592289389493},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1592289389557},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1592289389557},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1592289389557},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1592289389557},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1592289389557},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1592289389572},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1592289389572},{"_id":"themes/next/source/lib/canvas_ribbon/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1592301178008},{"_id":"themes/next/source/lib/canvas_ribbon/README.md","hash":"da243fc43315d5953438dab71eb59dc3961c33e3","modified":1592301178008},{"_id":"themes/next/source/lib/canvas_ribbon/canvas-ribbon.js","hash":"62ff1ba692f3153d0288c514c42c6c92cc17e9b6","modified":1592301178008},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1592295382810},{"_id":"themes/next/source/lib/pace/README.md","hash":"6f22149ab4cd861d653970591c81670625aa1fdc","modified":1592295382811},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1592295382811},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1592295382812},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1592295382812},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1592295382813},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1592295382813},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1592295382814},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1592295382814},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1592295382815},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1592295382815},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1592295382816},{"_id":"themes/next/source/lib/pace/pace-theme-flat-top.min.css","hash":"544f038c983e2be5f7fc04ce6615f7b70e4554fe","modified":1592295382816},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1592295382817},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1592295382817},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1592295382819},{"_id":"themes/next/source/lib/pace/pace-theme-material.min.css","hash":"131747a1e6982312ae3777998a99763b684d3290","modified":1592295382819},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1592295382820},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1592289389572},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1592289389572},{"_id":"themes/next/source/lib/three/.gitignore","hash":"5767276045f60da2350895a59aa6e138b0e83294","modified":1592301697656},{"_id":"themes/next/source/lib/three/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1592301697657},{"_id":"themes/next/source/lib/three/README.md","hash":"76071f107e07113ccb23192680782577a15c5350","modified":1592301697658},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"558838e0821f76c1e6d58add25116853caa1976c","modified":1592301697658},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"1b371d908c6729f15877601792583e25cc4e6091","modified":1592301697659},{"_id":"themes/next/source/lib/three/gulpfile.js","hash":"8667c49d81292b55e4ec8c0ec9f8eb42f4ababab","modified":1592301697659},{"_id":"themes/next/source/lib/three/package.json","hash":"ff493a283c04f87a272abdffa8aa29fb4368b803","modified":1592301697662},{"_id":"themes/next/source/lib/three/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1592301697662},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"62fe85b767c525a07bbec1193c0840ee924dad9a","modified":1592301697664},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1592289389520},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1592289389521},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1592289389521},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1592289389525},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1592289389525},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1592289389525},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1592289389541},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1592289389541},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1592289389541},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1592289389541},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1592289389541},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1592289389541},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1592289389541},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1592289389541},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1592289389541},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1592289389541},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1592289389541},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1592289389541},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1592289389541},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1592289389541},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1592289389557},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1592289389557},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1592289389557},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1592289389557},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1592289389557},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1592289389557},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1592289389557},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1592289389557},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1592289389557},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1592289389557},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1592289389557},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1592289389557},{"_id":"themes/next/source/lib/canvas_ribbon/.git/config","hash":"859dd85203388dc5f882e8b78019889577e2dbb2","modified":1592301178004},{"_id":"themes/next/source/lib/canvas_ribbon/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1592301174861},{"_id":"themes/next/source/lib/canvas_ribbon/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1592301177998},{"_id":"themes/next/source/lib/canvas_ribbon/.git/index","hash":"9c88613928a0ef5ccbe87308cadbfeef3de5471e","modified":1592301178008},{"_id":"themes/next/source/lib/canvas_ribbon/.git/packed-refs","hash":"e55381c104636e557eee6a03a73d0dad202115d6","modified":1592301177992},{"_id":"themes/next/source/lib/canvas_ribbon/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1592301178008},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1592289389572},{"_id":"themes/next/source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1592295382794},{"_id":"themes/next/source/lib/pace/.git/config","hash":"fadcc75e42b86ee74d05ce56b08984ec6b034e5e","modified":1592295382801},{"_id":"themes/next/source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1592295379880},{"_id":"themes/next/source/lib/pace/.git/index","hash":"ac4aaa03e2891d6757a2aad5e39b936bfa916e07","modified":1592295382820},{"_id":"themes/next/source/lib/pace/.git/packed-refs","hash":"adc7df4738719da39d81d0bae998b14f717f61a3","modified":1592295382775},{"_id":"themes/next/source/lib/pace/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1592295382810},{"_id":"themes/next/source/lib/three/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1592301697639},{"_id":"themes/next/source/lib/three/.git/config","hash":"c9c13087a3f33e6f46cd35a93c8b9bdf27618852","modified":1592301697646},{"_id":"themes/next/source/lib/three/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1592301689983},{"_id":"themes/next/source/lib/three/.git/index","hash":"01a65965a5ca49a1497f865aab2079d15bc9c7cd","modified":1592301697669},{"_id":"themes/next/source/lib/three/.git/packed-refs","hash":"e448518db2cfb7e05d8737757bec728b2c6d5558","modified":1592301697634},{"_id":"themes/next/source/lib/three/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1592301697656},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","hash":"71141daa39bbcedcf14ae95c05023a57828a5a43","modified":1592301697660},{"_id":"themes/next/source/lib/three/lib/Projector.js","hash":"69725cd0af6868c5aa059343cc6e18e0c10b2f2e","modified":1592301697661},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","hash":"8381c792b161001a1b5cf39613c6d48e2588b3ce","modified":1592301697663},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","hash":"10795d7f1e5393b2b5e1529b017ee4e0ffe82ac9","modified":1592301697663},{"_id":"themes/next/source/lib/three/src/three-waves.js","hash":"ac382962d408f16acf07b925b94bb15495b5207c","modified":1592301697664},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1592289389572},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1592289389572},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1592289389572},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1592289389522},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1592289389523},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1592289389523},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1592289389524},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1592289389524},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1592289389525},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1592289389525},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1592289389525},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1592289389525},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1592289389525},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1592289389525},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1592289389525},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1592289389525},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1592289389525},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1592289389525},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1592289389525},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1592289389525},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1592289389525},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1592289389525},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1592289389525},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1592289389525},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1592289389525},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1592289389525},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1592289389525},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1592289389525},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1592289389525},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1592289389525},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1592289389525},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1592289389541},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1592289389541},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1592289389541},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1592289389541},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1592289389541},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1592289389541},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1592289389525},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1592289389525},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1592289389525},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1592289389525},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1592289389525},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1592289389525},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1592289389525},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1592289389541},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1592289389541},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1592289389541},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1592289389541},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1592289389541},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1592289389541},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1592289389541},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1592289389541},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1592289389541},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1592289389541},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1592289389541},{"_id":"themes/next/source/lib/canvas_ribbon/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1592301174863},{"_id":"themes/next/source/lib/canvas_ribbon/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1592301174862},{"_id":"themes/next/source/lib/canvas_ribbon/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1592301174862},{"_id":"themes/next/source/lib/canvas_ribbon/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1592301174863},{"_id":"themes/next/source/lib/canvas_ribbon/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1592301174864},{"_id":"themes/next/source/lib/canvas_ribbon/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1592301174864},{"_id":"themes/next/source/lib/canvas_ribbon/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1592301174865},{"_id":"themes/next/source/lib/canvas_ribbon/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1592301174865},{"_id":"themes/next/source/lib/canvas_ribbon/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1592301174866},{"_id":"themes/next/source/lib/canvas_ribbon/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1592301174866},{"_id":"themes/next/source/lib/canvas_ribbon/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1592301174867},{"_id":"themes/next/source/lib/canvas_ribbon/.git/logs/HEAD","hash":"3c0bf8189f8126ce74098870ad2e74212fe92fb4","modified":1592301178000},{"_id":"themes/next/source/lib/pace/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1592295379881},{"_id":"themes/next/source/lib/pace/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1592295379881},{"_id":"themes/next/source/lib/pace/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1592295379882},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1592295379882},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1592295379882},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1592295379883},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1592295379883},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1592295379884},{"_id":"themes/next/source/lib/pace/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1592295379884},{"_id":"themes/next/source/lib/pace/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1592295379884},{"_id":"themes/next/source/lib/pace/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1592295379885},{"_id":"themes/next/source/lib/pace/.git/logs/HEAD","hash":"cb345c893ab6756cee607b6cb5cd0a64377976da","modified":1592295382797},{"_id":"themes/next/source/lib/three/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1592301689983},{"_id":"themes/next/source/lib/three/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1592301689983},{"_id":"themes/next/source/lib/three/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1592301689983},{"_id":"themes/next/source/lib/three/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1592301689983},{"_id":"themes/next/source/lib/three/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1592301689983},{"_id":"themes/next/source/lib/three/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1592301689983},{"_id":"themes/next/source/lib/three/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1592301689983},{"_id":"themes/next/source/lib/three/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1592301689983},{"_id":"themes/next/source/lib/three/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1592301689983},{"_id":"themes/next/source/lib/three/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1592301689983},{"_id":"themes/next/source/lib/three/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1592301689983},{"_id":"themes/next/source/lib/three/.git/logs/HEAD","hash":"556dee2b39ffdb73d9abe1c4bf8d13c7bf545923","modified":1592301697642},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/02/5cf882fc75a324b1d71b0921eb52ea427387fd","hash":"4a0f15d00f50c629f01c2274e26ef05b3779b6c6","modified":1592301177928},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1592301177934},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/15/9cfb8a3050111dfb3e6635e3f37fe68de2ab30","hash":"f4e1752896135edd6c9a36164b45893a59839548","modified":1592301177946},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/25/3593d429ba9f66eb536d2577e4aa8b74ed7dfa","hash":"b68bb1519d36e82753367a811009e5850db4ddce","modified":1592301177918},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/25/3acc9a19f8a5047f053ea8b4a62684a4204939","hash":"d2210d7c39aa3801a198b38651a3f013d27bdd46","modified":1592301177954},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/20/47d8728f7950fcc2276c339ee199302805838d","hash":"813e7f6c3b8954c40b250e6ba592d6bac7874397","modified":1592301177949},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/2b/41ae14433eb4a13cd99ac9736635723e813c32","hash":"0e30e5106b7021432c917699f60684276e727eb9","modified":1592301177916},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1592301177935},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/39/ea36a17ae4ce235f97d0cc1993cc51f932aa16","hash":"d3b328e06996ff12a2cf1f546bb78ab37a0b3b50","modified":1592301177953},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/56/4913335d11e112ac80e8d550c8347016007f6d","hash":"50e9db730ceac6b2d0c8e8d5a3fec450290fdd8e","modified":1592301177938},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/57/6d268825c6e7b3892828b61b9b408600faa1f2","hash":"2ca9617d2459b9e010e71b3b221fec42d76cae32","modified":1592301177947},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/58/76c74f8c24cb9306189bf49fdf937b955c065c","hash":"283c92c40dc84fa11eba7c8b2ee8c5234dbf7ee6","modified":1592301177955},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/58/b315e0ea2584550eebcda4f1c17a9a7f2bea16","hash":"c7dc07b78ad53f0f515b3243a0ff09fb8ddb8235","modified":1592301177956},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/5d/93512df328612ac84d124d0a64f78ddcd7ec28","hash":"94dc5692c542e87ed40ce00ab5e5d72d4ae78f23","modified":1592301177932},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1592301177936},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/6c/34e310dd41c6bfa8db842190388ab83e6d4fa2","hash":"b327c0ce763240a6a8bd2f3fb55ace6b9e3df671","modified":1592301177931},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/7e/871dba93cad35ffcec76a936259ae9a3641bc7","hash":"957e9e7db09ee72fc49ca852d3cc67242567fa45","modified":1592301177951},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/a2/822bd3b1fad40e718ded64ddfac693c4ac24c4","hash":"14b60f650711229ee8301f49e8403bb4bb991e09","modified":1592301177941},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/a4/14bc6b6b6deb276c361d14724cdc6aa9b65b84","hash":"5252d85b51d1de339004b7f6b2cd9efce16730c8","modified":1592301177958},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/a5/b8ea74a3afbc760b01b6d4bd432f4f1ace013e","hash":"afdcce658085edbf16ce7f4719bec0cb5536e77f","modified":1592301177960},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/ab/2197a6f5baffdd1d2895c169f4777921cc4027","hash":"81a75ca40bcfd278d6a9d67dedc8d61d959e2baa","modified":1592301177950},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/b9/07949515b208cc605b513ff9d5b8153cbe2fe1","hash":"8fb6e8f2e6b4df8787239335ef9777a6c888d3c0","modified":1592301177944},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/c5/8416b72bd371aaf3bc8952f819c1afd3e4c0b4","hash":"aa8e6e340697fc6d9697c1ab8213ee40aca4ea82","modified":1592301177942},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/bc/43844047aa08d2b58a40fe3915a8382214a588","hash":"34086f267f92f39ea9819a5eafc04921661467d7","modified":1592301177939},{"_id":"themes/next/source/lib/canvas_ribbon/.git/objects/c6/d0381e6cd08086561110f76b5f921bf81a6f87","hash":"be98eb9329c91132e90d942a44d05a41c78b4470","modified":1592301177929},{"_id":"themes/next/source/lib/canvas_ribbon/.git/refs/heads/master","hash":"16bd947558482613ed699f6cd50bfef39a7837da","modified":1592301178000},{"_id":"themes/next/source/lib/pace/.git/objects/08/38a9623fabb4014d7ed7c0fa4ff8a5bc5e697e","hash":"aeee9d11c3a4c1dec1ad8414dca14e5aa9ca2b7d","modified":1592295382410},{"_id":"themes/next/source/lib/pace/.git/objects/00/13175fe71888324d9142744034e8296501174a","hash":"0ad0e50f7fe91fe14491924aa4b1e2e8f060a5cd","modified":1592295382426},{"_id":"themes/next/source/lib/pace/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1592295382422},{"_id":"themes/next/source/lib/pace/.git/objects/1c/159365320ef5dde63906912f3df067376b40d0","hash":"1dd6b7373c3f9c67e34aa319c9c08fd0f667156a","modified":1592295382703},{"_id":"themes/next/source/lib/pace/.git/objects/23/4f9b3e93f06a85cb2ec01acc872ccdc2bec7cb","hash":"63f8640eceff35a80175a102fcbd8789e690cfaa","modified":1592295382705},{"_id":"themes/next/source/lib/pace/.git/objects/27/8da13dccb38df6bb34360d4919ee2ba81ea6c7","hash":"c5618315849061059ddd6cbea8e11252c561cf48","modified":1592295382715},{"_id":"themes/next/source/lib/pace/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1592295382423},{"_id":"themes/next/source/lib/pace/.git/objects/35/a749d823ad0aae6111a76dc501a1170478f376","hash":"e757129fb6bca3170b62b05f3e850e4b55f3ae88","modified":1592295382697},{"_id":"themes/next/source/lib/pace/.git/objects/3e/dcd352d2a1a60dbb6a43e7e9f00bab8b55791a","hash":"725bf5094855cd943dd1cd351906fb1ebec1d861","modified":1592295382432},{"_id":"themes/next/source/lib/pace/.git/objects/41/28e69301ad36a283c0fc523f3aef89644d2467","hash":"d8b985cf431fbdc5b4fa3be89e27db7a3437c920","modified":1592295382707},{"_id":"themes/next/source/lib/pace/.git/objects/49/0db22b657dd64430d003fe2831905a54858b22","hash":"43694656c4c331cfa3667afca630bd486ac0d0fe","modified":1592295382692},{"_id":"themes/next/source/lib/pace/.git/objects/49/234ebf40b265bb9664d22bc391237ff856a3df","hash":"b527eb3cde1e78771ff68c5f633a3cf91816e274","modified":1592295382716},{"_id":"themes/next/source/lib/pace/.git/objects/4d/fbb499a4f7b2f26a535c335cd66c966ff8b261","hash":"14e4cdcc137045c7efed32f796273d40c9fcef87","modified":1592295382694},{"_id":"themes/next/source/lib/pace/.git/objects/53/3d55db0342c2b011ac05703c3b42e88a25c1ed","hash":"c48454760d2e04602a5499188b33d38839c58aee","modified":1592295382696},{"_id":"themes/next/source/lib/pace/.git/objects/5f/2920b23993e6476c3edc77f76eba566e74dd7e","hash":"122d8ac05247282340317587435273e6f3c5a188","modified":1592295382701},{"_id":"themes/next/source/lib/pace/.git/objects/60/0378418401f2b0e7c58407a7bbc5a5196cfa51","hash":"20489d796247dda758599f40cbfcf14d194ef64a","modified":1592295382414},{"_id":"themes/next/source/lib/pace/.git/objects/60/8cf35556105f51783ede3fa1e6c2102e8945de","hash":"2c71f7a2ff047119ee898a8edec216238710b89b","modified":1592295382428},{"_id":"themes/next/source/lib/pace/.git/objects/61/fcbe3a99ad371eacdf3a3703883f8e95e072c8","hash":"480b60d684f9a077ade5dda0acfc75bcd9597aff","modified":1592295382417},{"_id":"themes/next/source/lib/pace/.git/objects/68/54b8cf544e974998061fb08ea2bd96b561ed68","hash":"1aa0706b6495a5ebd70c3822ac3533df41940fb7","modified":1592295382699},{"_id":"themes/next/source/lib/pace/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1592295382425},{"_id":"themes/next/source/lib/pace/.git/objects/6a/fa2f52022b00caac3817898d4338ce4d99aa45","hash":"1a6e249ff197293bc3733ddb7eb99d82a21b9342","modified":1592295382709},{"_id":"themes/next/source/lib/pace/.git/objects/7e/7e5cf8a2a18caf4e0262d1656dea658374d5ae","hash":"47eb39060193e0032e3223b4dfc1a6a55f6612fd","modified":1592295382710},{"_id":"themes/next/source/lib/pace/.git/objects/82/8dcba3c8a21de08d1eb38f2eee453b51543188","hash":"629aad2ee2e564790e78cd46e99ad396544960ab","modified":1592295382434},{"_id":"themes/next/source/lib/pace/.git/objects/84/a17ac7b4fe9cea559de91f00af88f810bff7f1","hash":"b41b6d3cbccd75b711f0523bba1c26bf19b0a862","modified":1592295382413},{"_id":"themes/next/source/lib/pace/.git/objects/86/ab4cb05d5132451e71dc4ecf6ef663f7404126","hash":"53f157552aa57d405ce6ab58c424bb948c2820d8","modified":1592295382419},{"_id":"themes/next/source/lib/pace/.git/objects/8b/b4535a79cc15127f8906b24c4e0bb4a38a5947","hash":"9c2d65a63f18929b09f3592dda064f24309ff98b","modified":1592295382437},{"_id":"themes/next/source/lib/pace/.git/objects/97/1e8a1f2ad6d45f693980c106af0aead9d1c215","hash":"e45f0963920a53a57f6b53d178e5b05a8e315189","modified":1592295382429},{"_id":"themes/next/source/lib/pace/.git/objects/9b/3058068409f2282607ebb91717d7a6a1406230","hash":"651c5857021e11dc397df86dbe0f01e6c7dc7f16","modified":1592295382438},{"_id":"themes/next/source/lib/pace/.git/objects/a6/dbd9c99e726f621e2bdcd3c6fe2795a5d4272d","hash":"25350dd31f504af7206610ced355d162aabda8dd","modified":1592295382439},{"_id":"themes/next/source/lib/pace/.git/objects/aa/813c5a6398600e01b740696cd889eb3becad84","hash":"c62a1513ca820dc59fe1cd6d9ec16c92e0e2fbf0","modified":1592295382415},{"_id":"themes/next/source/lib/pace/.git/objects/c0/05c71f1a000d8187df58083d215c962d7f5505","hash":"dffd212ca2ec705233fabe82a6f483d6be4b151d","modified":1592295382435},{"_id":"themes/next/source/lib/pace/.git/objects/d4/7aaf8effab41aa414596c56dff4d35ff8da1f5","hash":"33e758f44ad48eb1540363a06c31bed1ed929c60","modified":1592295382712},{"_id":"themes/next/source/lib/pace/.git/objects/db/d45db3a1d6c09fdf30fc1f0bdc2c6fab5a0680","hash":"5c0bc5c141068651fcb47ef549f556d67153eecf","modified":1592295382397},{"_id":"themes/next/source/lib/pace/.git/objects/de/79ab6539ac3702aaac64b879d95e6575f4eefa","hash":"0046fefd52ed4679e0fee757cc91ced94e3ddc12","modified":1592295382706},{"_id":"themes/next/source/lib/pace/.git/objects/da/79363b808519d44a7eda67d7bc81e1587a06e8","hash":"0dc5dc27991da9a09d705e488bc3f1fe5a4d4728","modified":1592295382411},{"_id":"themes/next/source/lib/pace/.git/objects/e8/83088ed2cfe69a983e9e277a6b54b7de226344","hash":"2386487a5933380ac3305ea6b5744d75bdd07292","modified":1592295382420},{"_id":"themes/next/source/lib/pace/.git/objects/ec/6708dc18a5dd312a6735d4d09eddbdb76e75c2","hash":"66e03a78b2f1d36feb9f9347dd5e68e344c3ee68","modified":1592295382713},{"_id":"themes/next/source/lib/pace/.git/objects/f3/0e0a99bb016267bde55537dd47b3657ae59544","hash":"8bf0bc17a6111b6a82981073133f33cc8e815c41","modified":1592295382431},{"_id":"themes/next/source/lib/pace/.git/refs/heads/master","hash":"22684435265b2bb504024b34b80ffbd6786a2411","modified":1592295382796},{"_id":"themes/next/source/lib/three/.git/objects/03/c40a4b50e21c63a0e27b1fbcd014168ae3f6da","hash":"987ca2a1169e875a5ac73e8a1a906b9ae88d4d22","modified":1592301693317},{"_id":"themes/next/source/lib/three/.git/objects/03/eb19e6b3194a820c462bc63177b6fc2bda245f","hash":"0be88820832fa6ea30d56905e98b27798805dc92","modified":1592301693604},{"_id":"themes/next/source/lib/three/.git/objects/09/3d290f60c3b467d503633531d7ce7cdd42dd75","hash":"ab09bc8bfc9079e408dc6facc1bfd9aa5d6bdef9","modified":1592301696549},{"_id":"themes/next/source/lib/three/.git/objects/0b/de10292fcd5dd4b66d1bf60f62ea7d7a30b310","hash":"37710386189fe435ea20541a69c1a9b833b5f50b","modified":1592301693611},{"_id":"themes/next/source/lib/three/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1592301693309},{"_id":"themes/next/source/lib/three/.git/objects/0e/f76c758387d59ca0221cd50564e9edf7080c99","hash":"874d6d28ce21ce2873016183dd9e22b91f71c750","modified":1592301696927},{"_id":"themes/next/source/lib/three/.git/objects/15/e42465bbd9589d2112d7fe3328bd7f85c6b24f","hash":"c28f5e24b9b15ecfddd666711c6d6ef57317cb29","modified":1592301696564},{"_id":"themes/next/source/lib/three/.git/objects/19/65ef0ba0e2c1ad938cffdcbebed63048751ac6","hash":"75921c60b65a5606a85ab5cec185f430d844048d","modified":1592301697111},{"_id":"themes/next/source/lib/three/.git/objects/1a/f9d30697fd2194a4132a3a6647722be2eb75dc","hash":"0f686b4e26b1e751509ded8a2db697b1d7938004","modified":1592301693293},{"_id":"themes/next/source/lib/three/.git/objects/1b/3d1cd16f3e6ce99ea92c7e9c0b78ee30a8c346","hash":"16569e1c4912fd762f32b13de839d05b9c319e54","modified":1592301693302},{"_id":"themes/next/source/lib/three/.git/objects/1f/0b95a965630f47a7264fe9e9456ed7da36c2aa","hash":"6e98b6d7740bf53074339ce383089320fe1962b9","modified":1592301696232},{"_id":"themes/next/source/lib/three/.git/objects/1f/354734edae8d1fa1af07d20573698512589c4e","hash":"9f1bb3baf74e25329b553704be0a3c64e194df8c","modified":1592301696555},{"_id":"themes/next/source/lib/three/.git/objects/21/77c1416c8e91ed918b6d3cf7f333d99d659a24","hash":"7330016805a652c2153bfcfbdd4c3c50e5b5a642","modified":1592301696554},{"_id":"themes/next/source/lib/three/.git/objects/21/cbdd0d76bb18019bcb47aeec029fb13e211b09","hash":"c4466a47cecee06641b74dca59ed92665c24a5d7","modified":1592301696570},{"_id":"themes/next/source/lib/three/.git/objects/29/4f11136ee13277ee96ec3bb56d810f43655298","hash":"a294c3770aa5e7ed386075202f5b88048e1d170d","modified":1592301696544},{"_id":"themes/next/source/lib/three/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1592301693311},{"_id":"themes/next/source/lib/three/.git/objects/34/cbb2a80da03e4d233dcfa3f11fed64894b2de5","hash":"ddf0c1fdb72ed14c50b1d1718a122f5f2a38a3ed","modified":1592301696934},{"_id":"themes/next/source/lib/three/.git/objects/36/3db3ce197d25b8c64db663aa9000a181511461","hash":"f87bc2ce87e37d0ee60eceef8be89dae4c52e01d","modified":1592301693456},{"_id":"themes/next/source/lib/three/.git/objects/3a/4c8581b3aa0d4f9192de158bd4223a90d646b5","hash":"a64efe9f8e2db0ff3cfb7b5e71fedf229ce290fd","modified":1592301693312},{"_id":"themes/next/source/lib/three/.git/objects/3a/ae52073909b7ccdbd43538ee6c814691935c57","hash":"652619b1d76f267c1646b6167de80f58a520525e","modified":1592301697106},{"_id":"themes/next/source/lib/three/.git/objects/3a/cef7449b991ee78bb5b7f2f121996b9ec9bba4","hash":"d9165d5939be17750b9edad5d0fc32029e4a23d6","modified":1592301693612},{"_id":"themes/next/source/lib/three/.git/objects/3c/6fef4314903036253335d4550346f6b927c721","hash":"1ee4e7d110363dc5e2676b675c7f7030731cf3a5","modified":1592301696536},{"_id":"themes/next/source/lib/three/.git/objects/3e/4151e56ef50d7ff46a1ce73156c35ac6f1224d","hash":"a47d2e1895903aa7e1b51d35731f212ffc6a1718","modified":1592301696561},{"_id":"themes/next/source/lib/three/.git/objects/3f/f2616b188ab71e1abf2029d7d55834c5643fc5","hash":"65bbc360ee3cc66fba71b9fb0baa3cff744327b9","modified":1592301693319},{"_id":"themes/next/source/lib/three/.git/objects/42/d67e32b0d5f676f7462ad5b013f4eb8cad2486","hash":"fb1c4d377401f2145cc721d96fdf40d89ac23434","modified":1592301696932},{"_id":"themes/next/source/lib/three/.git/objects/4f/f48fd861ac49dd98ce52052bf6214f0a91facf","hash":"ae4d7b9a38e8913c055d37a6f129378d089bfd65","modified":1592301696573},{"_id":"themes/next/source/lib/three/.git/objects/52/71f18c203d24b27ec7bd977c2d5c61300cea1a","hash":"cdae53ba376df246585a2f44a86d0c7da98bca1f","modified":1592301696532},{"_id":"themes/next/source/lib/three/.git/objects/53/c865f8ff0aaa7ae2c8da7324dce73756ffe7c0","hash":"2d1c2dcfa342f46910a5698023b2c208bf3336e0","modified":1592301696884},{"_id":"themes/next/source/lib/three/.git/objects/64/d845d3aed3dce9eab9de39793f1c4d1d6e0deb","hash":"1c7346386e8c3d8830bf36bff7011976ba326b3e","modified":1592301696929},{"_id":"themes/next/source/lib/three/.git/objects/67/6b9f6189356d0201fd72dd6f98db19628a2ff5","hash":"250795ea0af79524945e66b28f233eb8bd9ee7dd","modified":1592301696528},{"_id":"themes/next/source/lib/three/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1592301693313},{"_id":"themes/next/source/lib/three/.git/objects/6e/a4473e91dc2dbc452ff446e7cb04cb2ff16da0","hash":"710066cce498e372a932ff272d3d0eb4345fe3cf","modified":1592301693294},{"_id":"themes/next/source/lib/three/.git/objects/6b/128053933889f264c239abe0d381523daa8fa5","hash":"23df1e6daed83528bc2f36980678ecc31e17f09e","modified":1592301693458},{"_id":"themes/next/source/lib/three/.git/objects/6f/f9f6347d48d4bc18b07a813f9140d7287df7aa","hash":"46232e003a90f98c78af21c4898ab37c66fda385","modified":1592301696567},{"_id":"themes/next/source/lib/three/.git/objects/70/0960a662785b70b5c72909810794e1c18e9891","hash":"ea3c3330dd0a213a3cebdc42ee57d43fb8f9813c","modified":1592301696234},{"_id":"themes/next/source/lib/three/.git/objects/79/ae5f64ea4be7e1a108b2f1fc8afbca7bfa1fba","hash":"4e28517d80599b1a6051b1d3f657654aca6333b9","modified":1592301693315},{"_id":"themes/next/source/lib/three/.git/objects/7b/a927a3390f9a6345039cdb5bc54c6a54297f69","hash":"0d10f821d9e61a27c3f9d9e03e923265693d68ab","modified":1592301697600},{"_id":"themes/next/source/lib/three/.git/objects/7d/2bcbb026e4a38ab45317d8b78bfed70ba25c51","hash":"05394b260c2c58ee38b7224bb4ecb52df1e7f354","modified":1592301696568},{"_id":"themes/next/source/lib/three/.git/objects/7d/d7c1e8f79dc9a9a99e290147528d7a47d46830","hash":"c2104c89bcf686b243061b456ddc86d916b84360","modified":1592301693614},{"_id":"themes/next/source/lib/three/.git/objects/7f/6a7ddb8a04644dc980d83c9878b4621acf82f5","hash":"c517caf5d47c9f1eba2ced6800dab03e2e29a130","modified":1592301693303},{"_id":"themes/next/source/lib/three/.git/objects/81/d7d11db23df8681d1a8242fb27252a9d2d7062","hash":"a294b374bb129cc8aaec9c01bf1df1c5addafe9d","modified":1592301696559},{"_id":"themes/next/source/lib/three/.git/objects/80/5e5d92b903742c45e359b26a06cf86376301d8","hash":"6d39f5d10ed1e3acaaef5ac5999945b65ab12b88","modified":1592301696231},{"_id":"themes/next/source/lib/three/.git/objects/82/69b6fd29a514f9bd746497b298176228bd4061","hash":"cf527c08b5d88d72939a61446d128eba2fb94be2","modified":1592301696526},{"_id":"themes/next/source/lib/three/.git/objects/87/782e1008d1f88a9cb63d59407b1cb9e47b0861","hash":"0af5c5e17b27d8114fddd53d7cae8bb3284ae9af","modified":1592301693299},{"_id":"themes/next/source/lib/three/.git/objects/89/b7ae569312ae577534d7b58647232fb48bfb08","hash":"a265c0a7e24267bd82d11a48f091d2241edc0080","modified":1592301696547},{"_id":"themes/next/source/lib/three/.git/objects/8a/2159d7a0c70d394071e8dcc79502d5cd1fc5e4","hash":"58ff19b7a9a65c9e562b9e1c7ee0ed3ac005b15d","modified":1592301696540},{"_id":"themes/next/source/lib/three/.git/objects/8e/3ea1a067348d2a9c066fbf201663b462a3ed6c","hash":"f3168176590ac08570ef75b73ecae2b4a455d753","modified":1592301693455},{"_id":"themes/next/source/lib/three/.git/objects/8e/985e4c70f87248ecc33d93410d80d1632c552f","hash":"a1d2084dd43e026f1b93027221629f5cbb135c88","modified":1592301696565},{"_id":"themes/next/source/lib/three/.git/objects/90/e94cbdbfd33fea8606d447d01011ff657478f1","hash":"df922aee3bc7eb3266134797efb6f888743c6a12","modified":1592301696931},{"_id":"themes/next/source/lib/three/.git/objects/9d/b082c6081a7d8b8b752bc35ebcba85073f5fac","hash":"c240b76ccdb8552d6d4c75e55d5c4c93807756af","modified":1592301696556},{"_id":"themes/next/source/lib/three/.git/objects/94/1060002b98395a31cb47a33166f5568a20d4b5","hash":"c345981cd6097743cbb6f44d61b33ed37b110b31","modified":1592301696557},{"_id":"themes/next/source/lib/three/.git/objects/a4/6866ca175f7c27daaf6b39c94d930bc27d4ce5","hash":"fc416f7f3f62c338bda28bb56bfa6f8fb49421ff","modified":1592301696229},{"_id":"themes/next/source/lib/three/.git/objects/a9/27aca23c7f27f5d1ebf2c4baea3aa5d8676143","hash":"dc3e5c853a502fbe7ea3e35c2f7a2bf94318ade4","modified":1592301693291},{"_id":"themes/next/source/lib/three/.git/objects/b0/2d36d33210bc68d3e6451c663eb567ebc5721c","hash":"8d3bac2fa021a8f4609a134167edb84fd46254b2","modified":1592301693453},{"_id":"themes/next/source/lib/three/.git/objects/ae/8fa980e909988af2ebd9423658213d2e7e6bba","hash":"9978e4f223de97e23a047986bf21cbf48663a150","modified":1592301693296},{"_id":"themes/next/source/lib/three/.git/objects/bc/e19792442b36a0560e50adf61e86ef7ecbb50a","hash":"10f1b5f7fc7fd8b01ea9c5a5d1efad0464dd03ca","modified":1592301696569},{"_id":"themes/next/source/lib/three/.git/objects/ce/175226253f7f31da632b93ab6560debab1bf6d","hash":"55c41b0948cb31fad3a52ab7ac91ba93e6c22751","modified":1592301693300},{"_id":"themes/next/source/lib/three/.git/objects/c3/e49d5369de034ff0788d11519bd9150b67ce74","hash":"256a3f0a7054a3e2cde1fc58f027565c87ad3d1b","modified":1592301696572},{"_id":"themes/next/source/lib/three/.git/objects/d2/a00ca1067b93b81dae8ea7d0c9838e935595e8","hash":"4b1ecd5271cdf94c10c2e413c7378adb22e940bb","modified":1592301696542},{"_id":"themes/next/source/lib/three/.git/objects/d0/32ce3fe05be57b72cc925f86149497229cda13","hash":"59e5036e95b496852ad3b918eac2e4b28a5951f2","modified":1592301696551},{"_id":"themes/next/source/lib/three/.git/objects/d8/8d5765694f92039daac0f944405d4cf61a0d13","hash":"70d2b236fcd955aa4fa95efc2e18c98919003ec6","modified":1592301693306},{"_id":"themes/next/source/lib/three/.git/objects/d9/0026fb76d55bba50ee4a221c887a0f1a8e8102","hash":"ac0ac5756be4b24f2249be101665ff29ed93d1f9","modified":1592301696538},{"_id":"themes/next/source/lib/three/.git/objects/d9/90e2654ec49768cd50d630db99ee00bee2b13c","hash":"6c5cc041391cb5a6b3e0f2f15f30bd62735ac7fa","modified":1592301693609},{"_id":"themes/next/source/lib/three/.git/objects/db/fc5bb53f0ee561f55b18c9796e1e03a9781153","hash":"3cda0d28ce918db5b722db817e69ea522a4db9ce","modified":1592301696562},{"_id":"themes/next/source/lib/three/.git/objects/df/932438893faefc6b9f5ba9191913dfeedc2a1c","hash":"ac939ae39ab04abc99c0caaef00849585ff4886d","modified":1592301696546},{"_id":"themes/next/source/lib/three/.git/objects/e0/52c7542703df4969a95779bd4dc58b568bcb5e","hash":"b1ccf1650011f74939f07233834bdff21baf4952","modified":1592301693304},{"_id":"themes/next/source/lib/three/.git/objects/e0/ced7e71c43a729f9653b1c4434b95724fc02ed","hash":"98c61b57d8e5e03cf30d402cfcb840c6e610aaa6","modified":1592301696533},{"_id":"themes/next/source/lib/three/.git/objects/e5/6e96bd99ebe3f0dc8f02c979703c3666f6dd9e","hash":"b971fcaae8424ea1b507379afdcdff74359a1525","modified":1592301696552},{"_id":"themes/next/source/lib/three/.git/objects/ea/7a1bbd08eb930b5f777ec025493ae0c8cb12d4","hash":"3c428fd65f982afbabbf683163bcc88a4eb4cda0","modified":1592301693297},{"_id":"themes/next/source/lib/three/.git/objects/ef/45fc381ccdb38fd03bb02c4e761d08275049c2","hash":"2eb89702aa19a302e38aff842b6ad1e22c3fbb93","modified":1592301696935},{"_id":"themes/next/source/lib/three/.git/objects/f4/5d8f110c3034162a1091dafe4b03d2e56b323e","hash":"963dad8248030a8d7b185f4726e40a65a0583c0e","modified":1592301693608},{"_id":"themes/next/source/lib/three/.git/objects/fa/be1d6949c228188d07df0f4b99b217c7b7f92e","hash":"de53b76740aff0953bcd79853d8addfabfc29f95","modified":1592301693308},{"_id":"themes/next/source/lib/three/.git/objects/ec/00e107b97a0b7a9850219894bf4e533c68bf87","hash":"5b7f94788c3c19c8a0f73f1b712d5d79e0236668","modified":1592301693606},{"_id":"themes/next/source/lib/three/.git/objects/fe/47fa8f2d9edef52a8ea859537c9286363ee168","hash":"dfaa57c592a229b220a7241bbd0567ec38f4e578","modified":1592301693452},{"_id":"themes/next/source/lib/three/.git/refs/heads/master","hash":"dcb9d54aa64c8a682ca5ca209370022b8a8dc843","modified":1592301697642},{"_id":"themes/next/source/lib/canvas_ribbon/.git/logs/refs/heads/master","hash":"3c0bf8189f8126ce74098870ad2e74212fe92fb4","modified":1592301178002},{"_id":"themes/next/source/lib/canvas_ribbon/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1592301177996},{"_id":"themes/next/source/lib/pace/.git/logs/refs/heads/master","hash":"cb345c893ab6756cee607b6cb5cd0a64377976da","modified":1592295382798},{"_id":"themes/next/source/lib/pace/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1592295382791},{"_id":"themes/next/source/lib/three/.git/logs/refs/heads/master","hash":"556dee2b39ffdb73d9abe1c4bf8d13c7bf545923","modified":1592301697644},{"_id":"themes/next/source/lib/three/.git/objects/76/310b5a7e93e66e7d98aaab2960d6354b2288c5","hash":"84de52193b47c83d01eb8800b063ccd83ad42cf9","modified":1592301696020},{"_id":"themes/next/source/lib/three/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1592301697638},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1592301697668},{"_id":"themes/next/source/lib/canvas_ribbon/.git/logs/refs/remotes/origin/HEAD","hash":"3c0bf8189f8126ce74098870ad2e74212fe92fb4","modified":1592301177996},{"_id":"themes/next/source/lib/pace/.git/logs/refs/remotes/origin/HEAD","hash":"cb345c893ab6756cee607b6cb5cd0a64377976da","modified":1592295382790},{"_id":"themes/next/source/lib/three/.git/logs/refs/remotes/origin/HEAD","hash":"556dee2b39ffdb73d9abe1c4bf8d13c7bf545923","modified":1592301697638},{"_id":"public/search.xml","hash":"5d5c13659422cec1cec5c6e5cb784e517236f70b","modified":1593850455465},{"_id":"public/about/index.html","hash":"87ef1551eea32e35953d3c1251652216f49cdc19","modified":1593850455465},{"_id":"public/categories/index.html","hash":"ff1dc5e16fc6aa40c7a2e8a2302b4c1a5c9b0b67","modified":1593850455465},{"_id":"public/tags/index.html","hash":"639c402f93df6949356758ea330f35e4a5731e78","modified":1593850455465},{"_id":"public/archives/2019/page/2/index.html","hash":"03926e55bb49bbb141d8b8c1b7948e2d80d49405","modified":1593850455465},{"_id":"public/archives/2019/11/index.html","hash":"e7dbc0cfd8c2ff1e52f15d69071923b288ef806e","modified":1593850455465},{"_id":"public/archives/2020/page/2/index.html","hash":"72a10018f2e2e738dcb254b0efc29515dbab8336","modified":1593850455465},{"_id":"public/archives/2020/01/index.html","hash":"dfe6b73a42e25db2303269d7cd64743fe3274b17","modified":1593850455465},{"_id":"public/archives/2020/02/index.html","hash":"a3d741ac0aca3c2a48ee92afc269dfa5ee00d14c","modified":1593850455465},{"_id":"public/archives/2020/03/index.html","hash":"406f217eca8fcbbcb48d60fd9e7deb5bfeccbf67","modified":1593850455465},{"_id":"public/archives/2020/05/index.html","hash":"3697031ea6e140aac4223eb43123deca6494b09c","modified":1593850455465},{"_id":"public/archives/2020/06/index.html","hash":"f31f362fcbd8f48700af5dbeccbd13aed5ec3aba","modified":1593850455465},{"_id":"public/archives/2020/07/index.html","hash":"cf2c3fbd1664dffa5850fc1d9faa4cade42d3fec","modified":1593850455465},{"_id":"public/categories/http/index.html","hash":"510a7819621167f65d07208d33b8e81238f98627","modified":1593850455465},{"_id":"public/categories/docker/index.html","hash":"f841cfe81f5833b308df8d19f1ffa1e0f1574c4b","modified":1593850455465},{"_id":"public/categories/Spring/index.html","hash":"98d23c071d92419e3b291ee53944cd51459f8082","modified":1593850455465},{"_id":"public/categories/mybatis/index.html","hash":"6a95abf41c2bb66f1ed3c8828a8b30e5b1eff1e6","modified":1593850455465},{"_id":"public/categories/mysql/index.html","hash":"2935d1e9a7d7ef56e56a3c58ef6d2f749df6cd74","modified":1593850455465},{"_id":"public/categories/swagger/index.html","hash":"c96298ef1e3f641780e2abedc4acaf7e1a5e658d","modified":1593850455465},{"_id":"public/categories/jdk/index.html","hash":"5ec354a09a45ff67c62f5edb335b3c9f2a229c76","modified":1593850455465},{"_id":"public/categories/node/index.html","hash":"95f2942874d6537b93c15507ac6f0c45b7c938c2","modified":1593850455465},{"_id":"public/categories/读书笔记-thinKing-in-java/index.html","hash":"b366aa849670743290742783d44c6de1d8409878","modified":1593850455465},{"_id":"public/categories/eclipse/index.html","hash":"bb5df9b8a7ff01fe3c5659afabedf2fc815d35ee","modified":1593850455465},{"_id":"public/categories/java规范/index.html","hash":"e954267aefceee67cf4db8270d03bbbce132175a","modified":1593850455465},{"_id":"public/categories/电脑问题-键盘/index.html","hash":"27ba0d6bfea0f9fe0e2c1de1d5b0365a06c740c8","modified":1593850455465},{"_id":"public/categories/linux-centos/index.html","hash":"a38e7303314e7b1148bece8d877d394ec81ce472","modified":1593850455465},{"_id":"public/tags/http/index.html","hash":"d7dbaeecf402a8feec506a0617194863cdaac04a","modified":1593850455465},{"_id":"public/tags/docker/index.html","hash":"35d167f94159ccc12355fc31dc7ff3ab2e93876b","modified":1593850455465},{"_id":"public/tags/Dockerfile/index.html","hash":"4e554dd8b4a246664719eae46ed8b503fee5c44c","modified":1593850455465},{"_id":"public/tags/Spring/index.html","hash":"bd5fbe000d486a3bdf91a9576218732c50bc1ed8","modified":1593850455465},{"_id":"public/tags/mybatis/index.html","hash":"239992173e9ff278faa5ab985015c4a58c441988","modified":1593850455465},{"_id":"public/tags/mysql/index.html","hash":"a0da12f41a11f60c125ea44a286898443cff4971","modified":1593850455465},{"_id":"public/tags/swagger/index.html","hash":"ac0a8367f905c58c5bf643a8ae2b797ec811e0f0","modified":1593850455465},{"_id":"public/tags/jdk/index.html","hash":"1ed9c0c0d8abaa0f80bcaf58dc615127a7593327","modified":1593850455465},{"_id":"public/tags/node/index.html","hash":"1cb9c46343a697e181136383a2eaa8ece24f2d09","modified":1593850455465},{"_id":"public/tags/笔记/index.html","hash":"4e85a2f53e5fb84d6e0dba0e0646f5f9a75e7310","modified":1593850455465},{"_id":"public/tags/eclipse/index.html","hash":"d89101ad4b4f9cb75870b2d422b8414d45994d6d","modified":1593850455465},{"_id":"public/tags/java规范/index.html","hash":"312f937eef968b9fe2efc233de5419921168ebae","modified":1593850455465},{"_id":"public/tags/键盘/index.html","hash":"047f77bdfe4c43532307f010a943be411b9f6f78","modified":1593850455465},{"_id":"public/tags/阿里云服务器/index.html","hash":"e4500a6b4ad255097c1800f0ff6800397d1589dc","modified":1593850455465},{"_id":"public/2020/07/04/Dockerfile指令详解/index.html","hash":"8fefa17851a9b0b31afdd20008b4096729154150","modified":1593850455465},{"_id":"public/2020/07/04/Docker基础/index.html","hash":"b8746aad30ea9c7e42ebd06650b5c06ecb615a71","modified":1593850455465},{"_id":"public/2020/06/16/hello-world/index.html","hash":"a47999f47ae7a9d6a3d2ec6c13fb1a863cc78ff8","modified":1593850455465},{"_id":"public/2020/05/15/使用eclipse导入myeclipse项目无法识别为web项目问题的解决/index.html","hash":"9f1108f77fe5bd909f58f77b54d49ad8c9e9cac9","modified":1593850455465},{"_id":"public/2020/05/15/org-xml-sax-SAXNotRecognizedException-Feature-http-apache-org-xml-features-val/index.html","hash":"ba1d1e0d07e10a1ae7043a84c8b560d973e239bd","modified":1593850455465},{"_id":"public/2020/03/06/区分项目中的数据实体目录-entity，dto-vo/index.html","hash":"7579daa64f796d3e2d22bb0562ac2e15e3987a07","modified":1593850455465},{"_id":"public/2020/03/02/戴尔惠普华硕笔记本Fn键反了，按F1、F2等键出来Fn-F1、F2的效果/index.html","hash":"e8124eb0a42f37ba820fea010ef45623538912fb","modified":1593850455465},{"_id":"public/2020/02/27/mysql删除database报错ERROR-1010-HY000-Error-dropping-database-can-t-rmdir-library-errno/index.html","hash":"dcfd427d646d3ebcf2c893cf2004710997a8af62","modified":1593850455465},{"_id":"public/2020/02/22/Mybatis-缓存-的知识点/index.html","hash":"2d71056be774cbbf31d0c0145f6ed631a3587187","modified":1593850455465},{"_id":"public/2020/01/17/阿里云centos7-运行tomcat-之后远程无法访问的解决/index.html","hash":"feed1137cb3dd4658ca0d7491ecbeffb09d50c63","modified":1593850455465},{"_id":"public/2020/01/08/mybatis-延迟加载和立即加载的实现/index.html","hash":"50844a2f59e4161f67a431b3279b417efe7d0d06","modified":1593850455465},{"_id":"public/2020/01/08/windows下升级node-js-在cmd-运行n-stable报错bash不是内部或外部命令，也不是可运行的程序-或批处理文件/index.html","hash":"4b88183522f268a56bca07a7d72658a0511d3108","modified":1593850455465},{"_id":"public/2020/01/07/mysql联合主键/index.html","hash":"c8c063f3a863650484db4b1d03a0f41411bcfb6f","modified":1593850455465},{"_id":"public/2019/12/17/mybatis表间关系，多表联查如何定义实体和返回类型/index.html","hash":"d318f4d35952b9c3bcd533bd5905b5cbf38bc75f","modified":1593850455465},{"_id":"public/2019/12/11/mybatis连接池的3种配置方式/index.html","hash":"752020cfe6fe3a6143d4572637d6aa9c419ae0cf","modified":1593850455465},{"_id":"public/2019/12/08/解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题/index.html","hash":"7e43997657cae0c42ae6e0ac28afc10eb959f02d","modified":1593850455465},{"_id":"public/2019/12/05/sql获取当前插入表的id/index.html","hash":"9d519b5b16e1b83d012c5e00aa209639a9ded41f","modified":1593850455465},{"_id":"public/2019/12/05/swagger接口文档UI界面的方法点不开，只能点统一展开，关闭/index.html","hash":"fa46081e17929c35da069b2e0309b32dde0a37bb","modified":1593850455465},{"_id":"public/2019/12/04/《thinking-in-java》读书笔记2：对象/index.html","hash":"b88894de189c4826f6d41f9a100b2d73daadb6b9","modified":1593850455465},{"_id":"public/2019/12/02/《thinking-in-java》读书笔记/index.html","hash":"184c2fec665e5721bf3da75072e52813b8d569d4","modified":1593850455465},{"_id":"public/2019/11/21/Spring-编程式事务/index.html","hash":"190713ac0b537258c441393cae4070ee65f87014","modified":1593850455465},{"_id":"public/2019/11/21/使用dhcp始终无法连接mysql的问题解决/index.html","hash":"94d975cff0edfca061524f9536e3b3dbbbbfbcdd","modified":1593850455465},{"_id":"public/2019/11/21/Spring-声明式事务注解-Transactional/index.html","hash":"d52cf64db7c365d10acd2a686faebe724c0b27b5","modified":1593850455465},{"_id":"public/2019/11/19/mybatic初学环境搭建/index.html","hash":"83b19bfa06b396407a624769fd565c2af8f92240","modified":1593850455465},{"_id":"public/2019/11/18/在学Spring-Aop-发现的注意点/index.html","hash":"0148d25ba7d4ab1188d10cda54393fbc46d2e67c","modified":1593850455465},{"_id":"public/2019/11/17/14种常见的HTTP返回状态码/index.html","hash":"99adba612585b49717b1a358346d2a552cd5a3a6","modified":1593850455465},{"_id":"public/index.html","hash":"f234d07517f678287ed83508c7b6b88dea3a7cc4","modified":1593850455465},{"_id":"public/page/2/index.html","hash":"d33ed2818c7686f92c2f1c02bc657db2491dc222","modified":1593850455465},{"_id":"public/page/3/index.html","hash":"e947a5b56bef7e8cf0ff8a93bfc239b78a5ff963","modified":1593850455465},{"_id":"public/archives/index.html","hash":"77774a29a26d03e793741c00f64f0b4056ba1a38","modified":1593850455465},{"_id":"public/archives/page/2/index.html","hash":"8bf80b59b022e7cb217af7b3251a9e3dae3c791c","modified":1593850455465},{"_id":"public/archives/page/3/index.html","hash":"65bae1c17fbfa3b0dcd7f8194120dacecf356be0","modified":1593850455465},{"_id":"public/archives/2019/index.html","hash":"9a3da41630df6aa32121ce2633094dbd30e6fdd1","modified":1593850455465},{"_id":"public/archives/2019/12/index.html","hash":"e9de6fa6cff8ec19265544a66fa0acf57bba5f1c","modified":1593850455465},{"_id":"public/archives/2020/index.html","hash":"5db47f37ff593afd63d861645044f1b234af113d","modified":1593850455465},{"_id":"public/images/Deadpool.jpg","hash":"7fdbe7b7a68556d510e595962c11f06743fc5b3f","modified":1593850455465},{"_id":"public/images/aliReward.jpg","hash":"12c7d07723ad7ac16daef63c2399fbd21d0b85ce","modified":1593850455465},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1593850455465},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1593850455465},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1593850455465},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1593850455465},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1593850455465},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1593850455465},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1593850455465},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1593850455465},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1593850455465},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1593850455465},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1593850455465},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1593850455465},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1593850455465},{"_id":"public/images/wechatReward.jpg","hash":"bf5ce68d793e84674b2e8c821692e66b2d4d9865","modified":1593850455465},{"_id":"public/lib/canvas_ribbon/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1593850455465},{"_id":"public/lib/pace/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1593850455465},{"_id":"public/lib/three/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1593850455465},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1593850455465},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1593850455465},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1593850455465},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1593850455465},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1593850455465},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1593850455465},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1593850455465},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1593850455465},{"_id":"public/js/utils.js","hash":"2c6e6b4d9a592fbb4bf04689524db2cdfcd94ca7","modified":1593850455465},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1593850455465},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1593850455465},{"_id":"public/lib/canvas_ribbon/canvas-ribbon.js","hash":"65b1a8f12d04b15d7ed6eeb9d11dec760a799c5f","modified":1593850455465},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1593850455465},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1593850455465},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1593850455465},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1593850455465},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1593850455465},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1593850455465},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1593850455465},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1593850455465},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1593850455465},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1593850455465},{"_id":"public/lib/pace/pace-theme-flat-top.min.css","hash":"5e1c97e232b46e48592a8e4983ae5a89e0a7da6a","modified":1593850455465},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1593850455465},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1593850455465},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1593850455465},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1593850455465},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1593850455465},{"_id":"public/lib/three/gulpfile.js","hash":"e0e9e7051d9d82a37c2aba1df396d8b3916323c4","modified":1593850455465},{"_id":"public/lib/three/package.json","hash":"3e6a0c56ec47a38c0bf7b404f6e46965ec7d2e3d","modified":1593850455465},{"_id":"public/lib/three/renovate.json","hash":"94990e0ad04ce4a7c6f0ac3543318d9e02db1264","modified":1593850455465},{"_id":"public/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1593850455465},{"_id":"public/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1593850455465},{"_id":"public/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1593850455465},{"_id":"public/lib/canvas_ribbon/README.html","hash":"9557a60df72e2e8875d7ddcdcdd1498ae0e5f4ad","modified":1593850455465},{"_id":"public/lib/pace/README.html","hash":"e1909ab93f97012da3506bd7aaf184e390ffff16","modified":1593850455465},{"_id":"public/lib/three/README.html","hash":"e3bdcbca539556c09f3bcfa9e77589a0a519af82","modified":1593850455465},{"_id":"public/css/main.css","hash":"8efbe757cc4461d4e70ba4e50cee255e52090385","modified":1593850455465},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1593850455465},{"_id":"public/lib/pace/pace-theme-material.min.css","hash":"f1ff83985c090f3a3236554c5ef69542dcceb049","modified":1593850455465},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1593850455465},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"186c3bd6ae352d336cdbd0e555ee76a844854c94","modified":1593850455465},{"_id":"public/lib/three/canvas_lines.min.js","hash":"ae6584edc0418d68731cab82c1494f26bd77c07d","modified":1593850455465},{"_id":"public/lib/three/three-waves.min.js","hash":"329483be97cdda030779da9a6cd1e3eae645cf4f","modified":1593850455465},{"_id":"public/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1593850455465},{"_id":"public/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1593850455465},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1593850455465},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1593850455465}],"Category":[{"name":"http","_id":"ckc7dequk0004lwqaddj95qj9"},{"name":"docker","_id":"ckc7dequp000alwqa2b0ycu3g"},{"name":"Spring","_id":"ckc7dequv000llwqacjf27xzp"},{"name":"mybatis","_id":"ckc7deqv2000xlwqa7kwo0q6j"},{"name":"mysql","_id":"ckc7deqvi001rlwqa15wwhpt6"},{"name":"swagger","_id":"ckc7deqvq002alwqactsu9rgy"},{"name":"jdk","_id":"ckc7deqvr002flwqa5ls74sah"},{"name":"node","_id":"ckc7deqvs002jlwqae5za0bk0"},{"name":"读书笔记 - thinKing in java","_id":"ckc7deqvt002nlwqablkf5i1z"},{"name":"eclipse","_id":"ckc7deqvx002ylwqac1z65ip2"},{"name":"java规范","_id":"ckc7deqvy0033lwqabqftd122"},{"name":"电脑问题 - 键盘","_id":"ckc7deqvz0037lwqabxjtb0l7"},{"name":"linux - centos","_id":"ckc7deqw0003blwqaaiuc6yit"}],"Data":[],"Page":[{"title":"关于","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: \"关于\"\ntype: \"about\"\n---\n","date":"2020-06-16T09:39:06.979Z","updated":"2020-06-16T09:39:06.979Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckc7dequ80000lwqads87a00g","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"分类","type":"categories","_content":"","source":"categories/index.md","raw":"title: \"分类\"\ntype: \"categories\"\n---\n","date":"2020-06-16T07:11:58.762Z","updated":"2020-06-16T07:11:58.762Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckc7dequf0002lwqah7rv4ff0","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"标签","type":"tags","_content":"","source":"tags/index.md","raw":"title: \"标签\"\ntype: \"tags\"\n---","date":"2020-06-16T07:12:18.996Z","updated":"2020-06-16T07:12:18.996Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckc7dequm0006lwqa0vwv7mha","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"14种常见的HTTP返回状态码","date":"2019-11-17T13:08:39.000Z","_content":"\n今天学习了一下HTTP状态码，把自己的理解记录一下，如有不对之处，欢迎指正\n\n<!--more-->\n## 2开头：成功\n### 200:ok\n成功\n### 204：No Content\n    请求成功，但是没有东西（资源）可以返回（响应）\n### 206: Partial Content\n    范围请求的成功返回状态码\n## 3开头：重定向\n### 301：Moved Permanently\n    永久性重定向。就是书签一样的\n### 302： Found\n    临时性重定向。告知本次请求使用新的URL.\n### 303 ：See Other\n    告知请求对应的资源存在着另一个 URI，使用Get请求去访问这个新的URI.\n### 　304： Not Modified\n    304 虽然被划分在 3XX 类别中，但是和重定向没有关 系。\n发送附带条件的请求时，资源已找到。但不满足条件。\n### 　307： Temporary Redirect \n    临时重定向，该状态码与 302 Found 有着相同的含义。但是307 会遵照浏览器标准，不会从 POST 变成 GET。防止重定向时改变请求方式。\n\n## 　4开头：客户端错误\n    表示发出请求的客服端发生错误\n### 　400： Bad Request\n    400表示请求报文中存在语法错误。当错误发生时，需修改请求的内容。\n### 401： Unauthorized\n    请求的资源需要通过认证。第一次返回401，会弹出认证用的对话窗口。第二次返回401，表示认证失败\n### 　403： Forbidden\n    因为访问权限等问题，服务器拒绝对资源的访问，服务器在实体的主体部分说明，用户以看到该说明。\n ### 　404 Not Found\n    这个出现的比较多。\n    该状态码表明服务器上无法找到请求的资源。\n    除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。\n## 5开头：服务器错误\n### 500: Internal Server Error\n    服务器端在执行请求时发生了错误。一般是代码逻辑错误，各种异常\n### 　503 ：Service Unavailable\n    服务器超负荷\n##### 当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200\n###### 参考阅读《HTTP图解》一书","source":"_posts/14种常见的HTTP返回状态码.md","raw":"---\ntitle: 14种常见的HTTP返回状态码\ndate: 2019-11-17 21:08:39\ncategories: \n  - http\ntags:\n  - http\n\n---\n\n今天学习了一下HTTP状态码，把自己的理解记录一下，如有不对之处，欢迎指正\n\n<!--more-->\n## 2开头：成功\n### 200:ok\n成功\n### 204：No Content\n    请求成功，但是没有东西（资源）可以返回（响应）\n### 206: Partial Content\n    范围请求的成功返回状态码\n## 3开头：重定向\n### 301：Moved Permanently\n    永久性重定向。就是书签一样的\n### 302： Found\n    临时性重定向。告知本次请求使用新的URL.\n### 303 ：See Other\n    告知请求对应的资源存在着另一个 URI，使用Get请求去访问这个新的URI.\n### 　304： Not Modified\n    304 虽然被划分在 3XX 类别中，但是和重定向没有关 系。\n发送附带条件的请求时，资源已找到。但不满足条件。\n### 　307： Temporary Redirect \n    临时重定向，该状态码与 302 Found 有着相同的含义。但是307 会遵照浏览器标准，不会从 POST 变成 GET。防止重定向时改变请求方式。\n\n## 　4开头：客户端错误\n    表示发出请求的客服端发生错误\n### 　400： Bad Request\n    400表示请求报文中存在语法错误。当错误发生时，需修改请求的内容。\n### 401： Unauthorized\n    请求的资源需要通过认证。第一次返回401，会弹出认证用的对话窗口。第二次返回401，表示认证失败\n### 　403： Forbidden\n    因为访问权限等问题，服务器拒绝对资源的访问，服务器在实体的主体部分说明，用户以看到该说明。\n ### 　404 Not Found\n    这个出现的比较多。\n    该状态码表明服务器上无法找到请求的资源。\n    除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。\n## 5开头：服务器错误\n### 500: Internal Server Error\n    服务器端在执行请求时发生了错误。一般是代码逻辑错误，各种异常\n### 　503 ：Service Unavailable\n    服务器超负荷\n##### 当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200\n###### 参考阅读《HTTP图解》一书","slug":"14种常见的HTTP返回状态码","published":1,"updated":"2020-06-16T03:55:53.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7dequc0001lwqaaghy6rdi","content":"<p>今天学习了一下HTTP状态码，把自己的理解记录一下，如有不对之处，欢迎指正</p>\n<a id=\"more\"></a>\n<h2 id=\"2开头：成功\"><a href=\"#2开头：成功\" class=\"headerlink\" title=\"2开头：成功\"></a>2开头：成功</h2><h3 id=\"200-ok\"><a href=\"#200-ok\" class=\"headerlink\" title=\"200:ok\"></a>200:ok</h3><p>成功</p>\n<h3 id=\"204：No-Content\"><a href=\"#204：No-Content\" class=\"headerlink\" title=\"204：No Content\"></a>204：No Content</h3><pre><code>请求成功，但是没有东西（资源）可以返回（响应）</code></pre><h3 id=\"206-Partial-Content\"><a href=\"#206-Partial-Content\" class=\"headerlink\" title=\"206: Partial Content\"></a>206: Partial Content</h3><pre><code>范围请求的成功返回状态码</code></pre><h2 id=\"3开头：重定向\"><a href=\"#3开头：重定向\" class=\"headerlink\" title=\"3开头：重定向\"></a>3开头：重定向</h2><h3 id=\"301：Moved-Permanently\"><a href=\"#301：Moved-Permanently\" class=\"headerlink\" title=\"301：Moved Permanently\"></a>301：Moved Permanently</h3><pre><code>永久性重定向。就是书签一样的</code></pre><h3 id=\"302：-Found\"><a href=\"#302：-Found\" class=\"headerlink\" title=\"302： Found\"></a>302： Found</h3><pre><code>临时性重定向。告知本次请求使用新的URL.</code></pre><h3 id=\"303-：See-Other\"><a href=\"#303-：See-Other\" class=\"headerlink\" title=\"303 ：See Other\"></a>303 ：See Other</h3><pre><code>告知请求对应的资源存在着另一个 URI，使用Get请求去访问这个新的URI.</code></pre><h3 id=\"304：-Not-Modified\"><a href=\"#304：-Not-Modified\" class=\"headerlink\" title=\"　304： Not Modified\"></a>　304： Not Modified</h3><pre><code>304 虽然被划分在 3XX 类别中，但是和重定向没有关 系。</code></pre><p>发送附带条件的请求时，资源已找到。但不满足条件。</p>\n<h3 id=\"307：-Temporary-Redirect\"><a href=\"#307：-Temporary-Redirect\" class=\"headerlink\" title=\"　307： Temporary Redirect\"></a>　307： Temporary Redirect</h3><pre><code>临时重定向，该状态码与 302 Found 有着相同的含义。但是307 会遵照浏览器标准，不会从 POST 变成 GET。防止重定向时改变请求方式。</code></pre><h2 id=\"4开头：客户端错误\"><a href=\"#4开头：客户端错误\" class=\"headerlink\" title=\"　4开头：客户端错误\"></a>　4开头：客户端错误</h2><pre><code>表示发出请求的客服端发生错误</code></pre><h3 id=\"400：-Bad-Request\"><a href=\"#400：-Bad-Request\" class=\"headerlink\" title=\"　400： Bad Request\"></a>　400： Bad Request</h3><pre><code>400表示请求报文中存在语法错误。当错误发生时，需修改请求的内容。</code></pre><h3 id=\"401：-Unauthorized\"><a href=\"#401：-Unauthorized\" class=\"headerlink\" title=\"401： Unauthorized\"></a>401： Unauthorized</h3><pre><code>请求的资源需要通过认证。第一次返回401，会弹出认证用的对话窗口。第二次返回401，表示认证失败</code></pre><h3 id=\"403：-Forbidden\"><a href=\"#403：-Forbidden\" class=\"headerlink\" title=\"　403： Forbidden\"></a>　403： Forbidden</h3><pre><code>因为访问权限等问题，服务器拒绝对资源的访问，服务器在实体的主体部分说明，用户以看到该说明。</code></pre><h3 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"　404 Not Found\"></a>　404 Not Found</h3><pre><code>这个出现的比较多。\n该状态码表明服务器上无法找到请求的资源。\n除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</code></pre><h2 id=\"5开头：服务器错误\"><a href=\"#5开头：服务器错误\" class=\"headerlink\" title=\"5开头：服务器错误\"></a>5开头：服务器错误</h2><h3 id=\"500-Internal-Server-Error\"><a href=\"#500-Internal-Server-Error\" class=\"headerlink\" title=\"500: Internal Server Error\"></a>500: Internal Server Error</h3><pre><code>服务器端在执行请求时发生了错误。一般是代码逻辑错误，各种异常</code></pre><h3 id=\"503-：Service-Unavailable\"><a href=\"#503-：Service-Unavailable\" class=\"headerlink\" title=\"　503 ：Service Unavailable\"></a>　503 ：Service Unavailable</h3><pre><code>服务器超负荷</code></pre><h5 id=\"当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200\"><a href=\"#当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200\" class=\"headerlink\" title=\"当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200\"></a>当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200</h5><h6 id=\"参考阅读《HTTP图解》一书\"><a href=\"#参考阅读《HTTP图解》一书\" class=\"headerlink\" title=\"参考阅读《HTTP图解》一书\"></a>参考阅读《HTTP图解》一书</h6>","site":{"data":{}},"length":793,"excerpt":"<p>今天学习了一下HTTP状态码，把自己的理解记录一下，如有不对之处，欢迎指正</p>","more":"<h2 id=\"2开头：成功\"><a href=\"#2开头：成功\" class=\"headerlink\" title=\"2开头：成功\"></a>2开头：成功</h2><h3 id=\"200-ok\"><a href=\"#200-ok\" class=\"headerlink\" title=\"200:ok\"></a>200:ok</h3><p>成功</p>\n<h3 id=\"204：No-Content\"><a href=\"#204：No-Content\" class=\"headerlink\" title=\"204：No Content\"></a>204：No Content</h3><pre><code>请求成功，但是没有东西（资源）可以返回（响应）</code></pre><h3 id=\"206-Partial-Content\"><a href=\"#206-Partial-Content\" class=\"headerlink\" title=\"206: Partial Content\"></a>206: Partial Content</h3><pre><code>范围请求的成功返回状态码</code></pre><h2 id=\"3开头：重定向\"><a href=\"#3开头：重定向\" class=\"headerlink\" title=\"3开头：重定向\"></a>3开头：重定向</h2><h3 id=\"301：Moved-Permanently\"><a href=\"#301：Moved-Permanently\" class=\"headerlink\" title=\"301：Moved Permanently\"></a>301：Moved Permanently</h3><pre><code>永久性重定向。就是书签一样的</code></pre><h3 id=\"302：-Found\"><a href=\"#302：-Found\" class=\"headerlink\" title=\"302： Found\"></a>302： Found</h3><pre><code>临时性重定向。告知本次请求使用新的URL.</code></pre><h3 id=\"303-：See-Other\"><a href=\"#303-：See-Other\" class=\"headerlink\" title=\"303 ：See Other\"></a>303 ：See Other</h3><pre><code>告知请求对应的资源存在着另一个 URI，使用Get请求去访问这个新的URI.</code></pre><h3 id=\"304：-Not-Modified\"><a href=\"#304：-Not-Modified\" class=\"headerlink\" title=\"　304： Not Modified\"></a>　304： Not Modified</h3><pre><code>304 虽然被划分在 3XX 类别中，但是和重定向没有关 系。</code></pre><p>发送附带条件的请求时，资源已找到。但不满足条件。</p>\n<h3 id=\"307：-Temporary-Redirect\"><a href=\"#307：-Temporary-Redirect\" class=\"headerlink\" title=\"　307： Temporary Redirect\"></a>　307： Temporary Redirect</h3><pre><code>临时重定向，该状态码与 302 Found 有着相同的含义。但是307 会遵照浏览器标准，不会从 POST 变成 GET。防止重定向时改变请求方式。</code></pre><h2 id=\"4开头：客户端错误\"><a href=\"#4开头：客户端错误\" class=\"headerlink\" title=\"　4开头：客户端错误\"></a>　4开头：客户端错误</h2><pre><code>表示发出请求的客服端发生错误</code></pre><h3 id=\"400：-Bad-Request\"><a href=\"#400：-Bad-Request\" class=\"headerlink\" title=\"　400： Bad Request\"></a>　400： Bad Request</h3><pre><code>400表示请求报文中存在语法错误。当错误发生时，需修改请求的内容。</code></pre><h3 id=\"401：-Unauthorized\"><a href=\"#401：-Unauthorized\" class=\"headerlink\" title=\"401： Unauthorized\"></a>401： Unauthorized</h3><pre><code>请求的资源需要通过认证。第一次返回401，会弹出认证用的对话窗口。第二次返回401，表示认证失败</code></pre><h3 id=\"403：-Forbidden\"><a href=\"#403：-Forbidden\" class=\"headerlink\" title=\"　403： Forbidden\"></a>　403： Forbidden</h3><pre><code>因为访问权限等问题，服务器拒绝对资源的访问，服务器在实体的主体部分说明，用户以看到该说明。</code></pre><h3 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"　404 Not Found\"></a>　404 Not Found</h3><pre><code>这个出现的比较多。\n该状态码表明服务器上无法找到请求的资源。\n除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</code></pre><h2 id=\"5开头：服务器错误\"><a href=\"#5开头：服务器错误\" class=\"headerlink\" title=\"5开头：服务器错误\"></a>5开头：服务器错误</h2><h3 id=\"500-Internal-Server-Error\"><a href=\"#500-Internal-Server-Error\" class=\"headerlink\" title=\"500: Internal Server Error\"></a>500: Internal Server Error</h3><pre><code>服务器端在执行请求时发生了错误。一般是代码逻辑错误，各种异常</code></pre><h3 id=\"503-：Service-Unavailable\"><a href=\"#503-：Service-Unavailable\" class=\"headerlink\" title=\"　503 ：Service Unavailable\"></a>　503 ：Service Unavailable</h3><pre><code>服务器超负荷</code></pre><h5 id=\"当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200\"><a href=\"#当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200\" class=\"headerlink\" title=\"当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200\"></a>当然，也有很多时候，返回的状态码响应都是错误的，有时候代码出错也会返回200</h5><h6 id=\"参考阅读《HTTP图解》一书\"><a href=\"#参考阅读《HTTP图解》一书\" class=\"headerlink\" title=\"参考阅读《HTTP图解》一书\"></a>参考阅读《HTTP图解》一书</h6>"},{"title":"Docker基础-镜像","date":"2020-07-04T02:25:47.000Z","_content":"\n#### Docker 镜像\n\n<!--more-->\n\n##### 分层存储\n\n\n\n因为镜像包含操作系统完整的 `root` 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 [Union FS](https://en.wikipedia.org/wiki/Union_mount) 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。\n\n镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。\n\n分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。\n\n\n\n##### 虚悬镜像\n\n\n\n一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 `<none>`。：\n\n```bash\n<none>               <none>              00285df0df87        5 days ago          342 MB\n```\n\n1\n\n这个镜像原本是有镜像名和标签的，原来为 `mongo:3.2`，随着官方镜像维护，发布了新版本后，重新 `docker pull mongo:3.2` 时，`mongo:3.2` 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 `<none>`。除了 `docker pull` 可能导致这种情况，`docker build` 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 `<none>` 的镜像。这类无标签镜像也被称为 **虚悬镜像(dangling image)** ，可以用下面的命令专门显示这类镜像：\n\n```bash\n$ docker image ls -f dangling=true\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n<none>              <none>              00285df0df87        5 days ago          342 MB\n```\n\n\n\n一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。\n\n```bash\n$ docker image prune\n```\n\n\n\n##### DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）\n\n\n\n如果注意，会看到 `docker build` 命令最后有一个 `.`。`.` 表示当前目录，而 `Dockerfile` 就在当前目录，因此不少初学者以为这个路径是在指定 `Dockerfile` 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定**上下文路径**。那么什么是上下文呢？\n\n首先我们要理解 `docker build` 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 [Docker Remote API](https://docs.docker.com/engine/reference/api/docker_remote_api/)，而如 `docker` 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 `docker` 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。\n\n当我们进行镜像构建的时候，并非所有定制都会通过 `RUN` 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 `COPY` 指令、`ADD` 指令等。而 `docker build` 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？\n\n这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，`docker build` 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。\n\n如果在 `Dockerfile` 中这么写：\n\n```dockerfile\nCOPY ./package.json /app/\n```\n\n\n\n这并不是要复制执行 `docker build` 命令所在的目录下的 `package.json`，也不是复制 `Dockerfile` 所在目录下的 `package.json`，而是复制 **上下文（context）** 目录下的 `package.json`。\n\n因此，`COPY` 这类指令中的源文件的路径都是*相对路径*。这也是初学者经常会问的为什么 `COPY ../package.json /app` 或者 `COPY /opt/xxxx /app` 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。\n\n现在就可以理解刚才的命令 `docker build -t nginx:v3 .` 中的这个 `.`，实际上是在指定上下文的目录，`docker build` 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。\n\n如果观察 `docker build` 输出，我们其实已经看到了这个发送上下文的过程：\n\n```bash\n$ docker build -t nginx:v3 .\nSending build context to Docker daemon 2.048 kB\n...\n```\n\n\n\n理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 `COPY /opt/xxxx /app` 不工作后，于是干脆将 `Dockerfile` 放到了硬盘根目录去构建，结果发现 `docker build` 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 `docker build` 打包整个硬盘，这显然是使用错误。\n\n一般来说，应该会将 `Dockerfile` 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 `.gitignore` 一样的语法写一个 `.dockerignore`，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。\n\n那么为什么会有人误以为 `.` 是指定 `Dockerfile` 所在目录呢？这是因为在默认情况下，如果不额外指定 `Dockerfile` 的话，会将上下文目录下的名为 `Dockerfile` 的文件作为 Dockerfile。\n\n这只是默认行为，实际上 `Dockerfile` 的文件名并不要求必须为 `Dockerfile`，而且并不要求必须位于上下文目录中，比如可以用 `-f ../Dockerfile.php` 参数指定某个文件作为 `Dockerfile`。\n\n当然，一般大家习惯性的会使用默认的文件名 `Dockerfile`，以及会将其置于镜像构建上下文目录中。\n\n## [#](https://www.funtl.com/zh/docs-docker/Docker-使用-Dockerfile-定制镜像.html#其它-docker-build-的用法)其它 `docker build` 的用法\n\n### [#](https://www.funtl.com/zh/docs-docker/Docker-使用-Dockerfile-定制镜像.html#直接用-git-repo-进行构建)直接用 Git repo 进行构建\n\n或许你已经注意到了，`docker build` 还支持从 URL 构建，比如可以直接从 Git repo 中构建：\n\n```bash\n$ docker build https://github.com/twang2218/gitlab-ce-zh.git#:8.14\ndocker build https://github.com/twang2218/gitlab-ce-zh.git\\#:8.14\nSending build context to Docker daemon 2.048 kB\nStep 1 : FROM gitlab/gitlab-ce:8.14.0-ce.0\n8.14.0-ce.0: Pulling from gitlab/gitlab-ce\naed15891ba52: Already exists\n773ae8583d14: Already exists\n...\n```\n\n\n\n这行命令指定了构建所需的 Git repo，并且指定默认的 `master` 分支，构建目录为 `/8.14/`，然后 Docker 就会自己去 `git clone` 这个项目、切换到指定分支、并进入到指定目录后开始构建。","source":"_posts/Docker基础.md","raw":"---\ntitle: Docker基础-镜像\ndate: 2020-07-04 10:25:47\ncategories: docker \ntags: docker\n---\n\n#### Docker 镜像\n\n<!--more-->\n\n##### 分层存储\n\n\n\n因为镜像包含操作系统完整的 `root` 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 [Union FS](https://en.wikipedia.org/wiki/Union_mount) 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。\n\n镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。\n\n分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。\n\n\n\n##### 虚悬镜像\n\n\n\n一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 `<none>`。：\n\n```bash\n<none>               <none>              00285df0df87        5 days ago          342 MB\n```\n\n1\n\n这个镜像原本是有镜像名和标签的，原来为 `mongo:3.2`，随着官方镜像维护，发布了新版本后，重新 `docker pull mongo:3.2` 时，`mongo:3.2` 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 `<none>`。除了 `docker pull` 可能导致这种情况，`docker build` 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 `<none>` 的镜像。这类无标签镜像也被称为 **虚悬镜像(dangling image)** ，可以用下面的命令专门显示这类镜像：\n\n```bash\n$ docker image ls -f dangling=true\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n<none>              <none>              00285df0df87        5 days ago          342 MB\n```\n\n\n\n一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。\n\n```bash\n$ docker image prune\n```\n\n\n\n##### DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）\n\n\n\n如果注意，会看到 `docker build` 命令最后有一个 `.`。`.` 表示当前目录，而 `Dockerfile` 就在当前目录，因此不少初学者以为这个路径是在指定 `Dockerfile` 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定**上下文路径**。那么什么是上下文呢？\n\n首先我们要理解 `docker build` 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 [Docker Remote API](https://docs.docker.com/engine/reference/api/docker_remote_api/)，而如 `docker` 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 `docker` 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。\n\n当我们进行镜像构建的时候，并非所有定制都会通过 `RUN` 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 `COPY` 指令、`ADD` 指令等。而 `docker build` 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？\n\n这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，`docker build` 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。\n\n如果在 `Dockerfile` 中这么写：\n\n```dockerfile\nCOPY ./package.json /app/\n```\n\n\n\n这并不是要复制执行 `docker build` 命令所在的目录下的 `package.json`，也不是复制 `Dockerfile` 所在目录下的 `package.json`，而是复制 **上下文（context）** 目录下的 `package.json`。\n\n因此，`COPY` 这类指令中的源文件的路径都是*相对路径*。这也是初学者经常会问的为什么 `COPY ../package.json /app` 或者 `COPY /opt/xxxx /app` 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。\n\n现在就可以理解刚才的命令 `docker build -t nginx:v3 .` 中的这个 `.`，实际上是在指定上下文的目录，`docker build` 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。\n\n如果观察 `docker build` 输出，我们其实已经看到了这个发送上下文的过程：\n\n```bash\n$ docker build -t nginx:v3 .\nSending build context to Docker daemon 2.048 kB\n...\n```\n\n\n\n理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 `COPY /opt/xxxx /app` 不工作后，于是干脆将 `Dockerfile` 放到了硬盘根目录去构建，结果发现 `docker build` 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 `docker build` 打包整个硬盘，这显然是使用错误。\n\n一般来说，应该会将 `Dockerfile` 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 `.gitignore` 一样的语法写一个 `.dockerignore`，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。\n\n那么为什么会有人误以为 `.` 是指定 `Dockerfile` 所在目录呢？这是因为在默认情况下，如果不额外指定 `Dockerfile` 的话，会将上下文目录下的名为 `Dockerfile` 的文件作为 Dockerfile。\n\n这只是默认行为，实际上 `Dockerfile` 的文件名并不要求必须为 `Dockerfile`，而且并不要求必须位于上下文目录中，比如可以用 `-f ../Dockerfile.php` 参数指定某个文件作为 `Dockerfile`。\n\n当然，一般大家习惯性的会使用默认的文件名 `Dockerfile`，以及会将其置于镜像构建上下文目录中。\n\n## [#](https://www.funtl.com/zh/docs-docker/Docker-使用-Dockerfile-定制镜像.html#其它-docker-build-的用法)其它 `docker build` 的用法\n\n### [#](https://www.funtl.com/zh/docs-docker/Docker-使用-Dockerfile-定制镜像.html#直接用-git-repo-进行构建)直接用 Git repo 进行构建\n\n或许你已经注意到了，`docker build` 还支持从 URL 构建，比如可以直接从 Git repo 中构建：\n\n```bash\n$ docker build https://github.com/twang2218/gitlab-ce-zh.git#:8.14\ndocker build https://github.com/twang2218/gitlab-ce-zh.git\\#:8.14\nSending build context to Docker daemon 2.048 kB\nStep 1 : FROM gitlab/gitlab-ce:8.14.0-ce.0\n8.14.0-ce.0: Pulling from gitlab/gitlab-ce\naed15891ba52: Already exists\n773ae8583d14: Already exists\n...\n```\n\n\n\n这行命令指定了构建所需的 Git repo，并且指定默认的 `master` 分支，构建目录为 `/8.14/`，然后 Docker 就会自己去 `git clone` 这个项目、切换到指定分支、并进入到指定目录后开始构建。","slug":"Docker基础","published":1,"updated":"2020-07-04T06:30:58.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7dequg0003lwqadz6377d4","content":"<h4 id=\"Docker-镜像\"><a href=\"#Docker-镜像\" class=\"headerlink\" title=\"Docker 镜像\"></a>Docker 镜像</h4><a id=\"more\"></a>\n\n<h5 id=\"分层存储\"><a href=\"#分层存储\" class=\"headerlink\" title=\"分层存储\"></a>分层存储</h5><p>因为镜像包含操作系统完整的 <code>root</code> 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 <a href=\"https://en.wikipedia.org/wiki/Union_mount\" target=\"_blank\" rel=\"noopener\">Union FS</a> 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p>\n<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>\n<p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p>\n<h5 id=\"虚悬镜像\"><a href=\"#虚悬镜像\" class=\"headerlink\" title=\"虚悬镜像\"></a>虚悬镜像</h5><p>一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 <code>&lt;none&gt;</code>。：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;none&gt;               &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br></pre></td></tr></table></figure>\n\n<p>1</p>\n<p>这个镜像原本是有镜像名和标签的，原来为 <code>mongo:3.2</code>，随着官方镜像维护，发布了新版本后，重新 <code>docker pull mongo:3.2</code> 时，<code>mongo:3.2</code> 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 <code>&lt;none&gt;</code>。除了 <code>docker pull</code> 可能导致这种情况，<code>docker build</code> 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code> 的镜像。这类无标签镜像也被称为 <strong>虚悬镜像(dangling image)</strong> ，可以用下面的命令专门显示这类镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls -f dangling=<span class=\"literal\">true</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">&lt;none&gt;              &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image prune</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）\"><a href=\"#DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）\" class=\"headerlink\" title=\"DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）\"></a>DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）</h5><p>如果注意，会看到 <code>docker build</code> 命令最后有一个 <code>.</code>。<code>.</code> 表示当前目录，而 <code>Dockerfile</code> 就在当前目录，因此不少初学者以为这个路径是在指定 <code>Dockerfile</code> 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定<strong>上下文路径</strong>。那么什么是上下文呢？</p>\n<p>首先我们要理解 <code>docker build</code> 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 <a href=\"https://docs.docker.com/engine/reference/api/docker_remote_api/\" target=\"_blank\" rel=\"noopener\">Docker Remote API</a>，而如 <code>docker</code> 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 <code>docker</code> 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。</p>\n<p>当我们进行镜像构建的时候，并非所有定制都会通过 <code>RUN</code> 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 <code>COPY</code> 指令、<code>ADD</code> 指令等。而 <code>docker build</code> 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？</p>\n<p>这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，<code>docker build</code> 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。</p>\n<p>如果在 <code>Dockerfile</code> 中这么写：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这并不是要复制执行 <code>docker build</code> 命令所在的目录下的 <code>package.json</code>，也不是复制 <code>Dockerfile</code> 所在目录下的 <code>package.json</code>，而是复制 <strong>上下文（context）</strong> 目录下的 <code>package.json</code>。</p>\n<p>因此，<code>COPY</code> 这类指令中的源文件的路径都是<em>相对路径</em>。这也是初学者经常会问的为什么 <code>COPY ../package.json /app</code> 或者 <code>COPY /opt/xxxx /app</code> 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。</p>\n<p>现在就可以理解刚才的命令 <code>docker build -t nginx:v3 .</code> 中的这个 <code>.</code>，实际上是在指定上下文的目录，<code>docker build</code> 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。</p>\n<p>如果观察 <code>docker build</code> 输出，我们其实已经看到了这个发送上下文的过程：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t nginx:v3 .</span><br><span class=\"line\">Sending build context to Docker daemon 2.048 kB</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 <code>COPY /opt/xxxx /app</code> 不工作后，于是干脆将 <code>Dockerfile</code> 放到了硬盘根目录去构建，结果发现 <code>docker build</code> 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 <code>docker build</code> 打包整个硬盘，这显然是使用错误。</p>\n<p>一般来说，应该会将 <code>Dockerfile</code> 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 <code>.gitignore</code> 一样的语法写一个 <code>.dockerignore</code>，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。</p>\n<p>那么为什么会有人误以为 <code>.</code> 是指定 <code>Dockerfile</code> 所在目录呢？这是因为在默认情况下，如果不额外指定 <code>Dockerfile</code> 的话，会将上下文目录下的名为 <code>Dockerfile</code> 的文件作为 Dockerfile。</p>\n<p>这只是默认行为，实际上 <code>Dockerfile</code> 的文件名并不要求必须为 <code>Dockerfile</code>，而且并不要求必须位于上下文目录中，比如可以用 <code>-f ../Dockerfile.php</code> 参数指定某个文件作为 <code>Dockerfile</code>。</p>\n<p>当然，一般大家习惯性的会使用默认的文件名 <code>Dockerfile</code>，以及会将其置于镜像构建上下文目录中。</p>\n<h2 id=\"其它-docker-build-的用法\"><a href=\"#其它-docker-build-的用法\" class=\"headerlink\" title=\"#其它 docker build 的用法\"></a><a href=\"https://www.funtl.com/zh/docs-docker/Docker-使用-Dockerfile-定制镜像.html#其它-docker-build-的用法\" target=\"_blank\" rel=\"noopener\">#</a>其它 <code>docker build</code> 的用法</h2><h3 id=\"直接用-Git-repo-进行构建\"><a href=\"#直接用-Git-repo-进行构建\" class=\"headerlink\" title=\"#直接用 Git repo 进行构建\"></a><a href=\"https://www.funtl.com/zh/docs-docker/Docker-使用-Dockerfile-定制镜像.html#直接用-git-repo-进行构建\" target=\"_blank\" rel=\"noopener\">#</a>直接用 Git repo 进行构建</h3><p>或许你已经注意到了，<code>docker build</code> 还支持从 URL 构建，比如可以直接从 Git repo 中构建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build https://github.com/twang2218/gitlab-ce-zh.git<span class=\"comment\">#:8.14</span></span><br><span class=\"line\">docker build https://github.com/twang2218/gitlab-ce-zh.git\\<span class=\"comment\">#:8.14</span></span><br><span class=\"line\">Sending build context to Docker daemon 2.048 kB</span><br><span class=\"line\">Step 1 : FROM gitlab/gitlab-ce:8.14.0-ce.0</span><br><span class=\"line\">8.14.0-ce.0: Pulling from gitlab/gitlab-ce</span><br><span class=\"line\">aed15891ba52: Already exists</span><br><span class=\"line\">773ae8583d14: Already exists</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这行命令指定了构建所需的 Git repo，并且指定默认的 <code>master</code> 分支，构建目录为 <code>/8.14/</code>，然后 Docker 就会自己去 <code>git clone</code> 这个项目、切换到指定分支、并进入到指定目录后开始构建。</p>\n","site":{"data":{}},"length":3270,"excerpt":"<h4 id=\"Docker-镜像\"><a href=\"#Docker-镜像\" class=\"headerlink\" title=\"Docker 镜像\"></a>Docker 镜像</h4>","more":"<h5 id=\"分层存储\"><a href=\"#分层存储\" class=\"headerlink\" title=\"分层存储\"></a>分层存储</h5><p>因为镜像包含操作系统完整的 <code>root</code> 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 <a href=\"https://en.wikipedia.org/wiki/Union_mount\" target=\"_blank\" rel=\"noopener\">Union FS</a> 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p>\n<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>\n<p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p>\n<h5 id=\"虚悬镜像\"><a href=\"#虚悬镜像\" class=\"headerlink\" title=\"虚悬镜像\"></a>虚悬镜像</h5><p>一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 <code>&lt;none&gt;</code>。：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;none&gt;               &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br></pre></td></tr></table></figure>\n\n<p>1</p>\n<p>这个镜像原本是有镜像名和标签的，原来为 <code>mongo:3.2</code>，随着官方镜像维护，发布了新版本后，重新 <code>docker pull mongo:3.2</code> 时，<code>mongo:3.2</code> 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 <code>&lt;none&gt;</code>。除了 <code>docker pull</code> 可能导致这种情况，<code>docker build</code> 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code> 的镜像。这类无标签镜像也被称为 <strong>虚悬镜像(dangling image)</strong> ，可以用下面的命令专门显示这类镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls -f dangling=<span class=\"literal\">true</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">&lt;none&gt;              &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image prune</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）\"><a href=\"#DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）\" class=\"headerlink\" title=\"DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）\"></a>DockerFile镜像构建上下文（Context）（客户端将当前目录下内容打包传给docker引擎）</h5><p>如果注意，会看到 <code>docker build</code> 命令最后有一个 <code>.</code>。<code>.</code> 表示当前目录，而 <code>Dockerfile</code> 就在当前目录，因此不少初学者以为这个路径是在指定 <code>Dockerfile</code> 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定<strong>上下文路径</strong>。那么什么是上下文呢？</p>\n<p>首先我们要理解 <code>docker build</code> 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 <a href=\"https://docs.docker.com/engine/reference/api/docker_remote_api/\" target=\"_blank\" rel=\"noopener\">Docker Remote API</a>，而如 <code>docker</code> 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 <code>docker</code> 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。</p>\n<p>当我们进行镜像构建的时候，并非所有定制都会通过 <code>RUN</code> 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 <code>COPY</code> 指令、<code>ADD</code> 指令等。而 <code>docker build</code> 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？</p>\n<p>这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，<code>docker build</code> 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。</p>\n<p>如果在 <code>Dockerfile</code> 中这么写：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这并不是要复制执行 <code>docker build</code> 命令所在的目录下的 <code>package.json</code>，也不是复制 <code>Dockerfile</code> 所在目录下的 <code>package.json</code>，而是复制 <strong>上下文（context）</strong> 目录下的 <code>package.json</code>。</p>\n<p>因此，<code>COPY</code> 这类指令中的源文件的路径都是<em>相对路径</em>。这也是初学者经常会问的为什么 <code>COPY ../package.json /app</code> 或者 <code>COPY /opt/xxxx /app</code> 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。</p>\n<p>现在就可以理解刚才的命令 <code>docker build -t nginx:v3 .</code> 中的这个 <code>.</code>，实际上是在指定上下文的目录，<code>docker build</code> 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。</p>\n<p>如果观察 <code>docker build</code> 输出，我们其实已经看到了这个发送上下文的过程：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t nginx:v3 .</span><br><span class=\"line\">Sending build context to Docker daemon 2.048 kB</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 <code>COPY /opt/xxxx /app</code> 不工作后，于是干脆将 <code>Dockerfile</code> 放到了硬盘根目录去构建，结果发现 <code>docker build</code> 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 <code>docker build</code> 打包整个硬盘，这显然是使用错误。</p>\n<p>一般来说，应该会将 <code>Dockerfile</code> 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 <code>.gitignore</code> 一样的语法写一个 <code>.dockerignore</code>，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。</p>\n<p>那么为什么会有人误以为 <code>.</code> 是指定 <code>Dockerfile</code> 所在目录呢？这是因为在默认情况下，如果不额外指定 <code>Dockerfile</code> 的话，会将上下文目录下的名为 <code>Dockerfile</code> 的文件作为 Dockerfile。</p>\n<p>这只是默认行为，实际上 <code>Dockerfile</code> 的文件名并不要求必须为 <code>Dockerfile</code>，而且并不要求必须位于上下文目录中，比如可以用 <code>-f ../Dockerfile.php</code> 参数指定某个文件作为 <code>Dockerfile</code>。</p>\n<p>当然，一般大家习惯性的会使用默认的文件名 <code>Dockerfile</code>，以及会将其置于镜像构建上下文目录中。</p>\n<h2 id=\"其它-docker-build-的用法\"><a href=\"#其它-docker-build-的用法\" class=\"headerlink\" title=\"#其它 docker build 的用法\"></a><a href=\"https://www.funtl.com/zh/docs-docker/Docker-使用-Dockerfile-定制镜像.html#其它-docker-build-的用法\" target=\"_blank\" rel=\"noopener\">#</a>其它 <code>docker build</code> 的用法</h2><h3 id=\"直接用-Git-repo-进行构建\"><a href=\"#直接用-Git-repo-进行构建\" class=\"headerlink\" title=\"#直接用 Git repo 进行构建\"></a><a href=\"https://www.funtl.com/zh/docs-docker/Docker-使用-Dockerfile-定制镜像.html#直接用-git-repo-进行构建\" target=\"_blank\" rel=\"noopener\">#</a>直接用 Git repo 进行构建</h3><p>或许你已经注意到了，<code>docker build</code> 还支持从 URL 构建，比如可以直接从 Git repo 中构建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build https://github.com/twang2218/gitlab-ce-zh.git<span class=\"comment\">#:8.14</span></span><br><span class=\"line\">docker build https://github.com/twang2218/gitlab-ce-zh.git\\<span class=\"comment\">#:8.14</span></span><br><span class=\"line\">Sending build context to Docker daemon 2.048 kB</span><br><span class=\"line\">Step 1 : FROM gitlab/gitlab-ce:8.14.0-ce.0</span><br><span class=\"line\">8.14.0-ce.0: Pulling from gitlab/gitlab-ce</span><br><span class=\"line\">aed15891ba52: Already exists</span><br><span class=\"line\">773ae8583d14: Already exists</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这行命令指定了构建所需的 Git repo，并且指定默认的 <code>master</code> 分支，构建目录为 <code>/8.14/</code>，然后 Docker 就会自己去 <code>git clone</code> 这个项目、切换到指定分支、并进入到指定目录后开始构建。</p>"},{"title":"Dockerfile指令详解","date":"2020-07-04T06:32:26.000Z","_content":"\nDockerfile的常用指令：FROM,RUN,COPY,ADD,CMD等等\n\n<!--more-->\n\n\n\n###  FROM 指定基础镜像\n\n构建一个新的镜像是指定的基础镜像，一般为所需要的的环境\n\n如：\n\n```\nfrom Java：8\n```\n\n\n\n###  RUN 执行命令\n\n`RUN` 指令是用来执行命令行命令的。由于命令行的强大能力，`RUN` 指令在定制镜像时是最常用的指令之一。其格式有两种：\n\n- *shell* 格式：`RUN <命令>`，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 `RUN` 指令就是这种格式。\n\n```dockerfile\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n```\n\n\n\n- *exec* 格式：`RUN [\"可执行文件\", \"参数1\", \"参数2\"]`，这更像是函数调用中的格式。\n\n既然 `RUN` 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：\n\n```dockerfile\nFROM debian:jessie\n\nRUN apt-get update\nRUN apt-get install -y gcc libc6-dev make\nRUN wget -O redis.tar.gz \"http://download.redis.io/releases/redis-3.2.5.tar.gz\"\nRUN mkdir -p /usr/src/redis\nRUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1\nRUN make -C /usr/src/redis\nRUN make -C /usr/src/redis install\n```\n\n\n\n### CMD 容器启动命令\n\n`CMD` 指令就是用于指定默认的容器主进程的启动命令的。\n\n`CMD` 指令的格式和 `RUN` 相似，也是两种格式：\n\n- `shell` 格式：`CMD <命令>`\n- `exec` 格式：`CMD [\"可执行文件\", \"参数1\", \"参数2\"...]`\n- 参数列表格式：`CMD [\"参数1\", \"参数2\"...]`。在指定了 `ENTRYPOINT` 指令后，用 `CMD` 指定具体的参数。\n\n如：\n\n```ockerfile\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\n\n\n如果使用 `shell` 格式的话，实际的命令会被包装为 `sh -c` 的参数的形式进行执行。比如：\n\n```dockerfile\nCMD echo $HOME\n```\n\n\n\n在实际执行中，会将其变更为：\n\n```dockerfile\nCMD [ \"sh\", \"-c\", \"echo $HOME\" ]\n```\n\n\n\n### COPY 复制文件\n\n格式：\n\n- `COPY <源路径>... <目标路径>`\n\n- `COPY [\"<源路径1>\",... \"<目标路径>\"]`\n\n  `COPY` 指令将从构建上下文目录中 `<源路径>` 的文件/目录复制到新的一层的镜像内的 `<目标路径>` 位置。比如：\n\n  ```dockerfile\n  COPY package.json /usr/src/app/\n  ```\n\n  1\n\n  `<源路径>` 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 [`filepath.Match`](https://golang.org/pkg/path/filepath/#Match) 规则，如：\n\n  ```dockerfle\n  COPY hom* /mydir/\n  COPY hom?.txt /mydir/\n  ```\n\n\n\n### ADD 更高级的复制文件\n\n`ADD` 指令和 `COPY` 的格式和性质基本一致。但是在 `COPY` 基础上增加了一些功能。\n\n比如 `<源路径>` 可以是一个 `URL`，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 `<目标路径>` 去。\n\n另外需要注意的是，`ADD` 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。\n\n因此在 `COPY` 和 `ADD` 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 `COPY` 指令，仅在需要自动解压缩的场合使用 `ADD`。\n\n\n\n### WORKDIR 指定工作目录\n\n格式为 `WORKDIR <工作目录路径>`\n\n使用 `WORKDIR` 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，`WORKDIR` 会帮你建立目录。\n\n\n\n###  EXPOSE 暴露端口\n\n格式为 `EXPOSE <端口1> [<端口2>...]`\n\n`EXPOSE` 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 `docker run -P` 时，会自动随机映射 `EXPOSE` 的端口。\n\n`EXPOSE` 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。\n\n\n\n###  ENV 设置环境变量\n\n格式有两种：\n\n- `ENV <key> <value>`\n- `ENV <key1>=<value1> <key2>=<value2>...`\n\n这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 `RUN`，还是运行时的应用，都可以直接使用这里定义的环境变量。\n\n\n\n### ARG 构建参数\n\n格式：`ARG <参数名>[=<默认值>]`\n\n构建参数和 `ENV` 的效果一样，都是设置环境变量。所不同的是，`ARG` 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 `ARG` 保存密码之类的信息，因为 `docker history` 还是可以看到所有值的。\n\n`Dockerfile` 中的 `ARG` 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 `docker build` 中用 `--build-arg <参数名>=<值>` 来覆盖。\n\n在 1.13 之前的版本，要求 `--build-arg` 中的参数名，必须在 `Dockerfile` 中用 `ARG` 定义过了，换句话说，就是 `--build-arg` 指定的参数，必须在 `Dockerfile` 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 `Dockerfile` 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。\n\n## \n\n\n\n### VOLUME 定义匿名卷\n\n- `VOLUME [\"<路径1>\", \"<路径2>\"...]`\n- `VOLUME <路径>`\n\n之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 `Dockerfile` 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。\n\n```dockerfile\nVOLUME /data\n```\n\n\n\n这里的 `/data` 目录就会在运行时自动挂载为匿名卷，任何向 `/data` 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：\n\n```bash\ndocker run -d -v mydata:/data xxxx\n```\n\n\n\n在这行命令中，就使用了 `mydata` 这个命名卷挂载到了 `/data` 这个位置，替代了 `Dockerfile` 中定义的匿名卷的挂载配置。\n\n\n\n###  ENTRYPOINT 入口点\n\n`ENTRYPOINT` 的格式和 `RUN` 指令格式一样，分为 `exec` 格式和 `shell` 格式。\n\n`ENTRYPOINT` 的目的和 `CMD` 一样，都是在指定容器启动程序及参数。`ENTRYPOINT` 在运行时也可以替代，不过比 `CMD` 要略显繁琐，需要通过 `docker run` 的参数 `--entrypoint` 来指定\n\n当指定了 `ENTRYPOINT` 后，`CMD` 的含义就发生了改变，不再是直接的运行其命令，而是将 `CMD` 的内容作为参数传给 `ENTRYPOINT` 指令，换句话说实际执行时，将变为：\n\n```bash\n<ENTRYPOINT> \"<CMD>\"\n```\n\n\n\n### ONBUILD 为他人作嫁衣\n\n格式：`ONBUILD <其它指令>`。\n\n`ONBUILD` 是一个特殊的指令，它后面跟的是其它指令，比如 `RUN`, `COPY` 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。\n\n`Dockerfile` 中的其它指令都是为了定制当前镜像而准备的，唯有 `ONBUILD` 是为了帮助别人定制自己而准备的。\n\n假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 `npm` 进行包管理，所有依赖、配置、启动信息等会放到 `package.json` 文件里。在拿到程序代码后，需要先进行 `npm install` 才可以获得所有需要的依赖。然后就可以通过 `npm start` 来启动应用。因此，一般来说会这样写 `Dockerfile`：\n\n```dockerfile\nFROM node:slim\nRUN mkdir /app\nWORKDIR /app\nCOPY ./package.json /app\nRUN [ \"npm\", \"install\" ]\nCOPY . /app/\nCMD [ \"npm\", \"start\" ]\n```\n\n\n\n\n把这个 `Dockerfile` 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 `Dockerfile` 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。\n\n如果第一个 Node.js 项目在开发过程中，发现这个 `Dockerfile` 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 `Dockerfile`，再次构建，问题解决。\b第一个项目没问题了，但是第二个项目呢？虽然最初 `Dockerfile` 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 `Dockerfile`，而第二个项目的 `Dockerfile` 就会被自动修复。\n\n那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 `Dockerfile` 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 `Dockerfile` 就会变为：\n\n```dockerfile\nFROM node:slim\nRUN mkdir /app\nWORKDIR /app\nCMD [ \"npm\", \"start\" ]\n```\n\n\n\n这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 `my-node` 的话，各个项目内的自己的 `Dockerfile` 就变为：\n\n```dockerfile\nFROM my-node\nCOPY ./package.json /app\nRUN [ \"npm\", \"install\" ]\nCOPY . /app/\n```\n\n\n\n基础镜像变化后，各个项目都用这个 `Dockerfile` 重新构建镜像，会继承基础镜像的更新。\n\n那么，问题解决了么？没有。准确说，只解决了一半。如果这个 `Dockerfile` 里面有些东西需要调整呢？比如 `npm install` 都需要加一些参数，那怎么办？这一行 `RUN` 是不可能放入基础镜像的，因为涉及到了当前项目的 `./package.json`，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 `Dockerfile` 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。\n\n`ONBUILD` 可以解决这个问题。让我们用 `ONBUILD` 重新写一下基础镜像的 `Dockerfile`:\n\n```dockerfile\nFROM node:slim\nRUN mkdir /app\nWORKDIR /app\nONBUILD COPY ./package.json /app\nONBUILD RUN [ \"npm\", \"install\" ]\nONBUILD COPY . /app/\nCMD [ \"npm\", \"start\" ]\n```\n\n\n\n这次我们回到原始的 `Dockerfile`，但是这次将项目相关的指令加上 `ONBUILD`，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 `Dockerfile` 就变成了简单地：\n\n```dockerfile\nFROM my-node\n```\n\n\n\n是的，只有这么一行。当在各个项目目录中，用这个只有一行的 `Dockerfile` 构建镜像时，之前基础镜像的那三行 `ONBUILD` 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 `npm install`，生成应用镜像。\n\n","source":"_posts/Dockerfile指令详解.md","raw":"---\ntitle: Dockerfile指令详解\ndate: 2020-07-04 14:32:26\ncategories: docker\ntags: Dockerfile\n---\n\nDockerfile的常用指令：FROM,RUN,COPY,ADD,CMD等等\n\n<!--more-->\n\n\n\n###  FROM 指定基础镜像\n\n构建一个新的镜像是指定的基础镜像，一般为所需要的的环境\n\n如：\n\n```\nfrom Java：8\n```\n\n\n\n###  RUN 执行命令\n\n`RUN` 指令是用来执行命令行命令的。由于命令行的强大能力，`RUN` 指令在定制镜像时是最常用的指令之一。其格式有两种：\n\n- *shell* 格式：`RUN <命令>`，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 `RUN` 指令就是这种格式。\n\n```dockerfile\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n```\n\n\n\n- *exec* 格式：`RUN [\"可执行文件\", \"参数1\", \"参数2\"]`，这更像是函数调用中的格式。\n\n既然 `RUN` 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：\n\n```dockerfile\nFROM debian:jessie\n\nRUN apt-get update\nRUN apt-get install -y gcc libc6-dev make\nRUN wget -O redis.tar.gz \"http://download.redis.io/releases/redis-3.2.5.tar.gz\"\nRUN mkdir -p /usr/src/redis\nRUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1\nRUN make -C /usr/src/redis\nRUN make -C /usr/src/redis install\n```\n\n\n\n### CMD 容器启动命令\n\n`CMD` 指令就是用于指定默认的容器主进程的启动命令的。\n\n`CMD` 指令的格式和 `RUN` 相似，也是两种格式：\n\n- `shell` 格式：`CMD <命令>`\n- `exec` 格式：`CMD [\"可执行文件\", \"参数1\", \"参数2\"...]`\n- 参数列表格式：`CMD [\"参数1\", \"参数2\"...]`。在指定了 `ENTRYPOINT` 指令后，用 `CMD` 指定具体的参数。\n\n如：\n\n```ockerfile\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\n\n\n如果使用 `shell` 格式的话，实际的命令会被包装为 `sh -c` 的参数的形式进行执行。比如：\n\n```dockerfile\nCMD echo $HOME\n```\n\n\n\n在实际执行中，会将其变更为：\n\n```dockerfile\nCMD [ \"sh\", \"-c\", \"echo $HOME\" ]\n```\n\n\n\n### COPY 复制文件\n\n格式：\n\n- `COPY <源路径>... <目标路径>`\n\n- `COPY [\"<源路径1>\",... \"<目标路径>\"]`\n\n  `COPY` 指令将从构建上下文目录中 `<源路径>` 的文件/目录复制到新的一层的镜像内的 `<目标路径>` 位置。比如：\n\n  ```dockerfile\n  COPY package.json /usr/src/app/\n  ```\n\n  1\n\n  `<源路径>` 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 [`filepath.Match`](https://golang.org/pkg/path/filepath/#Match) 规则，如：\n\n  ```dockerfle\n  COPY hom* /mydir/\n  COPY hom?.txt /mydir/\n  ```\n\n\n\n### ADD 更高级的复制文件\n\n`ADD` 指令和 `COPY` 的格式和性质基本一致。但是在 `COPY` 基础上增加了一些功能。\n\n比如 `<源路径>` 可以是一个 `URL`，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 `<目标路径>` 去。\n\n另外需要注意的是，`ADD` 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。\n\n因此在 `COPY` 和 `ADD` 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 `COPY` 指令，仅在需要自动解压缩的场合使用 `ADD`。\n\n\n\n### WORKDIR 指定工作目录\n\n格式为 `WORKDIR <工作目录路径>`\n\n使用 `WORKDIR` 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，`WORKDIR` 会帮你建立目录。\n\n\n\n###  EXPOSE 暴露端口\n\n格式为 `EXPOSE <端口1> [<端口2>...]`\n\n`EXPOSE` 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 `docker run -P` 时，会自动随机映射 `EXPOSE` 的端口。\n\n`EXPOSE` 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。\n\n\n\n###  ENV 设置环境变量\n\n格式有两种：\n\n- `ENV <key> <value>`\n- `ENV <key1>=<value1> <key2>=<value2>...`\n\n这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 `RUN`，还是运行时的应用，都可以直接使用这里定义的环境变量。\n\n\n\n### ARG 构建参数\n\n格式：`ARG <参数名>[=<默认值>]`\n\n构建参数和 `ENV` 的效果一样，都是设置环境变量。所不同的是，`ARG` 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 `ARG` 保存密码之类的信息，因为 `docker history` 还是可以看到所有值的。\n\n`Dockerfile` 中的 `ARG` 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 `docker build` 中用 `--build-arg <参数名>=<值>` 来覆盖。\n\n在 1.13 之前的版本，要求 `--build-arg` 中的参数名，必须在 `Dockerfile` 中用 `ARG` 定义过了，换句话说，就是 `--build-arg` 指定的参数，必须在 `Dockerfile` 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 `Dockerfile` 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。\n\n## \n\n\n\n### VOLUME 定义匿名卷\n\n- `VOLUME [\"<路径1>\", \"<路径2>\"...]`\n- `VOLUME <路径>`\n\n之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 `Dockerfile` 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。\n\n```dockerfile\nVOLUME /data\n```\n\n\n\n这里的 `/data` 目录就会在运行时自动挂载为匿名卷，任何向 `/data` 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：\n\n```bash\ndocker run -d -v mydata:/data xxxx\n```\n\n\n\n在这行命令中，就使用了 `mydata` 这个命名卷挂载到了 `/data` 这个位置，替代了 `Dockerfile` 中定义的匿名卷的挂载配置。\n\n\n\n###  ENTRYPOINT 入口点\n\n`ENTRYPOINT` 的格式和 `RUN` 指令格式一样，分为 `exec` 格式和 `shell` 格式。\n\n`ENTRYPOINT` 的目的和 `CMD` 一样，都是在指定容器启动程序及参数。`ENTRYPOINT` 在运行时也可以替代，不过比 `CMD` 要略显繁琐，需要通过 `docker run` 的参数 `--entrypoint` 来指定\n\n当指定了 `ENTRYPOINT` 后，`CMD` 的含义就发生了改变，不再是直接的运行其命令，而是将 `CMD` 的内容作为参数传给 `ENTRYPOINT` 指令，换句话说实际执行时，将变为：\n\n```bash\n<ENTRYPOINT> \"<CMD>\"\n```\n\n\n\n### ONBUILD 为他人作嫁衣\n\n格式：`ONBUILD <其它指令>`。\n\n`ONBUILD` 是一个特殊的指令，它后面跟的是其它指令，比如 `RUN`, `COPY` 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。\n\n`Dockerfile` 中的其它指令都是为了定制当前镜像而准备的，唯有 `ONBUILD` 是为了帮助别人定制自己而准备的。\n\n假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 `npm` 进行包管理，所有依赖、配置、启动信息等会放到 `package.json` 文件里。在拿到程序代码后，需要先进行 `npm install` 才可以获得所有需要的依赖。然后就可以通过 `npm start` 来启动应用。因此，一般来说会这样写 `Dockerfile`：\n\n```dockerfile\nFROM node:slim\nRUN mkdir /app\nWORKDIR /app\nCOPY ./package.json /app\nRUN [ \"npm\", \"install\" ]\nCOPY . /app/\nCMD [ \"npm\", \"start\" ]\n```\n\n\n\n\n把这个 `Dockerfile` 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 `Dockerfile` 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。\n\n如果第一个 Node.js 项目在开发过程中，发现这个 `Dockerfile` 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 `Dockerfile`，再次构建，问题解决。\b第一个项目没问题了，但是第二个项目呢？虽然最初 `Dockerfile` 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 `Dockerfile`，而第二个项目的 `Dockerfile` 就会被自动修复。\n\n那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 `Dockerfile` 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 `Dockerfile` 就会变为：\n\n```dockerfile\nFROM node:slim\nRUN mkdir /app\nWORKDIR /app\nCMD [ \"npm\", \"start\" ]\n```\n\n\n\n这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 `my-node` 的话，各个项目内的自己的 `Dockerfile` 就变为：\n\n```dockerfile\nFROM my-node\nCOPY ./package.json /app\nRUN [ \"npm\", \"install\" ]\nCOPY . /app/\n```\n\n\n\n基础镜像变化后，各个项目都用这个 `Dockerfile` 重新构建镜像，会继承基础镜像的更新。\n\n那么，问题解决了么？没有。准确说，只解决了一半。如果这个 `Dockerfile` 里面有些东西需要调整呢？比如 `npm install` 都需要加一些参数，那怎么办？这一行 `RUN` 是不可能放入基础镜像的，因为涉及到了当前项目的 `./package.json`，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 `Dockerfile` 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。\n\n`ONBUILD` 可以解决这个问题。让我们用 `ONBUILD` 重新写一下基础镜像的 `Dockerfile`:\n\n```dockerfile\nFROM node:slim\nRUN mkdir /app\nWORKDIR /app\nONBUILD COPY ./package.json /app\nONBUILD RUN [ \"npm\", \"install\" ]\nONBUILD COPY . /app/\nCMD [ \"npm\", \"start\" ]\n```\n\n\n\n这次我们回到原始的 `Dockerfile`，但是这次将项目相关的指令加上 `ONBUILD`，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 `Dockerfile` 就变成了简单地：\n\n```dockerfile\nFROM my-node\n```\n\n\n\n是的，只有这么一行。当在各个项目目录中，用这个只有一行的 `Dockerfile` 构建镜像时，之前基础镜像的那三行 `ONBUILD` 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 `npm install`，生成应用镜像。\n\n","slug":"Dockerfile指令详解","published":1,"updated":"2020-07-04T08:12:26.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7dequm0007lwqacx84aob4","content":"<p>Dockerfile的常用指令：FROM,RUN,COPY,ADD,CMD等等</p>\n<a id=\"more\"></a>\n\n\n\n<h3 id=\"FROM-指定基础镜像\"><a href=\"#FROM-指定基础镜像\" class=\"headerlink\" title=\"FROM 指定基础镜像\"></a>FROM 指定基础镜像</h3><p>构建一个新的镜像是指定的基础镜像，一般为所需要的的环境</p>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Java：8</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"RUN-执行命令\"><a href=\"#RUN-执行命令\" class=\"headerlink\" title=\"RUN 执行命令\"></a>RUN 执行命令</h3><p><code>RUN</code> 指令是用来执行命令行命令的。由于命令行的强大能力，<code>RUN</code> 指令在定制镜像时是最常用的指令之一。其格式有两种：</p>\n<ul>\n<li><em>shell</em> 格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 <code>RUN</code> 指令就是这种格式。</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><em>exec</em> 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</li>\n</ul>\n<p>既然 <code>RUN</code> 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> debian:jessie</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get install -y gcc libc6-dev make</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> wget -O redis.tar.gz <span class=\"string\">\"http://download.redis.io/releases/redis-3.2.5.tar.gz\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir -p /usr/src/redis</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> make -C /usr/src/redis</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> make -C /usr/src/redis install</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"CMD-容器启动命令\"><a href=\"#CMD-容器启动命令\" class=\"headerlink\" title=\"CMD 容器启动命令\"></a>CMD 容器启动命令</h3><p><code>CMD</code> 指令就是用于指定默认的容器主进程的启动命令的。</p>\n<p><code>CMD</code> 指令的格式和 <code>RUN</code> 相似，也是两种格式：</p>\n<ul>\n<li><code>shell</code> 格式：<code>CMD &lt;命令&gt;</code></li>\n<li><code>exec</code> 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code></li>\n<li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数。</li>\n</ul>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果使用 <code>shell</code> 格式的话，实际的命令会被包装为 <code>sh -c</code> 的参数的形式进行执行。比如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$HOME</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在实际执行中，会将其变更为：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [ <span class=\"string\">\"sh\"</span>, <span class=\"string\">\"-c\"</span>, <span class=\"string\">\"echo <span class=\"variable\">$HOME</span>\"</span> ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"COPY-复制文件\"><a href=\"#COPY-复制文件\" class=\"headerlink\" title=\"COPY 复制文件\"></a>COPY 复制文件</h3><p>格式：</p>\n<ul>\n<li><p><code>COPY &lt;源路径&gt;... &lt;目标路径&gt;</code></p>\n</li>\n<li><p><code>COPY [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></p>\n<p><code>COPY</code> 指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件/目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置。比如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> package.json /usr/src/app/</span></span><br></pre></td></tr></table></figure>\n\n<p>1</p>\n<p><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 <a href=\"https://golang.org/pkg/path/filepath/#Match\" target=\"_blank\" rel=\"noopener\"><code>filepath.Match</code></a> 规则，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY hom* &#x2F;mydir&#x2F;</span><br><span class=\"line\">COPY hom?.txt &#x2F;mydir&#x2F;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"ADD-更高级的复制文件\"><a href=\"#ADD-更高级的复制文件\" class=\"headerlink\" title=\"ADD 更高级的复制文件\"></a>ADD 更高级的复制文件</h3><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了一些功能。</p>\n<p>比如 <code>&lt;源路径&gt;</code> 可以是一个 <code>URL</code>，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 <code>&lt;目标路径&gt;</code> 去。</p>\n<p>另外需要注意的是，<code>ADD</code> 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。</p>\n<p>因此在 <code>COPY</code> 和 <code>ADD</code> 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code>。</p>\n<h3 id=\"WORKDIR-指定工作目录\"><a href=\"#WORKDIR-指定工作目录\" class=\"headerlink\" title=\"WORKDIR 指定工作目录\"></a>WORKDIR 指定工作目录</h3><p>格式为 <code>WORKDIR &lt;工作目录路径&gt;</code></p>\n<p>使用 <code>WORKDIR</code> 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。</p>\n<h3 id=\"EXPOSE-暴露端口\"><a href=\"#EXPOSE-暴露端口\" class=\"headerlink\" title=\"EXPOSE 暴露端口\"></a>EXPOSE 暴露端口</h3><p>格式为 <code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></p>\n<p><code>EXPOSE</code> 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口。</p>\n<p><code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p>\n<h3 id=\"ENV-设置环境变量\"><a href=\"#ENV-设置环境变量\" class=\"headerlink\" title=\"ENV 设置环境变量\"></a>ENV 设置环境变量</h3><p>格式有两种：</p>\n<ul>\n<li><code>ENV &lt;key&gt; &lt;value&gt;</code></li>\n<li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li>\n</ul>\n<p>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 <code>RUN</code>，还是运行时的应用，都可以直接使用这里定义的环境变量。</p>\n<h3 id=\"ARG-构建参数\"><a href=\"#ARG-构建参数\" class=\"headerlink\" title=\"ARG 构建参数\"></a>ARG 构建参数</h3><p>格式：<code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p>\n<p>构建参数和 <code>ENV</code> 的效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 <code>ARG</code> 保存密码之类的信息，因为 <code>docker history</code> 还是可以看到所有值的。</p>\n<p><code>Dockerfile</code> 中的 <code>ARG</code> 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p>\n<p>在 1.13 之前的版本，要求 <code>--build-arg</code> 中的参数名，必须在 <code>Dockerfile</code> 中用 <code>ARG</code> 定义过了，换句话说，就是 <code>--build-arg</code> 指定的参数，必须在 <code>Dockerfile</code> 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 <code>Dockerfile</code> 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h3 id=\"VOLUME-定义匿名卷\"><a href=\"#VOLUME-定义匿名卷\" class=\"headerlink\" title=\"VOLUME 定义匿名卷\"></a>VOLUME 定义匿名卷</h3><ul>\n<li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li>\n<li><code>VOLUME &lt;路径&gt;</code></li>\n</ul>\n<p>之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 <code>Dockerfile</code> 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">VOLUME</span><span class=\"bash\"> /data</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里的 <code>/data</code> 目录就会在运行时自动挂载为匿名卷，任何向 <code>/data</code> 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -v mydata:/data xxxx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在这行命令中，就使用了 <code>mydata</code> 这个命名卷挂载到了 <code>/data</code> 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置。</p>\n<h3 id=\"ENTRYPOINT-入口点\"><a href=\"#ENTRYPOINT-入口点\" class=\"headerlink\" title=\"ENTRYPOINT 入口点\"></a>ENTRYPOINT 入口点</h3><p><code>ENTRYPOINT</code> 的格式和 <code>RUN</code> 指令格式一样，分为 <code>exec</code> 格式和 <code>shell</code> 格式。</p>\n<p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定</p>\n<p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ENTRYPOINT&gt; <span class=\"string\">\"&lt;CMD&gt;\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ONBUILD-为他人作嫁衣\"><a href=\"#ONBUILD-为他人作嫁衣\" class=\"headerlink\" title=\"ONBUILD 为他人作嫁衣\"></a>ONBUILD 为他人作嫁衣</h3><p>格式：<code>ONBUILD &lt;其它指令&gt;</code>。</p>\n<p><code>ONBUILD</code> 是一个特殊的指令，它后面跟的是其它指令，比如 <code>RUN</code>, <code>COPY</code> 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p>\n<p><code>Dockerfile</code> 中的其它指令都是为了定制当前镜像而准备的，唯有 <code>ONBUILD</code> 是为了帮助别人定制自己而准备的。</p>\n<p>假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 <code>npm</code> 进行包管理，所有依赖、配置、启动信息等会放到 <code>package.json</code> 文件里。在拿到程序代码后，需要先进行 <code>npm install</code> 才可以获得所有需要的依赖。然后就可以通过 <code>npm start</code> 来启动应用。因此，一般来说会这样写 <code>Dockerfile</code>：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:slim</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir /app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"install\"</span> ]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . /app/</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"start\"</span> ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<p>把这个 <code>Dockerfile</code> 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 <code>Dockerfile</code> 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。</p>\n<p>如果第一个 Node.js 项目在开发过程中，发现这个 <code>Dockerfile</code> 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 <code>Dockerfile</code>，再次构建，问题解决。\b第一个项目没问题了，但是第二个项目呢？虽然最初 <code>Dockerfile</code> 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 <code>Dockerfile</code>，而第二个项目的 <code>Dockerfile</code> 就会被自动修复。</p>\n<p>那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 <code>Dockerfile</code> 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 <code>Dockerfile</code> 就会变为：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:slim</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir /app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"start\"</span> ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 <code>my-node</code> 的话，各个项目内的自己的 <code>Dockerfile</code> 就变为：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> my-node</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"install\"</span> ]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . /app/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>基础镜像变化后，各个项目都用这个 <code>Dockerfile</code> 重新构建镜像，会继承基础镜像的更新。</p>\n<p>那么，问题解决了么？没有。准确说，只解决了一半。如果这个 <code>Dockerfile</code> 里面有些东西需要调整呢？比如 <code>npm install</code> 都需要加一些参数，那怎么办？这一行 <code>RUN</code> 是不可能放入基础镜像的，因为涉及到了当前项目的 <code>./package.json</code>，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 <code>Dockerfile</code> 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。</p>\n<p><code>ONBUILD</code> 可以解决这个问题。让我们用 <code>ONBUILD</code> 重新写一下基础镜像的 <code>Dockerfile</code>:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:slim</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir /app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">RUN</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"install\"</span> ]</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">COPY</span><span class=\"bash\"> . /app/</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"start\"</span> ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这次我们回到原始的 <code>Dockerfile</code>，但是这次将项目相关的指令加上 <code>ONBUILD</code>，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 <code>Dockerfile</code> 就变成了简单地：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> my-node</span><br></pre></td></tr></table></figure>\n\n\n\n<p>是的，只有这么一行。当在各个项目目录中，用这个只有一行的 <code>Dockerfile</code> 构建镜像时，之前基础镜像的那三行 <code>ONBUILD</code> 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 <code>npm install</code>，生成应用镜像。</p>\n","site":{"data":{}},"length":5115,"excerpt":"<p>Dockerfile的常用指令：FROM,RUN,COPY,ADD,CMD等等</p>","more":"<h3 id=\"FROM-指定基础镜像\"><a href=\"#FROM-指定基础镜像\" class=\"headerlink\" title=\"FROM 指定基础镜像\"></a>FROM 指定基础镜像</h3><p>构建一个新的镜像是指定的基础镜像，一般为所需要的的环境</p>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Java：8</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"RUN-执行命令\"><a href=\"#RUN-执行命令\" class=\"headerlink\" title=\"RUN 执行命令\"></a>RUN 执行命令</h3><p><code>RUN</code> 指令是用来执行命令行命令的。由于命令行的强大能力，<code>RUN</code> 指令在定制镜像时是最常用的指令之一。其格式有两种：</p>\n<ul>\n<li><em>shell</em> 格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 <code>RUN</code> 指令就是这种格式。</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><em>exec</em> 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</li>\n</ul>\n<p>既然 <code>RUN</code> 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> debian:jessie</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get install -y gcc libc6-dev make</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> wget -O redis.tar.gz <span class=\"string\">\"http://download.redis.io/releases/redis-3.2.5.tar.gz\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir -p /usr/src/redis</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> make -C /usr/src/redis</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> make -C /usr/src/redis install</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"CMD-容器启动命令\"><a href=\"#CMD-容器启动命令\" class=\"headerlink\" title=\"CMD 容器启动命令\"></a>CMD 容器启动命令</h3><p><code>CMD</code> 指令就是用于指定默认的容器主进程的启动命令的。</p>\n<p><code>CMD</code> 指令的格式和 <code>RUN</code> 相似，也是两种格式：</p>\n<ul>\n<li><code>shell</code> 格式：<code>CMD &lt;命令&gt;</code></li>\n<li><code>exec</code> 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code></li>\n<li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数。</li>\n</ul>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果使用 <code>shell</code> 格式的话，实际的命令会被包装为 <code>sh -c</code> 的参数的形式进行执行。比如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$HOME</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在实际执行中，会将其变更为：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [ <span class=\"string\">\"sh\"</span>, <span class=\"string\">\"-c\"</span>, <span class=\"string\">\"echo <span class=\"variable\">$HOME</span>\"</span> ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"COPY-复制文件\"><a href=\"#COPY-复制文件\" class=\"headerlink\" title=\"COPY 复制文件\"></a>COPY 复制文件</h3><p>格式：</p>\n<ul>\n<li><p><code>COPY &lt;源路径&gt;... &lt;目标路径&gt;</code></p>\n</li>\n<li><p><code>COPY [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></p>\n<p><code>COPY</code> 指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件/目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置。比如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> package.json /usr/src/app/</span></span><br></pre></td></tr></table></figure>\n\n<p>1</p>\n<p><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 <a href=\"https://golang.org/pkg/path/filepath/#Match\" target=\"_blank\" rel=\"noopener\"><code>filepath.Match</code></a> 规则，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY hom* &#x2F;mydir&#x2F;</span><br><span class=\"line\">COPY hom?.txt &#x2F;mydir&#x2F;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"ADD-更高级的复制文件\"><a href=\"#ADD-更高级的复制文件\" class=\"headerlink\" title=\"ADD 更高级的复制文件\"></a>ADD 更高级的复制文件</h3><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了一些功能。</p>\n<p>比如 <code>&lt;源路径&gt;</code> 可以是一个 <code>URL</code>，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 <code>&lt;目标路径&gt;</code> 去。</p>\n<p>另外需要注意的是，<code>ADD</code> 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。</p>\n<p>因此在 <code>COPY</code> 和 <code>ADD</code> 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code>。</p>\n<h3 id=\"WORKDIR-指定工作目录\"><a href=\"#WORKDIR-指定工作目录\" class=\"headerlink\" title=\"WORKDIR 指定工作目录\"></a>WORKDIR 指定工作目录</h3><p>格式为 <code>WORKDIR &lt;工作目录路径&gt;</code></p>\n<p>使用 <code>WORKDIR</code> 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。</p>\n<h3 id=\"EXPOSE-暴露端口\"><a href=\"#EXPOSE-暴露端口\" class=\"headerlink\" title=\"EXPOSE 暴露端口\"></a>EXPOSE 暴露端口</h3><p>格式为 <code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></p>\n<p><code>EXPOSE</code> 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口。</p>\n<p><code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p>\n<h3 id=\"ENV-设置环境变量\"><a href=\"#ENV-设置环境变量\" class=\"headerlink\" title=\"ENV 设置环境变量\"></a>ENV 设置环境变量</h3><p>格式有两种：</p>\n<ul>\n<li><code>ENV &lt;key&gt; &lt;value&gt;</code></li>\n<li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li>\n</ul>\n<p>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 <code>RUN</code>，还是运行时的应用，都可以直接使用这里定义的环境变量。</p>\n<h3 id=\"ARG-构建参数\"><a href=\"#ARG-构建参数\" class=\"headerlink\" title=\"ARG 构建参数\"></a>ARG 构建参数</h3><p>格式：<code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p>\n<p>构建参数和 <code>ENV</code> 的效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 <code>ARG</code> 保存密码之类的信息，因为 <code>docker history</code> 还是可以看到所有值的。</p>\n<p><code>Dockerfile</code> 中的 <code>ARG</code> 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p>\n<p>在 1.13 之前的版本，要求 <code>--build-arg</code> 中的参数名，必须在 <code>Dockerfile</code> 中用 <code>ARG</code> 定义过了，换句话说，就是 <code>--build-arg</code> 指定的参数，必须在 <code>Dockerfile</code> 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 <code>Dockerfile</code> 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h3 id=\"VOLUME-定义匿名卷\"><a href=\"#VOLUME-定义匿名卷\" class=\"headerlink\" title=\"VOLUME 定义匿名卷\"></a>VOLUME 定义匿名卷</h3><ul>\n<li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li>\n<li><code>VOLUME &lt;路径&gt;</code></li>\n</ul>\n<p>之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 <code>Dockerfile</code> 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">VOLUME</span><span class=\"bash\"> /data</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里的 <code>/data</code> 目录就会在运行时自动挂载为匿名卷，任何向 <code>/data</code> 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -v mydata:/data xxxx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在这行命令中，就使用了 <code>mydata</code> 这个命名卷挂载到了 <code>/data</code> 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置。</p>\n<h3 id=\"ENTRYPOINT-入口点\"><a href=\"#ENTRYPOINT-入口点\" class=\"headerlink\" title=\"ENTRYPOINT 入口点\"></a>ENTRYPOINT 入口点</h3><p><code>ENTRYPOINT</code> 的格式和 <code>RUN</code> 指令格式一样，分为 <code>exec</code> 格式和 <code>shell</code> 格式。</p>\n<p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定</p>\n<p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ENTRYPOINT&gt; <span class=\"string\">\"&lt;CMD&gt;\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ONBUILD-为他人作嫁衣\"><a href=\"#ONBUILD-为他人作嫁衣\" class=\"headerlink\" title=\"ONBUILD 为他人作嫁衣\"></a>ONBUILD 为他人作嫁衣</h3><p>格式：<code>ONBUILD &lt;其它指令&gt;</code>。</p>\n<p><code>ONBUILD</code> 是一个特殊的指令，它后面跟的是其它指令，比如 <code>RUN</code>, <code>COPY</code> 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p>\n<p><code>Dockerfile</code> 中的其它指令都是为了定制当前镜像而准备的，唯有 <code>ONBUILD</code> 是为了帮助别人定制自己而准备的。</p>\n<p>假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 <code>npm</code> 进行包管理，所有依赖、配置、启动信息等会放到 <code>package.json</code> 文件里。在拿到程序代码后，需要先进行 <code>npm install</code> 才可以获得所有需要的依赖。然后就可以通过 <code>npm start</code> 来启动应用。因此，一般来说会这样写 <code>Dockerfile</code>：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:slim</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir /app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"install\"</span> ]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . /app/</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"start\"</span> ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<p>把这个 <code>Dockerfile</code> 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 <code>Dockerfile</code> 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。</p>\n<p>如果第一个 Node.js 项目在开发过程中，发现这个 <code>Dockerfile</code> 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 <code>Dockerfile</code>，再次构建，问题解决。\b第一个项目没问题了，但是第二个项目呢？虽然最初 <code>Dockerfile</code> 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 <code>Dockerfile</code>，而第二个项目的 <code>Dockerfile</code> 就会被自动修复。</p>\n<p>那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 <code>Dockerfile</code> 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 <code>Dockerfile</code> 就会变为：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:slim</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir /app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"start\"</span> ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 <code>my-node</code> 的话，各个项目内的自己的 <code>Dockerfile</code> 就变为：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> my-node</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"install\"</span> ]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . /app/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>基础镜像变化后，各个项目都用这个 <code>Dockerfile</code> 重新构建镜像，会继承基础镜像的更新。</p>\n<p>那么，问题解决了么？没有。准确说，只解决了一半。如果这个 <code>Dockerfile</code> 里面有些东西需要调整呢？比如 <code>npm install</code> 都需要加一些参数，那怎么办？这一行 <code>RUN</code> 是不可能放入基础镜像的，因为涉及到了当前项目的 <code>./package.json</code>，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 <code>Dockerfile</code> 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。</p>\n<p><code>ONBUILD</code> 可以解决这个问题。让我们用 <code>ONBUILD</code> 重新写一下基础镜像的 <code>Dockerfile</code>:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:slim</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir /app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">RUN</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"install\"</span> ]</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">COPY</span><span class=\"bash\"> . /app/</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [ <span class=\"string\">\"npm\"</span>, <span class=\"string\">\"start\"</span> ]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这次我们回到原始的 <code>Dockerfile</code>，但是这次将项目相关的指令加上 <code>ONBUILD</code>，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 <code>Dockerfile</code> 就变成了简单地：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> my-node</span><br></pre></td></tr></table></figure>\n\n\n\n<p>是的，只有这么一行。当在各个项目目录中，用这个只有一行的 <code>Dockerfile</code> 构建镜像时，之前基础镜像的那三行 <code>ONBUILD</code> 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 <code>npm install</code>，生成应用镜像。</p>"},{"title":"Spring 编程式事务","date":"2019-11-21T13:55:45.000Z","_content":"\nSpring 编程式事务:1 配置文件bean.xml; 2在自己的业务层方法加编程式事务\n\n<!--more-->\n\n#### 1 配置文件bean.xml\n\n导入相关依赖后，在配置文件bean.xml文件中配置\n\n```\n\n    <!-- 配置事务管理器-->\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n    <!--这里是自己配置的数据源-->\n        <property name=\"dataSource\" ref=\"dataSource\"></property>\n    </bean>\n\n    <!--配置事务模板对象-->\n    <bean id=\"transactionTemplate\" class=\"org.springframework.transaction.support.TransactionTemplate\">\n        <property name=\"transactionManager\" ref=\"transactionManager\"></property>\n    </bean>\n```\n#### 2在自己的业务层方法加编程式事务\n在需要加事务的方法method中书写：\n```\npublic void method() {\n        transactionTemplate.execute(new TransactionCallback<Object>() {\n            @Override\n            public Object doInTransaction(TransactionStatus status) {\n                ......\n                自己的方法逻辑\n            }\n        });\n\n    }\n```","source":"_posts/Spring-编程式事务.md","raw":"---\ntitle: Spring 编程式事务\ndate: 2019-11-21 21:55:45\ncategories: Spring\ntags: Spring\n---\n\nSpring 编程式事务:1 配置文件bean.xml; 2在自己的业务层方法加编程式事务\n\n<!--more-->\n\n#### 1 配置文件bean.xml\n\n导入相关依赖后，在配置文件bean.xml文件中配置\n\n```\n\n    <!-- 配置事务管理器-->\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n    <!--这里是自己配置的数据源-->\n        <property name=\"dataSource\" ref=\"dataSource\"></property>\n    </bean>\n\n    <!--配置事务模板对象-->\n    <bean id=\"transactionTemplate\" class=\"org.springframework.transaction.support.TransactionTemplate\">\n        <property name=\"transactionManager\" ref=\"transactionManager\"></property>\n    </bean>\n```\n#### 2在自己的业务层方法加编程式事务\n在需要加事务的方法method中书写：\n```\npublic void method() {\n        transactionTemplate.execute(new TransactionCallback<Object>() {\n            @Override\n            public Object doInTransaction(TransactionStatus status) {\n                ......\n                自己的方法逻辑\n            }\n        });\n\n    }\n```","slug":"Spring-编程式事务","published":1,"updated":"2020-06-16T03:55:53.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7dequn0008lwqadbqcdsug","content":"<p>Spring 编程式事务:1 配置文件bean.xml; 2在自己的业务层方法加编程式事务</p>\n<a id=\"more\"></a>\n\n<h4 id=\"1-配置文件bean-xml\"><a href=\"#1-配置文件bean-xml\" class=\"headerlink\" title=\"1 配置文件bean.xml\"></a>1 配置文件bean.xml</h4><p>导入相关依赖后，在配置文件bean.xml文件中配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 配置事务管理器--&gt;</span><br><span class=\"line\">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">&lt;!--这里是自己配置的数据源--&gt;</span><br><span class=\"line\">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">&lt;&#x2F;bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--配置事务模板对象--&gt;</span><br><span class=\"line\">&lt;bean id&#x3D;&quot;transactionTemplate&quot; class&#x3D;&quot;org.springframework.transaction.support.TransactionTemplate&quot;&gt;</span><br><span class=\"line\">    &lt;property name&#x3D;&quot;transactionManager&quot; ref&#x3D;&quot;transactionManager&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2在自己的业务层方法加编程式事务\"><a href=\"#2在自己的业务层方法加编程式事务\" class=\"headerlink\" title=\"2在自己的业务层方法加编程式事务\"></a>2在自己的业务层方法加编程式事务</h4><p>在需要加事务的方法method中书写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void method() &#123;</span><br><span class=\"line\">        transactionTemplate.execute(new TransactionCallback&lt;Object&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public Object doInTransaction(TransactionStatus status) &#123;</span><br><span class=\"line\">                ......</span><br><span class=\"line\">                自己的方法逻辑</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":925,"excerpt":"<p>Spring 编程式事务:1 配置文件bean.xml; 2在自己的业务层方法加编程式事务</p>","more":"<h4 id=\"1-配置文件bean-xml\"><a href=\"#1-配置文件bean-xml\" class=\"headerlink\" title=\"1 配置文件bean.xml\"></a>1 配置文件bean.xml</h4><p>导入相关依赖后，在配置文件bean.xml文件中配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 配置事务管理器--&gt;</span><br><span class=\"line\">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">&lt;!--这里是自己配置的数据源--&gt;</span><br><span class=\"line\">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">&lt;&#x2F;bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--配置事务模板对象--&gt;</span><br><span class=\"line\">&lt;bean id&#x3D;&quot;transactionTemplate&quot; class&#x3D;&quot;org.springframework.transaction.support.TransactionTemplate&quot;&gt;</span><br><span class=\"line\">    &lt;property name&#x3D;&quot;transactionManager&quot; ref&#x3D;&quot;transactionManager&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2在自己的业务层方法加编程式事务\"><a href=\"#2在自己的业务层方法加编程式事务\" class=\"headerlink\" title=\"2在自己的业务层方法加编程式事务\"></a>2在自己的业务层方法加编程式事务</h4><p>在需要加事务的方法method中书写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void method() &#123;</span><br><span class=\"line\">        transactionTemplate.execute(new TransactionCallback&lt;Object&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public Object doInTransaction(TransactionStatus status) &#123;</span><br><span class=\"line\">                ......</span><br><span class=\"line\">                自己的方法逻辑</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"Spring 声明式事务注解@Transactional","date":"2019-11-21T07:30:59.000Z","_content":"\n Spring 声明式事务注解@Transactional使用的两种方式：1 结合xml配置使用； 2纯注解使用\n\n<!--more-->\n\n## 1 结合xml配置使用\n\n#### xml配置文件中加入\n\n```\n    <!-- 配置事务管理器 -->\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n    <!--自己配置的dataSource-->\n        <property name=\"dataSource\" ref=\"dataSource\"></property>\n    </bean>\n\n    <!-- 开启spring对注解事务的支持-->\n    <tx:annotation-driven transaction-manager=\"transactionManager\"></tx:annotation-driven>\n```\n##### 在serivce层或者serice层的方法加@Transactional注解\n参数：\npropagation：事务传播行为\ntimeout：事务超时设置\nisolation：事务隔离级别\n\n\n## 2 纯注解使用\n### 事务管理器配置类\n\n```\n/**\n * 和事务相关的配置类\n */\npublic class TransactionConfig {\n\n    /**\n     * 用于创建事务管理器对象\n     * @param dataSource\n     * @return\n     */\n    @Bean(name=\"transactionManager\")\n    public PlatformTransactionManager createTransactionManager(DataSource dataSource){\n        return new DataSourceTransactionManager(dataSource);\n    }\n}\n```\n##### service中的配置和1一样","source":"_posts/Spring-声明式事务注解-Transactional.md","raw":"---\ntitle: Spring 声明式事务注解@Transactional\ndate: 2019-11-21 15:30:59 \ncategories: Spring\ntags: Spring\n---\n\n Spring 声明式事务注解@Transactional使用的两种方式：1 结合xml配置使用； 2纯注解使用\n\n<!--more-->\n\n## 1 结合xml配置使用\n\n#### xml配置文件中加入\n\n```\n    <!-- 配置事务管理器 -->\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n    <!--自己配置的dataSource-->\n        <property name=\"dataSource\" ref=\"dataSource\"></property>\n    </bean>\n\n    <!-- 开启spring对注解事务的支持-->\n    <tx:annotation-driven transaction-manager=\"transactionManager\"></tx:annotation-driven>\n```\n##### 在serivce层或者serice层的方法加@Transactional注解\n参数：\npropagation：事务传播行为\ntimeout：事务超时设置\nisolation：事务隔离级别\n\n\n## 2 纯注解使用\n### 事务管理器配置类\n\n```\n/**\n * 和事务相关的配置类\n */\npublic class TransactionConfig {\n\n    /**\n     * 用于创建事务管理器对象\n     * @param dataSource\n     * @return\n     */\n    @Bean(name=\"transactionManager\")\n    public PlatformTransactionManager createTransactionManager(DataSource dataSource){\n        return new DataSourceTransactionManager(dataSource);\n    }\n}\n```\n##### service中的配置和1一样","slug":"Spring-声明式事务注解-Transactional","published":1,"updated":"2020-06-16T03:55:53.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7dequo0009lwqaduaz6oiy","content":"<p> Spring 声明式事务注解@Transactional使用的两种方式：1 结合xml配置使用； 2纯注解使用</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-结合xml配置使用\"><a href=\"#1-结合xml配置使用\" class=\"headerlink\" title=\"1 结合xml配置使用\"></a>1 结合xml配置使用</h2><h4 id=\"xml配置文件中加入\"><a href=\"#xml配置文件中加入\" class=\"headerlink\" title=\"xml配置文件中加入\"></a>xml配置文件中加入</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 配置事务管理器 --&gt;</span><br><span class=\"line\">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">&lt;!--自己配置的dataSource--&gt;</span><br><span class=\"line\">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">&lt;&#x2F;bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 开启spring对注解事务的支持--&gt;</span><br><span class=\"line\">&lt;tx:annotation-driven transaction-manager&#x3D;&quot;transactionManager&quot;&gt;&lt;&#x2F;tx:annotation-driven&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"在serivce层或者serice层的方法加-Transactional注解\"><a href=\"#在serivce层或者serice层的方法加-Transactional注解\" class=\"headerlink\" title=\"在serivce层或者serice层的方法加@Transactional注解\"></a>在serivce层或者serice层的方法加@Transactional注解</h5><p>参数：<br>propagation：事务传播行为<br>timeout：事务超时设置<br>isolation：事务隔离级别</p>\n<h2 id=\"2-纯注解使用\"><a href=\"#2-纯注解使用\" class=\"headerlink\" title=\"2 纯注解使用\"></a>2 纯注解使用</h2><h3 id=\"事务管理器配置类\"><a href=\"#事务管理器配置类\" class=\"headerlink\" title=\"事务管理器配置类\"></a>事务管理器配置类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 和事务相关的配置类</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class TransactionConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 用于创建事务管理器对象</span><br><span class=\"line\">     * @param dataSource</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean(name&#x3D;&quot;transactionManager&quot;)</span><br><span class=\"line\">    public PlatformTransactionManager createTransactionManager(DataSource dataSource)&#123;</span><br><span class=\"line\">        return new DataSourceTransactionManager(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"service中的配置和1一样\"><a href=\"#service中的配置和1一样\" class=\"headerlink\" title=\"service中的配置和1一样\"></a>service中的配置和1一样</h5>","site":{"data":{}},"length":973,"excerpt":"<p> Spring 声明式事务注解@Transactional使用的两种方式：1 结合xml配置使用； 2纯注解使用</p>","more":"<h2 id=\"1-结合xml配置使用\"><a href=\"#1-结合xml配置使用\" class=\"headerlink\" title=\"1 结合xml配置使用\"></a>1 结合xml配置使用</h2><h4 id=\"xml配置文件中加入\"><a href=\"#xml配置文件中加入\" class=\"headerlink\" title=\"xml配置文件中加入\"></a>xml配置文件中加入</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 配置事务管理器 --&gt;</span><br><span class=\"line\">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">&lt;!--自己配置的dataSource--&gt;</span><br><span class=\"line\">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">&lt;&#x2F;bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 开启spring对注解事务的支持--&gt;</span><br><span class=\"line\">&lt;tx:annotation-driven transaction-manager&#x3D;&quot;transactionManager&quot;&gt;&lt;&#x2F;tx:annotation-driven&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"在serivce层或者serice层的方法加-Transactional注解\"><a href=\"#在serivce层或者serice层的方法加-Transactional注解\" class=\"headerlink\" title=\"在serivce层或者serice层的方法加@Transactional注解\"></a>在serivce层或者serice层的方法加@Transactional注解</h5><p>参数：<br>propagation：事务传播行为<br>timeout：事务超时设置<br>isolation：事务隔离级别</p>\n<h2 id=\"2-纯注解使用\"><a href=\"#2-纯注解使用\" class=\"headerlink\" title=\"2 纯注解使用\"></a>2 纯注解使用</h2><h3 id=\"事务管理器配置类\"><a href=\"#事务管理器配置类\" class=\"headerlink\" title=\"事务管理器配置类\"></a>事务管理器配置类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 和事务相关的配置类</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class TransactionConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 用于创建事务管理器对象</span><br><span class=\"line\">     * @param dataSource</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean(name&#x3D;&quot;transactionManager&quot;)</span><br><span class=\"line\">    public PlatformTransactionManager createTransactionManager(DataSource dataSource)&#123;</span><br><span class=\"line\">        return new DataSourceTransactionManager(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"service中的配置和1一样\"><a href=\"#service中的配置和1一样\" class=\"headerlink\" title=\"service中的配置和1一样\"></a>service中的配置和1一样</h5>"},{"title":" mybatic初学环境搭建","date":"2019-11-19T08:22:46.000Z","_content":"\n搭建mybatis环境\n\n<!--more-->\n\n### 1 maven导入相关依赖\n\n```\n<dependencies>\n<!--mybatic-->\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.4.5</version>\n        </dependency>\n        <!--mysql连接-->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.6</version>\n        </dependency>\n        <!--日志-->\n        <dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n            <version>1.2.12</version>\n        </dependency>\n               <!--junit测试-->\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.10</version>\n        </dependency>\n    </dependencies>\n```\n### 2 配置mybaits的配置文件SqlMapConfig.xml\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<!-- mybatis的主配置文件 -->\n<configuration>\n    <!-- 配置环境 -->\n    <environments default=\"mysql\">\n        <!-- 配置mysql的环境-->\n        <environment id=\"mysql\">\n            <!-- 配置事务的类型-->\n            <transactionManager type=\"JDBC\"></transactionManager>\n            <!-- 配置数据源（连接池） -->\n            <dataSource type=\"POOLED\">\n                <!-- 配置连接数据库的4个基本信息 -->\n                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/test\"/>\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"1234\"/>\n            </dataSource>\n        </environment>\n    </environments>\n\n    <!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 -->\n    <mappers>\n        <mapper resource=\"com/itheima/dao/IUserDao.xml\"/>\n    </mappers>\n</configuration>\n```\n### 3 创建数据库表对应的实体\n### 4 创建SqlMapConfig.xml对应的映射文件\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <!DOCTYPE mapper\n                PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n                \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n                <!--****是对应的dao层接口-->\n<mapper namespace=\"****\">\n<!--这里写自己的动态sql-->\n.......\n</mapper>\n```\n##### 5 写好自己的dao层接口，以及运行，读取SqlMapConfig.xml","source":"_posts/mybatic初学环境搭建.md","raw":"---\ntitle: ' mybatic初学环境搭建'\ndate: 2019-11-19 16:22:46 \ncategories: mybatis\ntags: mybatis\n---\n\n搭建mybatis环境\n\n<!--more-->\n\n### 1 maven导入相关依赖\n\n```\n<dependencies>\n<!--mybatic-->\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.4.5</version>\n        </dependency>\n        <!--mysql连接-->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.6</version>\n        </dependency>\n        <!--日志-->\n        <dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n            <version>1.2.12</version>\n        </dependency>\n               <!--junit测试-->\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.10</version>\n        </dependency>\n    </dependencies>\n```\n### 2 配置mybaits的配置文件SqlMapConfig.xml\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<!-- mybatis的主配置文件 -->\n<configuration>\n    <!-- 配置环境 -->\n    <environments default=\"mysql\">\n        <!-- 配置mysql的环境-->\n        <environment id=\"mysql\">\n            <!-- 配置事务的类型-->\n            <transactionManager type=\"JDBC\"></transactionManager>\n            <!-- 配置数据源（连接池） -->\n            <dataSource type=\"POOLED\">\n                <!-- 配置连接数据库的4个基本信息 -->\n                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/test\"/>\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"1234\"/>\n            </dataSource>\n        </environment>\n    </environments>\n\n    <!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 -->\n    <mappers>\n        <mapper resource=\"com/itheima/dao/IUserDao.xml\"/>\n    </mappers>\n</configuration>\n```\n### 3 创建数据库表对应的实体\n### 4 创建SqlMapConfig.xml对应的映射文件\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <!DOCTYPE mapper\n                PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n                \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n                <!--****是对应的dao层接口-->\n<mapper namespace=\"****\">\n<!--这里写自己的动态sql-->\n.......\n</mapper>\n```\n##### 5 写好自己的dao层接口，以及运行，读取SqlMapConfig.xml","slug":"mybatic初学环境搭建","published":1,"updated":"2020-06-16T03:55:53.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7dequq000dlwqadj7ehe83","content":"<p>搭建mybatis环境</p>\n<a id=\"more\"></a>\n\n<h3 id=\"1-maven导入相关依赖\"><a href=\"#1-maven导入相关依赖\" class=\"headerlink\" title=\"1 maven导入相关依赖\"></a>1 maven导入相关依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">&lt;!--mybatic--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.4.5&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;!--mysql连接--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.1.6&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;!--日志--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.2.12&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">               &lt;!--junit测试--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;4.10&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-配置mybaits的配置文件SqlMapConfig-xml\"><a href=\"#2-配置mybaits的配置文件SqlMapConfig-xml\" class=\"headerlink\" title=\"2 配置mybaits的配置文件SqlMapConfig.xml\"></a>2 配置mybaits的配置文件SqlMapConfig.xml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class=\"line\">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;!-- mybatis的主配置文件 --&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;!-- 配置环境 --&gt;</span><br><span class=\"line\">    &lt;environments default&#x3D;&quot;mysql&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 配置mysql的环境--&gt;</span><br><span class=\"line\">        &lt;environment id&#x3D;&quot;mysql&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 配置事务的类型--&gt;</span><br><span class=\"line\">            &lt;transactionManager type&#x3D;&quot;JDBC&quot;&gt;&lt;&#x2F;transactionManager&gt;</span><br><span class=\"line\">            &lt;!-- 配置数据源（连接池） --&gt;</span><br><span class=\"line\">            &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class=\"line\">                &lt;!-- 配置连接数据库的4个基本信息 --&gt;</span><br><span class=\"line\">                &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class=\"line\">                &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test&quot;&#x2F;&gt;</span><br><span class=\"line\">                &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class=\"line\">                &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;1234&quot;&#x2F;&gt;</span><br><span class=\"line\">            &lt;&#x2F;dataSource&gt;</span><br><span class=\"line\">        &lt;&#x2F;environment&gt;</span><br><span class=\"line\">    &lt;&#x2F;environments&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource&#x3D;&quot;com&#x2F;itheima&#x2F;dao&#x2F;IUserDao.xml&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;mappers&gt;</span><br><span class=\"line\">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-创建数据库表对应的实体\"><a href=\"#3-创建数据库表对应的实体\" class=\"headerlink\" title=\"3 创建数据库表对应的实体\"></a>3 创建数据库表对应的实体</h3><h3 id=\"4-创建SqlMapConfig-xml对应的映射文件\"><a href=\"#4-创建SqlMapConfig-xml对应的映射文件\" class=\"headerlink\" title=\"4 创建SqlMapConfig.xml对应的映射文件\"></a>4 创建SqlMapConfig.xml对应的映射文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">        &lt;!DOCTYPE mapper</span><br><span class=\"line\">                PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class=\"line\">                &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\">                &lt;!--****是对应的dao层接口--&gt;</span><br><span class=\"line\">&lt;mapper namespace&#x3D;&quot;****&quot;&gt;</span><br><span class=\"line\">&lt;!--这里写自己的动态sql--&gt;</span><br><span class=\"line\">.......</span><br><span class=\"line\">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-写好自己的dao层接口，以及运行，读取SqlMapConfig-xml\"><a href=\"#5-写好自己的dao层接口，以及运行，读取SqlMapConfig-xml\" class=\"headerlink\" title=\"5 写好自己的dao层接口，以及运行，读取SqlMapConfig.xml\"></a>5 写好自己的dao层接口，以及运行，读取SqlMapConfig.xml</h5>","site":{"data":{}},"length":2706,"excerpt":"<p>搭建mybatis环境</p>","more":"<h3 id=\"1-maven导入相关依赖\"><a href=\"#1-maven导入相关依赖\" class=\"headerlink\" title=\"1 maven导入相关依赖\"></a>1 maven导入相关依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">&lt;!--mybatic--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.4.5&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;!--mysql连接--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.1.6&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;!--日志--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.2.12&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">               &lt;!--junit测试--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;4.10&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-配置mybaits的配置文件SqlMapConfig-xml\"><a href=\"#2-配置mybaits的配置文件SqlMapConfig-xml\" class=\"headerlink\" title=\"2 配置mybaits的配置文件SqlMapConfig.xml\"></a>2 配置mybaits的配置文件SqlMapConfig.xml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class=\"line\">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;!-- mybatis的主配置文件 --&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;!-- 配置环境 --&gt;</span><br><span class=\"line\">    &lt;environments default&#x3D;&quot;mysql&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 配置mysql的环境--&gt;</span><br><span class=\"line\">        &lt;environment id&#x3D;&quot;mysql&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 配置事务的类型--&gt;</span><br><span class=\"line\">            &lt;transactionManager type&#x3D;&quot;JDBC&quot;&gt;&lt;&#x2F;transactionManager&gt;</span><br><span class=\"line\">            &lt;!-- 配置数据源（连接池） --&gt;</span><br><span class=\"line\">            &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class=\"line\">                &lt;!-- 配置连接数据库的4个基本信息 --&gt;</span><br><span class=\"line\">                &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class=\"line\">                &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test&quot;&#x2F;&gt;</span><br><span class=\"line\">                &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class=\"line\">                &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;1234&quot;&#x2F;&gt;</span><br><span class=\"line\">            &lt;&#x2F;dataSource&gt;</span><br><span class=\"line\">        &lt;&#x2F;environment&gt;</span><br><span class=\"line\">    &lt;&#x2F;environments&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource&#x3D;&quot;com&#x2F;itheima&#x2F;dao&#x2F;IUserDao.xml&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;mappers&gt;</span><br><span class=\"line\">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-创建数据库表对应的实体\"><a href=\"#3-创建数据库表对应的实体\" class=\"headerlink\" title=\"3 创建数据库表对应的实体\"></a>3 创建数据库表对应的实体</h3><h3 id=\"4-创建SqlMapConfig-xml对应的映射文件\"><a href=\"#4-创建SqlMapConfig-xml对应的映射文件\" class=\"headerlink\" title=\"4 创建SqlMapConfig.xml对应的映射文件\"></a>4 创建SqlMapConfig.xml对应的映射文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">        &lt;!DOCTYPE mapper</span><br><span class=\"line\">                PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class=\"line\">                &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\">                &lt;!--****是对应的dao层接口--&gt;</span><br><span class=\"line\">&lt;mapper namespace&#x3D;&quot;****&quot;&gt;</span><br><span class=\"line\">&lt;!--这里写自己的动态sql--&gt;</span><br><span class=\"line\">.......</span><br><span class=\"line\">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-写好自己的dao层接口，以及运行，读取SqlMapConfig-xml\"><a href=\"#5-写好自己的dao层接口，以及运行，读取SqlMapConfig-xml\" class=\"headerlink\" title=\"5 写好自己的dao层接口，以及运行，读取SqlMapConfig.xml\"></a>5 写好自己的dao层接口，以及运行，读取SqlMapConfig.xml</h5>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-06-16T03:55:53.525Z","updated":"2020-06-16T03:55:53.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7dequr000elwqa5ug51j6t","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"length":357,"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"mybatis 延迟加载和立即加载的实现","date":"2020-01-08T14:06:49.000Z","_content":"\nmybatis 延迟加载和立即加载的实现\n\n<!--more-->\n\n 延迟加载：   就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载.\n 好处：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速 度要快。  \n 坏处：   因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗 时间，所以可能造成用户等待时间变长，造成用户体验下降\n 在我们使用多表查询时（一对一，一对多或者多对多），mybatis默认使用立即加载。如果我们想使用延迟加载需要做两件事\n\n ### 1设置多表查询返回的resultMap\n\n\n```\n    <resultMap id=\"entity1tEntity2\" type=\"entity1\">\n        <id property=\"entity1_id\" column=\"entity1_id\"></id>\n        <result property=\"entity2_id\" column=\"entity2_id\"></result><!--关联字段-->\n        <result property=\"file\" column=\"file\"></result>\n            <!--在这里完成这个配置后只要select * from table_entity1就可以了-->\n        <!-- 一对一的关系映射：配置封装entity2的内容\n        select属性指定的内容：查询entity2的唯一标识：\n        column属性指定的内容：entity2根据id查询时，所需要的参数的值\n        -->\n        <association property=\"entity2\" column=\"entity2_id\" javaType=\"entity2\" select=\"namespce+查询语句的id\"></association>\n            <!--在这里完成这个配置后只要select * from table_entity1 where entity2_id=?就可以了-->\n    </resultMap>\n\n```\n配置映射文件config.xml\n\n```\n<configuration>\n    <settings>\n        <!--开启Mybatis支持延迟加载-->\n        <setting name=\"lazyLoadingEnabled\" value=\"true\"/>\n    </settings>\n</configuration>\n```\n官方文档：[https://mybatis.org/mybatis-3/zh/configuration.html#settings](https://mybatis.org/mybatis-3/zh/configuration.html#settings).\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108220513576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)","source":"_posts/mybatis-延迟加载和立即加载的实现.md","raw":"---\ntitle: mybatis 延迟加载和立即加载的实现\ndate: 2020-01-08 22:06:49 \ncategories: mybatis\ntags: mybatis\n---\n\nmybatis 延迟加载和立即加载的实现\n\n<!--more-->\n\n 延迟加载：   就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载.\n 好处：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速 度要快。  \n 坏处：   因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗 时间，所以可能造成用户等待时间变长，造成用户体验下降\n 在我们使用多表查询时（一对一，一对多或者多对多），mybatis默认使用立即加载。如果我们想使用延迟加载需要做两件事\n\n ### 1设置多表查询返回的resultMap\n\n\n```\n    <resultMap id=\"entity1tEntity2\" type=\"entity1\">\n        <id property=\"entity1_id\" column=\"entity1_id\"></id>\n        <result property=\"entity2_id\" column=\"entity2_id\"></result><!--关联字段-->\n        <result property=\"file\" column=\"file\"></result>\n            <!--在这里完成这个配置后只要select * from table_entity1就可以了-->\n        <!-- 一对一的关系映射：配置封装entity2的内容\n        select属性指定的内容：查询entity2的唯一标识：\n        column属性指定的内容：entity2根据id查询时，所需要的参数的值\n        -->\n        <association property=\"entity2\" column=\"entity2_id\" javaType=\"entity2\" select=\"namespce+查询语句的id\"></association>\n            <!--在这里完成这个配置后只要select * from table_entity1 where entity2_id=?就可以了-->\n    </resultMap>\n\n```\n配置映射文件config.xml\n\n```\n<configuration>\n    <settings>\n        <!--开启Mybatis支持延迟加载-->\n        <setting name=\"lazyLoadingEnabled\" value=\"true\"/>\n    </settings>\n</configuration>\n```\n官方文档：[https://mybatis.org/mybatis-3/zh/configuration.html#settings](https://mybatis.org/mybatis-3/zh/configuration.html#settings).\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108220513576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)","slug":"mybatis-延迟加载和立即加载的实现","published":1,"updated":"2020-06-16T03:55:53.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7dequt000ilwqagjjo8uz5","content":"<p>mybatis 延迟加载和立即加载的实现</p>\n<a id=\"more\"></a>\n\n<p> 延迟加载：   就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载.<br> 好处：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速 度要快。<br> 坏处：   因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗 时间，所以可能造成用户等待时间变长，造成用户体验下降<br> 在我们使用多表查询时（一对一，一对多或者多对多），mybatis默认使用立即加载。如果我们想使用延迟加载需要做两件事</p>\n<h3 id=\"1设置多表查询返回的resultMap\"><a href=\"#1设置多表查询返回的resultMap\" class=\"headerlink\" title=\"1设置多表查询返回的resultMap\"></a>1设置多表查询返回的resultMap</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap id&#x3D;&quot;entity1tEntity2&quot; type&#x3D;&quot;entity1&quot;&gt;</span><br><span class=\"line\">    &lt;id property&#x3D;&quot;entity1_id&quot; column&#x3D;&quot;entity1_id&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;entity2_id&quot; column&#x3D;&quot;entity2_id&quot;&gt;&lt;&#x2F;result&gt;&lt;!--关联字段--&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;file&quot; column&#x3D;&quot;file&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">        &lt;!--在这里完成这个配置后只要select * from table_entity1就可以了--&gt;</span><br><span class=\"line\">    &lt;!-- 一对一的关系映射：配置封装entity2的内容</span><br><span class=\"line\">    select属性指定的内容：查询entity2的唯一标识：</span><br><span class=\"line\">    column属性指定的内容：entity2根据id查询时，所需要的参数的值</span><br><span class=\"line\">    --&gt;</span><br><span class=\"line\">    &lt;association property&#x3D;&quot;entity2&quot; column&#x3D;&quot;entity2_id&quot; javaType&#x3D;&quot;entity2&quot; select&#x3D;&quot;namespce+查询语句的id&quot;&gt;&lt;&#x2F;association&gt;</span><br><span class=\"line\">        &lt;!--在这里完成这个配置后只要select * from table_entity1 where entity2_id&#x3D;?就可以了--&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<p>配置映射文件config.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;settings&gt;</span><br><span class=\"line\">        &lt;!--开启Mybatis支持延迟加载--&gt;</span><br><span class=\"line\">        &lt;setting name&#x3D;&quot;lazyLoadingEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;settings&gt;</span><br><span class=\"line\">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>\n<p>官方文档：<a href=\"https://mybatis.org/mybatis-3/zh/configuration.html#settings\" target=\"_blank\" rel=\"noopener\">https://mybatis.org/mybatis-3/zh/configuration.html#settings</a>.<br><img src=\"https://img-blog.csdnimg.cn/20200108220513576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"length":1402,"excerpt":"<p>mybatis 延迟加载和立即加载的实现</p>","more":"<p> 延迟加载：   就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载.<br> 好处：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速 度要快。<br> 坏处：   因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗 时间，所以可能造成用户等待时间变长，造成用户体验下降<br> 在我们使用多表查询时（一对一，一对多或者多对多），mybatis默认使用立即加载。如果我们想使用延迟加载需要做两件事</p>\n<h3 id=\"1设置多表查询返回的resultMap\"><a href=\"#1设置多表查询返回的resultMap\" class=\"headerlink\" title=\"1设置多表查询返回的resultMap\"></a>1设置多表查询返回的resultMap</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap id&#x3D;&quot;entity1tEntity2&quot; type&#x3D;&quot;entity1&quot;&gt;</span><br><span class=\"line\">    &lt;id property&#x3D;&quot;entity1_id&quot; column&#x3D;&quot;entity1_id&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;entity2_id&quot; column&#x3D;&quot;entity2_id&quot;&gt;&lt;&#x2F;result&gt;&lt;!--关联字段--&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;file&quot; column&#x3D;&quot;file&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">        &lt;!--在这里完成这个配置后只要select * from table_entity1就可以了--&gt;</span><br><span class=\"line\">    &lt;!-- 一对一的关系映射：配置封装entity2的内容</span><br><span class=\"line\">    select属性指定的内容：查询entity2的唯一标识：</span><br><span class=\"line\">    column属性指定的内容：entity2根据id查询时，所需要的参数的值</span><br><span class=\"line\">    --&gt;</span><br><span class=\"line\">    &lt;association property&#x3D;&quot;entity2&quot; column&#x3D;&quot;entity2_id&quot; javaType&#x3D;&quot;entity2&quot; select&#x3D;&quot;namespce+查询语句的id&quot;&gt;&lt;&#x2F;association&gt;</span><br><span class=\"line\">        &lt;!--在这里完成这个配置后只要select * from table_entity1 where entity2_id&#x3D;?就可以了--&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<p>配置映射文件config.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;settings&gt;</span><br><span class=\"line\">        &lt;!--开启Mybatis支持延迟加载--&gt;</span><br><span class=\"line\">        &lt;setting name&#x3D;&quot;lazyLoadingEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;settings&gt;</span><br><span class=\"line\">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>\n<p>官方文档：<a href=\"https://mybatis.org/mybatis-3/zh/configuration.html#settings\" target=\"_blank\" rel=\"noopener\">https://mybatis.org/mybatis-3/zh/configuration.html#settings</a>.<br><img src=\"https://img-blog.csdnimg.cn/20200108220513576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>"},{"title":"Mybatis 缓存 的知识点","date":"2020-02-22T03:26:59.000Z","_content":"\n像大多数的持久化框架一样，Mybatis 也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提 高性能。 \n\n<!--more-->\n\n##### Mybatis 中缓存分为一级缓存，二级缓存。\n![一级和二级缓存](https://img-blog.csdnimg.cn/20200222111725745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n##### 一级缓存\n一级缓存是 SqlSession 级别的缓存，只要 SqlSession 没有 flush 或 close，它就存在。 \n一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等\n###### 二级缓存\n二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个 SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的\n######  二级缓存的开启与关闭 \n2.2.2.1 第一步：在 SqlMapConfig.xml 文件开启二级缓存 \n\n```\n<settings> \n <!-- 开启二级缓存的支持 --> \n  <setting name=\"cacheEnabled\" value=\"true\"/>\n</settings> \n```\n\n因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略不配置。为 true 代表开启二级缓存；为 false 代表不开启二级缓存。 \n######  第二步：配置相关的 Mapper 映射文件 \n<cache>标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值。\n\n```\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t <!DOCTYPE mapper     PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"     \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"> \n\t<mapper namespace=\"com.itheima.dao.IUserDao\">\n  <!-- 开启二级缓存的支持 -->  \n  <cache></cache> \n  </mapper> \n```\n\n###### 第三步：配置 statement 上面的 useCache 属性 \n\n```\n<!-- 根据 id 查询 --> \n<select id=\"findById\" resultType=\"user\" parameterType=\"int\" useCache=\"true\">\n  select * from user where id = #{uid} \n  </select> \n```\n\n将 UserDao.xml 映射文件中的<select>标签中设置 useCache=”true”代表当前这个 statement 要使用 二级缓存，如果不使用二级缓存可以设置为 false。 注意：针对每次查询都需要最新的数据 sql，要设置成 useCache=false，禁用二级缓存","source":"_posts/Mybatis-缓存-的知识点.md","raw":"---\ntitle: Mybatis 缓存 的知识点\ndate: 2020-02-22 11:26:59 \ncategories: mybatis\ntags: mybatis\n---\n\n像大多数的持久化框架一样，Mybatis 也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提 高性能。 \n\n<!--more-->\n\n##### Mybatis 中缓存分为一级缓存，二级缓存。\n![一级和二级缓存](https://img-blog.csdnimg.cn/20200222111725745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n##### 一级缓存\n一级缓存是 SqlSession 级别的缓存，只要 SqlSession 没有 flush 或 close，它就存在。 \n一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等\n###### 二级缓存\n二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个 SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的\n######  二级缓存的开启与关闭 \n2.2.2.1 第一步：在 SqlMapConfig.xml 文件开启二级缓存 \n\n```\n<settings> \n <!-- 开启二级缓存的支持 --> \n  <setting name=\"cacheEnabled\" value=\"true\"/>\n</settings> \n```\n\n因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略不配置。为 true 代表开启二级缓存；为 false 代表不开启二级缓存。 \n######  第二步：配置相关的 Mapper 映射文件 \n<cache>标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值。\n\n```\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t <!DOCTYPE mapper     PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"     \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"> \n\t<mapper namespace=\"com.itheima.dao.IUserDao\">\n  <!-- 开启二级缓存的支持 -->  \n  <cache></cache> \n  </mapper> \n```\n\n###### 第三步：配置 statement 上面的 useCache 属性 \n\n```\n<!-- 根据 id 查询 --> \n<select id=\"findById\" resultType=\"user\" parameterType=\"int\" useCache=\"true\">\n  select * from user where id = #{uid} \n  </select> \n```\n\n将 UserDao.xml 映射文件中的<select>标签中设置 useCache=”true”代表当前这个 statement 要使用 二级缓存，如果不使用二级缓存可以设置为 false。 注意：针对每次查询都需要最新的数据 sql，要设置成 useCache=false，禁用二级缓存","slug":"Mybatis-缓存-的知识点","published":1,"updated":"2020-06-16T03:55:53.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7dequu000klwqa3qxpa2t3","content":"<p>像大多数的持久化框架一样，Mybatis 也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提 高性能。 </p>\n<a id=\"more\"></a>\n\n<h5 id=\"Mybatis-中缓存分为一级缓存，二级缓存。\"><a href=\"#Mybatis-中缓存分为一级缓存，二级缓存。\" class=\"headerlink\" title=\"Mybatis 中缓存分为一级缓存，二级缓存。\"></a>Mybatis 中缓存分为一级缓存，二级缓存。</h5><p><img src=\"https://img-blog.csdnimg.cn/20200222111725745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"一级和二级缓存\"></p>\n<h5 id=\"一级缓存\"><a href=\"#一级缓存\" class=\"headerlink\" title=\"一级缓存\"></a>一级缓存</h5><p>一级缓存是 SqlSession 级别的缓存，只要 SqlSession 没有 flush 或 close，它就存在。<br>一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等</p>\n<h6 id=\"二级缓存\"><a href=\"#二级缓存\" class=\"headerlink\" title=\"二级缓存\"></a>二级缓存</h6><p>二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个 SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的</p>\n<h6 id=\"二级缓存的开启与关闭\"><a href=\"#二级缓存的开启与关闭\" class=\"headerlink\" title=\"二级缓存的开启与关闭\"></a>二级缓存的开启与关闭</h6><p>2.2.2.1 第一步：在 SqlMapConfig.xml 文件开启二级缓存 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings&gt; </span><br><span class=\"line\"> &lt;!-- 开启二级缓存的支持 --&gt; </span><br><span class=\"line\">  &lt;setting name&#x3D;&quot;cacheEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure>\n\n<p>因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略不配置。为 true 代表开启二级缓存；为 false 代表不开启二级缓存。 </p>\n<h6 id=\"第二步：配置相关的-Mapper-映射文件\"><a href=\"#第二步：配置相关的-Mapper-映射文件\" class=\"headerlink\" title=\"第二步：配置相关的 Mapper 映射文件\"></a>第二步：配置相关的 Mapper 映射文件</h6><p><cache>标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\"> &lt;!DOCTYPE mapper     PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;     &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt; </span><br><span class=\"line\">&lt;mapper namespace&#x3D;&quot;com.itheima.dao.IUserDao&quot;&gt;</span><br><span class=\"line\"> &lt;!-- 开启二级缓存的支持 --&gt;  </span><br><span class=\"line\"> &lt;cache&gt;&lt;&#x2F;cache&gt; </span><br><span class=\"line\"> &lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"第三步：配置-statement-上面的-useCache-属性\"><a href=\"#第三步：配置-statement-上面的-useCache-属性\" class=\"headerlink\" title=\"第三步：配置 statement 上面的 useCache 属性\"></a>第三步：配置 statement 上面的 useCache 属性</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 根据 id 查询 --&gt; </span><br><span class=\"line\">&lt;select id&#x3D;&quot;findById&quot; resultType&#x3D;&quot;user&quot; parameterType&#x3D;&quot;int&quot; useCache&#x3D;&quot;true&quot;&gt;</span><br><span class=\"line\">  select * from user where id &#x3D; #&#123;uid&#125; </span><br><span class=\"line\">  &lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将 UserDao.xml 映射文件中的<select>标签中设置 useCache=”true”代表当前这个 statement 要使用 二级缓存，如果不使用二级缓存可以设置为 false。 注意：针对每次查询都需要最新的数据 sql，要设置成 useCache=false，禁用二级缓存</p>\n","site":{"data":{}},"length":1390,"excerpt":"<p>像大多数的持久化框架一样，Mybatis 也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提 高性能。 </p>","more":"<h5 id=\"Mybatis-中缓存分为一级缓存，二级缓存。\"><a href=\"#Mybatis-中缓存分为一级缓存，二级缓存。\" class=\"headerlink\" title=\"Mybatis 中缓存分为一级缓存，二级缓存。\"></a>Mybatis 中缓存分为一级缓存，二级缓存。</h5><p><img src=\"https://img-blog.csdnimg.cn/20200222111725745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"一级和二级缓存\"></p>\n<h5 id=\"一级缓存\"><a href=\"#一级缓存\" class=\"headerlink\" title=\"一级缓存\"></a>一级缓存</h5><p>一级缓存是 SqlSession 级别的缓存，只要 SqlSession 没有 flush 或 close，它就存在。<br>一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等</p>\n<h6 id=\"二级缓存\"><a href=\"#二级缓存\" class=\"headerlink\" title=\"二级缓存\"></a>二级缓存</h6><p>二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个 SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的</p>\n<h6 id=\"二级缓存的开启与关闭\"><a href=\"#二级缓存的开启与关闭\" class=\"headerlink\" title=\"二级缓存的开启与关闭\"></a>二级缓存的开启与关闭</h6><p>2.2.2.1 第一步：在 SqlMapConfig.xml 文件开启二级缓存 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings&gt; </span><br><span class=\"line\"> &lt;!-- 开启二级缓存的支持 --&gt; </span><br><span class=\"line\">  &lt;setting name&#x3D;&quot;cacheEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure>\n\n<p>因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略不配置。为 true 代表开启二级缓存；为 false 代表不开启二级缓存。 </p>\n<h6 id=\"第二步：配置相关的-Mapper-映射文件\"><a href=\"#第二步：配置相关的-Mapper-映射文件\" class=\"headerlink\" title=\"第二步：配置相关的 Mapper 映射文件\"></a>第二步：配置相关的 Mapper 映射文件</h6><p><cache>标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\"> &lt;!DOCTYPE mapper     PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;     &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt; </span><br><span class=\"line\">&lt;mapper namespace&#x3D;&quot;com.itheima.dao.IUserDao&quot;&gt;</span><br><span class=\"line\"> &lt;!-- 开启二级缓存的支持 --&gt;  </span><br><span class=\"line\"> &lt;cache&gt;&lt;&#x2F;cache&gt; </span><br><span class=\"line\"> &lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"第三步：配置-statement-上面的-useCache-属性\"><a href=\"#第三步：配置-statement-上面的-useCache-属性\" class=\"headerlink\" title=\"第三步：配置 statement 上面的 useCache 属性\"></a>第三步：配置 statement 上面的 useCache 属性</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 根据 id 查询 --&gt; </span><br><span class=\"line\">&lt;select id&#x3D;&quot;findById&quot; resultType&#x3D;&quot;user&quot; parameterType&#x3D;&quot;int&quot; useCache&#x3D;&quot;true&quot;&gt;</span><br><span class=\"line\">  select * from user where id &#x3D; #&#123;uid&#125; </span><br><span class=\"line\">  &lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将 UserDao.xml 映射文件中的<select>标签中设置 useCache=”true”代表当前这个 statement 要使用 二级缓存，如果不使用二级缓存可以设置为 false。 注意：针对每次查询都需要最新的数据 sql，要设置成 useCache=false，禁用二级缓存</p>"},{"title":"mybatis表间关系，多表联查如何定义实体和返回类型","date":"2019-12-17T15:40:21.000Z","_content":"\n mybatis表间关系，多表联查如何定义实体和返回类型\n\n<!--more-->\n\n### 1，一对一关系在实体加入关联实体属性(Entity1 和Entity2一对一,通过field关联)\n\n```\npublic class Entity1 implements Serializable {\nprivate Integer id;\nprivate String field;\nprivate String field1;\nprivate Entity2 entity2;\n(getter,setter,toString方法)\n...\n}\npublic class Entity2 implements Serializable {\nprivate Integer id;\nprivate String field;\nprivate String field2;\nprivate Entity2 entity1;\n(getter,setter,toString方法)\n...\n}\n```\n Entity1对应的mapper中加入相应的resultMap\n\n```\n    <resultMap id=\"entity1Entity2Map\" type=\"Entity1 \">\n        <id property=\"id\" column=\"aid\"></id>\n        <result property=\"field\" column=\"field\"></result>\n        <result property=\"field1\" column=\"field1\"></result>\n        <!-- 一对一的关系映射：配置封装Entity2的内容-->\n        <association property=\"field\" column=\"field\" javaType=\"Entity2\">\n            <id property=\"id\" column=\"id\"></id>\n            <result column=\"field\" property=\"field\"></result>\n            <result column=\"field2\" property=\"field2\"></result>\n        </association>\n    </resultMap>\n```\n2，一对多关系在实体加入关联实体属性(Entity3 和Entity4一对多,通过field关联)\n```\npublic class Entity3 implements Serializable {\nprivate Integer id;\nprivate String field;\nprivate String field3;\nprivate List<Entity4> entity4;\n(getter,setter,toString方法)\n...\n}\npublic class Entity2 implements Serializable {\nprivate Integer id;\nprivate String field;\nprivate String field4;\nprivate Entity2 entity3;\n(getter,setter,toString方法)\n...\n}\n```\n Entity3对应的mapper中加入相应的resultMap\n\n```\n    <resultMap id=\"entity3Entity4Map\" type=\"Entity3 \">\n        <id property=\"id\" column=\"aid\"></id>\n        <result property=\"field\" column=\"field\"></result>\n        <result property=\"field3\" column=\"field3\"></result>\n        <!-- 配置Entity3对象中Entity4集合的映射 -->\n        <collection property=\"Entity4\" ofType=\"Entity4\">\n            <id column=\"id\" property=\"id\"></id>\n            <result column=\"field\" property=\"field\"></result>\n            <result column=\"field4\" property=\"field4\"></result>\n        </collection>\n    </resultMap>\n```\n### 3，多对多关系\n多对多关系就类似了，实体（Entity5，Entity6关联）中都是加对方的List<T>\nReultMap关对方联集合的映射","source":"_posts/mybatis表间关系，多表联查如何定义实体和返回类型.md","raw":"---\ntitle: mybatis表间关系，多表联查如何定义实体和返回类型\ndate: 2019-12-17 23:40:21\ncategories: mybatis\ntags: mybatis\n---\n\n mybatis表间关系，多表联查如何定义实体和返回类型\n\n<!--more-->\n\n### 1，一对一关系在实体加入关联实体属性(Entity1 和Entity2一对一,通过field关联)\n\n```\npublic class Entity1 implements Serializable {\nprivate Integer id;\nprivate String field;\nprivate String field1;\nprivate Entity2 entity2;\n(getter,setter,toString方法)\n...\n}\npublic class Entity2 implements Serializable {\nprivate Integer id;\nprivate String field;\nprivate String field2;\nprivate Entity2 entity1;\n(getter,setter,toString方法)\n...\n}\n```\n Entity1对应的mapper中加入相应的resultMap\n\n```\n    <resultMap id=\"entity1Entity2Map\" type=\"Entity1 \">\n        <id property=\"id\" column=\"aid\"></id>\n        <result property=\"field\" column=\"field\"></result>\n        <result property=\"field1\" column=\"field1\"></result>\n        <!-- 一对一的关系映射：配置封装Entity2的内容-->\n        <association property=\"field\" column=\"field\" javaType=\"Entity2\">\n            <id property=\"id\" column=\"id\"></id>\n            <result column=\"field\" property=\"field\"></result>\n            <result column=\"field2\" property=\"field2\"></result>\n        </association>\n    </resultMap>\n```\n2，一对多关系在实体加入关联实体属性(Entity3 和Entity4一对多,通过field关联)\n```\npublic class Entity3 implements Serializable {\nprivate Integer id;\nprivate String field;\nprivate String field3;\nprivate List<Entity4> entity4;\n(getter,setter,toString方法)\n...\n}\npublic class Entity2 implements Serializable {\nprivate Integer id;\nprivate String field;\nprivate String field4;\nprivate Entity2 entity3;\n(getter,setter,toString方法)\n...\n}\n```\n Entity3对应的mapper中加入相应的resultMap\n\n```\n    <resultMap id=\"entity3Entity4Map\" type=\"Entity3 \">\n        <id property=\"id\" column=\"aid\"></id>\n        <result property=\"field\" column=\"field\"></result>\n        <result property=\"field3\" column=\"field3\"></result>\n        <!-- 配置Entity3对象中Entity4集合的映射 -->\n        <collection property=\"Entity4\" ofType=\"Entity4\">\n            <id column=\"id\" property=\"id\"></id>\n            <result column=\"field\" property=\"field\"></result>\n            <result column=\"field4\" property=\"field4\"></result>\n        </collection>\n    </resultMap>\n```\n### 3，多对多关系\n多对多关系就类似了，实体（Entity5，Entity6关联）中都是加对方的List<T>\nReultMap关对方联集合的映射","slug":"mybatis表间关系，多表联查如何定义实体和返回类型","published":1,"updated":"2020-06-16T03:55:53.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7dequw000olwqa5pyv5mh5","content":"<p> mybatis表间关系，多表联查如何定义实体和返回类型</p>\n<a id=\"more\"></a>\n\n<h3 id=\"1，一对一关系在实体加入关联实体属性-Entity1-和Entity2一对一-通过field关联\"><a href=\"#1，一对一关系在实体加入关联实体属性-Entity1-和Entity2一对一-通过field关联\" class=\"headerlink\" title=\"1，一对一关系在实体加入关联实体属性(Entity1 和Entity2一对一,通过field关联)\"></a>1，一对一关系在实体加入关联实体属性(Entity1 和Entity2一对一,通过field关联)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Entity1 implements Serializable &#123;</span><br><span class=\"line\">private Integer id;</span><br><span class=\"line\">private String field;</span><br><span class=\"line\">private String field1;</span><br><span class=\"line\">private Entity2 entity2;</span><br><span class=\"line\">(getter,setter,toString方法)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Entity2 implements Serializable &#123;</span><br><span class=\"line\">private Integer id;</span><br><span class=\"line\">private String field;</span><br><span class=\"line\">private String field2;</span><br><span class=\"line\">private Entity2 entity1;</span><br><span class=\"line\">(getter,setter,toString方法)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> Entity1对应的mapper中加入相应的resultMap</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap id&#x3D;&quot;entity1Entity2Map&quot; type&#x3D;&quot;Entity1 &quot;&gt;</span><br><span class=\"line\">    &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;aid&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;field&quot; column&#x3D;&quot;field&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;field1&quot; column&#x3D;&quot;field1&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;!-- 一对一的关系映射：配置封装Entity2的内容--&gt;</span><br><span class=\"line\">    &lt;association property&#x3D;&quot;field&quot; column&#x3D;&quot;field&quot; javaType&#x3D;&quot;Entity2&quot;&gt;</span><br><span class=\"line\">        &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">        &lt;result column&#x3D;&quot;field&quot; property&#x3D;&quot;field&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">        &lt;result column&#x3D;&quot;field2&quot; property&#x3D;&quot;field2&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;&#x2F;association&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<p>2，一对多关系在实体加入关联实体属性(Entity3 和Entity4一对多,通过field关联)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Entity3 implements Serializable &#123;</span><br><span class=\"line\">private Integer id;</span><br><span class=\"line\">private String field;</span><br><span class=\"line\">private String field3;</span><br><span class=\"line\">private List&lt;Entity4&gt; entity4;</span><br><span class=\"line\">(getter,setter,toString方法)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Entity2 implements Serializable &#123;</span><br><span class=\"line\">private Integer id;</span><br><span class=\"line\">private String field;</span><br><span class=\"line\">private String field4;</span><br><span class=\"line\">private Entity2 entity3;</span><br><span class=\"line\">(getter,setter,toString方法)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> Entity3对应的mapper中加入相应的resultMap</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap id&#x3D;&quot;entity3Entity4Map&quot; type&#x3D;&quot;Entity3 &quot;&gt;</span><br><span class=\"line\">    &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;aid&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;field&quot; column&#x3D;&quot;field&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;field3&quot; column&#x3D;&quot;field3&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;!-- 配置Entity3对象中Entity4集合的映射 --&gt;</span><br><span class=\"line\">    &lt;collection property&#x3D;&quot;Entity4&quot; ofType&#x3D;&quot;Entity4&quot;&gt;</span><br><span class=\"line\">        &lt;id column&#x3D;&quot;id&quot; property&#x3D;&quot;id&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">        &lt;result column&#x3D;&quot;field&quot; property&#x3D;&quot;field&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">        &lt;result column&#x3D;&quot;field4&quot; property&#x3D;&quot;field4&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;&#x2F;collection&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3，多对多关系\"><a href=\"#3，多对多关系\" class=\"headerlink\" title=\"3，多对多关系\"></a>3，多对多关系</h3><p>多对多关系就类似了，实体（Entity5，Entity6关联）中都是加对方的List<T><br>ReultMap关对方联集合的映射</p>\n","site":{"data":{}},"length":2581,"excerpt":"<p> mybatis表间关系，多表联查如何定义实体和返回类型</p>","more":"<h3 id=\"1，一对一关系在实体加入关联实体属性-Entity1-和Entity2一对一-通过field关联\"><a href=\"#1，一对一关系在实体加入关联实体属性-Entity1-和Entity2一对一-通过field关联\" class=\"headerlink\" title=\"1，一对一关系在实体加入关联实体属性(Entity1 和Entity2一对一,通过field关联)\"></a>1，一对一关系在实体加入关联实体属性(Entity1 和Entity2一对一,通过field关联)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Entity1 implements Serializable &#123;</span><br><span class=\"line\">private Integer id;</span><br><span class=\"line\">private String field;</span><br><span class=\"line\">private String field1;</span><br><span class=\"line\">private Entity2 entity2;</span><br><span class=\"line\">(getter,setter,toString方法)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Entity2 implements Serializable &#123;</span><br><span class=\"line\">private Integer id;</span><br><span class=\"line\">private String field;</span><br><span class=\"line\">private String field2;</span><br><span class=\"line\">private Entity2 entity1;</span><br><span class=\"line\">(getter,setter,toString方法)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> Entity1对应的mapper中加入相应的resultMap</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap id&#x3D;&quot;entity1Entity2Map&quot; type&#x3D;&quot;Entity1 &quot;&gt;</span><br><span class=\"line\">    &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;aid&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;field&quot; column&#x3D;&quot;field&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;field1&quot; column&#x3D;&quot;field1&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;!-- 一对一的关系映射：配置封装Entity2的内容--&gt;</span><br><span class=\"line\">    &lt;association property&#x3D;&quot;field&quot; column&#x3D;&quot;field&quot; javaType&#x3D;&quot;Entity2&quot;&gt;</span><br><span class=\"line\">        &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">        &lt;result column&#x3D;&quot;field&quot; property&#x3D;&quot;field&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">        &lt;result column&#x3D;&quot;field2&quot; property&#x3D;&quot;field2&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;&#x2F;association&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<p>2，一对多关系在实体加入关联实体属性(Entity3 和Entity4一对多,通过field关联)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Entity3 implements Serializable &#123;</span><br><span class=\"line\">private Integer id;</span><br><span class=\"line\">private String field;</span><br><span class=\"line\">private String field3;</span><br><span class=\"line\">private List&lt;Entity4&gt; entity4;</span><br><span class=\"line\">(getter,setter,toString方法)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Entity2 implements Serializable &#123;</span><br><span class=\"line\">private Integer id;</span><br><span class=\"line\">private String field;</span><br><span class=\"line\">private String field4;</span><br><span class=\"line\">private Entity2 entity3;</span><br><span class=\"line\">(getter,setter,toString方法)</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> Entity3对应的mapper中加入相应的resultMap</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap id&#x3D;&quot;entity3Entity4Map&quot; type&#x3D;&quot;Entity3 &quot;&gt;</span><br><span class=\"line\">    &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;aid&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;field&quot; column&#x3D;&quot;field&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;field3&quot; column&#x3D;&quot;field3&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;!-- 配置Entity3对象中Entity4集合的映射 --&gt;</span><br><span class=\"line\">    &lt;collection property&#x3D;&quot;Entity4&quot; ofType&#x3D;&quot;Entity4&quot;&gt;</span><br><span class=\"line\">        &lt;id column&#x3D;&quot;id&quot; property&#x3D;&quot;id&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class=\"line\">        &lt;result column&#x3D;&quot;field&quot; property&#x3D;&quot;field&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">        &lt;result column&#x3D;&quot;field4&quot; property&#x3D;&quot;field4&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class=\"line\">    &lt;&#x2F;collection&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3，多对多关系\"><a href=\"#3，多对多关系\" class=\"headerlink\" title=\"3，多对多关系\"></a>3，多对多关系</h3><p>多对多关系就类似了，实体（Entity5，Entity6关联）中都是加对方的List<T><br>ReultMap关对方联集合的映射</p>"},{"title":"mybatis连接池的3种配置方式","date":"2019-12-11T14:40:49.000Z","_content":"\n mybatis连接池的3种配置方式:1,POOLED; 2,UNPOOLED 3,JNDI\n\n<!--more-->\n\n#### 1,POOLED\n采用传统的javax. sql. DataSource规范中的连接池.一旦数据库操作完成，mybaties会将此连接返回给连接池。mybatis有实现规范。\nSqlMapConfig.xml中的配置：\n\n```\n  <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"\"></property>\n                <property name=\"url\" value=\"\"></property>\n                <property name=\"username\" value=\"\"></property>\n                <property name=\"password\" value=\"\"></property>\n            </dataSource>\n```\n\n#### 2,UNPOOLED\n采用传统的获取连接的方式，同样实现Javax. sql. DataSourcel，不过没有使用池的思想。也就是说mybaties会为每一个数据库操作创建一个新的连接，使用完就关闭它。\nSqlMapConfig.xml中的配置：\n\n```\n  <dataSource type=\"UNPOOLED\">\n                <property name=\"driver\" value=\"\"></property>\n                <property name=\"url\" value=\"\"></property>\n                <property name=\"username\" value=\"\"></property>\n                <property name=\"password\" value=\"\"></property>\n            </dataSource>\n```\n\n#### 3,JNDI\n\n  是SUN公司推出的一套规范，属于JavaEE技术之一。目的是模仿windows系统中的注册表。采用服务器提供的JNDI技术实现，来获取DataSource对 象，不同的服务器所能拿到DataSource是不一样。\n  mybaties会从在应用服务器向配置好的JNDI数据源DataSource获取数据库连接。一般在生产环境中使用。\n  SqlMapConfig.xml中的配置：\n\n```\n<environments default= \"mysql\">\n<environment id= \"mysql\">\n<transact ionManager type =”JDBC\">< / transact ionManager>\n<dataSource type= ”JNDI\" >\n< property name= ”data_ source\" value= \"java : comp/ env/ jdbc/数据库名\n</dataSource>\n< /environment>\n< / environments>\n```\n\n```\n \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Context>\n\n<Resource \nname=\"jdbc/test\"                  数据源的名称\ntype=\"javax.sql.DataSource\"                   数据源类型\nauth=\"Container\"                        数据源提供者\nmaxActive=\"20\"                         最大活动数\nmaxWait=\"10000\"                            最大等待时间\nmaxIdle=\"5\"                               最大空闲数\nusername=\"root\"                            用户名\npassword=\"1234\"                            密码\ndriverClassName=\"com.mysql.jdbc.Driver\"          驱动类\nurl=\"jdbc:mysql://localhost:3306/eesy_mybatis\" 连接url字符串\n/>\n\n\n\n```\n在resouce的目录下：\n写一个配置文件：context.xml\n\n```\n<Resource \nname=\"jdbc/test\"\ntype=\"javax.sql.DataSource\"\nauth=\"Container\"\nmaxActive=\nmaxWait=\nmaxIdle=\nusername=\npassword=\ndriverClassName=\"com.mysql.jdbc.Driver\"\nurl=\n/>\n</Context>\n```","source":"_posts/mybatis连接池的3种配置方式.md","raw":"---\ntitle: mybatis连接池的3种配置方式\ndate: 2019-12-11 22:40:49 \ncategories: mybatis\ntags: mybatis\n---\n\n mybatis连接池的3种配置方式:1,POOLED; 2,UNPOOLED 3,JNDI\n\n<!--more-->\n\n#### 1,POOLED\n采用传统的javax. sql. DataSource规范中的连接池.一旦数据库操作完成，mybaties会将此连接返回给连接池。mybatis有实现规范。\nSqlMapConfig.xml中的配置：\n\n```\n  <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"\"></property>\n                <property name=\"url\" value=\"\"></property>\n                <property name=\"username\" value=\"\"></property>\n                <property name=\"password\" value=\"\"></property>\n            </dataSource>\n```\n\n#### 2,UNPOOLED\n采用传统的获取连接的方式，同样实现Javax. sql. DataSourcel，不过没有使用池的思想。也就是说mybaties会为每一个数据库操作创建一个新的连接，使用完就关闭它。\nSqlMapConfig.xml中的配置：\n\n```\n  <dataSource type=\"UNPOOLED\">\n                <property name=\"driver\" value=\"\"></property>\n                <property name=\"url\" value=\"\"></property>\n                <property name=\"username\" value=\"\"></property>\n                <property name=\"password\" value=\"\"></property>\n            </dataSource>\n```\n\n#### 3,JNDI\n\n  是SUN公司推出的一套规范，属于JavaEE技术之一。目的是模仿windows系统中的注册表。采用服务器提供的JNDI技术实现，来获取DataSource对 象，不同的服务器所能拿到DataSource是不一样。\n  mybaties会从在应用服务器向配置好的JNDI数据源DataSource获取数据库连接。一般在生产环境中使用。\n  SqlMapConfig.xml中的配置：\n\n```\n<environments default= \"mysql\">\n<environment id= \"mysql\">\n<transact ionManager type =”JDBC\">< / transact ionManager>\n<dataSource type= ”JNDI\" >\n< property name= ”data_ source\" value= \"java : comp/ env/ jdbc/数据库名\n</dataSource>\n< /environment>\n< / environments>\n```\n\n```\n \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Context>\n\n<Resource \nname=\"jdbc/test\"                  数据源的名称\ntype=\"javax.sql.DataSource\"                   数据源类型\nauth=\"Container\"                        数据源提供者\nmaxActive=\"20\"                         最大活动数\nmaxWait=\"10000\"                            最大等待时间\nmaxIdle=\"5\"                               最大空闲数\nusername=\"root\"                            用户名\npassword=\"1234\"                            密码\ndriverClassName=\"com.mysql.jdbc.Driver\"          驱动类\nurl=\"jdbc:mysql://localhost:3306/eesy_mybatis\" 连接url字符串\n/>\n\n\n\n```\n在resouce的目录下：\n写一个配置文件：context.xml\n\n```\n<Resource \nname=\"jdbc/test\"\ntype=\"javax.sql.DataSource\"\nauth=\"Container\"\nmaxActive=\nmaxWait=\nmaxIdle=\nusername=\npassword=\ndriverClassName=\"com.mysql.jdbc.Driver\"\nurl=\n/>\n</Context>\n```","slug":"mybatis连接池的3种配置方式","published":1,"updated":"2020-06-16T03:55:53.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7dequx000qlwqa3bbze9hv","content":"<p> mybatis连接池的3种配置方式:1,POOLED; 2,UNPOOLED 3,JNDI</p>\n<a id=\"more\"></a>\n\n<h4 id=\"1-POOLED\"><a href=\"#1-POOLED\" class=\"headerlink\" title=\"1,POOLED\"></a>1,POOLED</h4><p>采用传统的javax. sql. DataSource规范中的连接池.一旦数据库操作完成，mybaties会将此连接返回给连接池。mybatis有实现规范。<br>SqlMapConfig.xml中的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">          &lt;&#x2F;dataSource&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-UNPOOLED\"><a href=\"#2-UNPOOLED\" class=\"headerlink\" title=\"2,UNPOOLED\"></a>2,UNPOOLED</h4><p>采用传统的获取连接的方式，同样实现Javax. sql. DataSourcel，不过没有使用池的思想。也就是说mybaties会为每一个数据库操作创建一个新的连接，使用完就关闭它。<br>SqlMapConfig.xml中的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dataSource type&#x3D;&quot;UNPOOLED&quot;&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">          &lt;&#x2F;dataSource&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-JNDI\"><a href=\"#3-JNDI\" class=\"headerlink\" title=\"3,JNDI\"></a>3,JNDI</h4><p>  是SUN公司推出的一套规范，属于JavaEE技术之一。目的是模仿windows系统中的注册表。采用服务器提供的JNDI技术实现，来获取DataSource对 象，不同的服务器所能拿到DataSource是不一样。<br>  mybaties会从在应用服务器向配置好的JNDI数据源DataSource获取数据库连接。一般在生产环境中使用。<br>  SqlMapConfig.xml中的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;environments default&#x3D; &quot;mysql&quot;&gt;</span><br><span class=\"line\">&lt;environment id&#x3D; &quot;mysql&quot;&gt;</span><br><span class=\"line\">&lt;transact ionManager type &#x3D;”JDBC&quot;&gt;&lt; &#x2F; transact ionManager&gt;</span><br><span class=\"line\">&lt;dataSource type&#x3D; ”JNDI&quot; &gt;</span><br><span class=\"line\">&lt; property name&#x3D; ”data_ source&quot; value&#x3D; &quot;java : comp&#x2F; env&#x2F; jdbc&#x2F;数据库名</span><br><span class=\"line\">&lt;&#x2F;dataSource&gt;</span><br><span class=\"line\">&lt; &#x2F;environment&gt;</span><br><span class=\"line\">&lt; &#x2F; environments&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;Context&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Resource </span><br><span class=\"line\">name&#x3D;&quot;jdbc&#x2F;test&quot;                  数据源的名称</span><br><span class=\"line\">type&#x3D;&quot;javax.sql.DataSource&quot;                   数据源类型</span><br><span class=\"line\">auth&#x3D;&quot;Container&quot;                        数据源提供者</span><br><span class=\"line\">maxActive&#x3D;&quot;20&quot;                         最大活动数</span><br><span class=\"line\">maxWait&#x3D;&quot;10000&quot;                            最大等待时间</span><br><span class=\"line\">maxIdle&#x3D;&quot;5&quot;                               最大空闲数</span><br><span class=\"line\">username&#x3D;&quot;root&quot;                            用户名</span><br><span class=\"line\">password&#x3D;&quot;1234&quot;                            密码</span><br><span class=\"line\">driverClassName&#x3D;&quot;com.mysql.jdbc.Driver&quot;          驱动类</span><br><span class=\"line\">url&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;eesy_mybatis&quot; 连接url字符串</span><br><span class=\"line\">&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n<p>在resouce的目录下：<br>写一个配置文件：context.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Resource </span><br><span class=\"line\">name&#x3D;&quot;jdbc&#x2F;test&quot;</span><br><span class=\"line\">type&#x3D;&quot;javax.sql.DataSource&quot;</span><br><span class=\"line\">auth&#x3D;&quot;Container&quot;</span><br><span class=\"line\">maxActive&#x3D;</span><br><span class=\"line\">maxWait&#x3D;</span><br><span class=\"line\">maxIdle&#x3D;</span><br><span class=\"line\">username&#x3D;</span><br><span class=\"line\">password&#x3D;</span><br><span class=\"line\">driverClassName&#x3D;&quot;com.mysql.jdbc.Driver&quot;</span><br><span class=\"line\">url&#x3D;</span><br><span class=\"line\">&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;Context&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":2613,"excerpt":"<p> mybatis连接池的3种配置方式:1,POOLED; 2,UNPOOLED 3,JNDI</p>","more":"<h4 id=\"1-POOLED\"><a href=\"#1-POOLED\" class=\"headerlink\" title=\"1,POOLED\"></a>1,POOLED</h4><p>采用传统的javax. sql. DataSource规范中的连接池.一旦数据库操作完成，mybaties会将此连接返回给连接池。mybatis有实现规范。<br>SqlMapConfig.xml中的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">          &lt;&#x2F;dataSource&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-UNPOOLED\"><a href=\"#2-UNPOOLED\" class=\"headerlink\" title=\"2,UNPOOLED\"></a>2,UNPOOLED</h4><p>采用传统的获取连接的方式，同样实现Javax. sql. DataSourcel，不过没有使用池的思想。也就是说mybaties会为每一个数据库操作创建一个新的连接，使用完就关闭它。<br>SqlMapConfig.xml中的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dataSource type&#x3D;&quot;UNPOOLED&quot;&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">              &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class=\"line\">          &lt;&#x2F;dataSource&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-JNDI\"><a href=\"#3-JNDI\" class=\"headerlink\" title=\"3,JNDI\"></a>3,JNDI</h4><p>  是SUN公司推出的一套规范，属于JavaEE技术之一。目的是模仿windows系统中的注册表。采用服务器提供的JNDI技术实现，来获取DataSource对 象，不同的服务器所能拿到DataSource是不一样。<br>  mybaties会从在应用服务器向配置好的JNDI数据源DataSource获取数据库连接。一般在生产环境中使用。<br>  SqlMapConfig.xml中的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;environments default&#x3D; &quot;mysql&quot;&gt;</span><br><span class=\"line\">&lt;environment id&#x3D; &quot;mysql&quot;&gt;</span><br><span class=\"line\">&lt;transact ionManager type &#x3D;”JDBC&quot;&gt;&lt; &#x2F; transact ionManager&gt;</span><br><span class=\"line\">&lt;dataSource type&#x3D; ”JNDI&quot; &gt;</span><br><span class=\"line\">&lt; property name&#x3D; ”data_ source&quot; value&#x3D; &quot;java : comp&#x2F; env&#x2F; jdbc&#x2F;数据库名</span><br><span class=\"line\">&lt;&#x2F;dataSource&gt;</span><br><span class=\"line\">&lt; &#x2F;environment&gt;</span><br><span class=\"line\">&lt; &#x2F; environments&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;Context&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Resource </span><br><span class=\"line\">name&#x3D;&quot;jdbc&#x2F;test&quot;                  数据源的名称</span><br><span class=\"line\">type&#x3D;&quot;javax.sql.DataSource&quot;                   数据源类型</span><br><span class=\"line\">auth&#x3D;&quot;Container&quot;                        数据源提供者</span><br><span class=\"line\">maxActive&#x3D;&quot;20&quot;                         最大活动数</span><br><span class=\"line\">maxWait&#x3D;&quot;10000&quot;                            最大等待时间</span><br><span class=\"line\">maxIdle&#x3D;&quot;5&quot;                               最大空闲数</span><br><span class=\"line\">username&#x3D;&quot;root&quot;                            用户名</span><br><span class=\"line\">password&#x3D;&quot;1234&quot;                            密码</span><br><span class=\"line\">driverClassName&#x3D;&quot;com.mysql.jdbc.Driver&quot;          驱动类</span><br><span class=\"line\">url&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;eesy_mybatis&quot; 连接url字符串</span><br><span class=\"line\">&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n<p>在resouce的目录下：<br>写一个配置文件：context.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Resource </span><br><span class=\"line\">name&#x3D;&quot;jdbc&#x2F;test&quot;</span><br><span class=\"line\">type&#x3D;&quot;javax.sql.DataSource&quot;</span><br><span class=\"line\">auth&#x3D;&quot;Container&quot;</span><br><span class=\"line\">maxActive&#x3D;</span><br><span class=\"line\">maxWait&#x3D;</span><br><span class=\"line\">maxIdle&#x3D;</span><br><span class=\"line\">username&#x3D;</span><br><span class=\"line\">password&#x3D;</span><br><span class=\"line\">driverClassName&#x3D;&quot;com.mysql.jdbc.Driver&quot;</span><br><span class=\"line\">url&#x3D;</span><br><span class=\"line\">&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;Context&gt;</span><br></pre></td></tr></table></figure>"},{"title":"mysql删除database报错ERROR 1010 (HY000): Error dropping database (can't rmdir './library', errno:","date":"2020-02-27T03:37:41.000Z","_content":"\n### 数据库删除报错：ERROR 1010 (HY000): Error dropping database (can't rmdir './library', errno:\n'./library'删除的数据库文件夹下面还有东西，需要手动删除。\n参考文章:[https://www.cnblogs.com/ivictor/p/5917370.html](https://www.cnblogs.com/ivictor/p/5917370.html).","source":"_posts/mysql删除database报错ERROR-1010-HY000-Error-dropping-database-can-t-rmdir-library-errno.md","raw":"---\ntitle: >-\n  mysql删除database报错ERROR 1010 (HY000): Error dropping database (can't rmdir\n  './library', errno:\ndate: 2020-02-27 11:37:41\ncategories: mysql\ntags: mysql\n---\n\n### 数据库删除报错：ERROR 1010 (HY000): Error dropping database (can't rmdir './library', errno:\n'./library'删除的数据库文件夹下面还有东西，需要手动删除。\n参考文章:[https://www.cnblogs.com/ivictor/p/5917370.html](https://www.cnblogs.com/ivictor/p/5917370.html).","slug":"mysql删除database报错ERROR-1010-HY000-Error-dropping-database-can-t-rmdir-library-errno","published":1,"updated":"2020-06-16T03:55:53.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7deqv0000ulwqahcmc70iv","content":"<h3 id=\"数据库删除报错：ERROR-1010-HY000-Error-dropping-database-can’t-rmdir-‘-library’-errno\"><a href=\"#数据库删除报错：ERROR-1010-HY000-Error-dropping-database-can’t-rmdir-‘-library’-errno\" class=\"headerlink\" title=\"数据库删除报错：ERROR 1010 (HY000): Error dropping database (can’t rmdir ‘./library’, errno:\"></a>数据库删除报错：ERROR 1010 (HY000): Error dropping database (can’t rmdir ‘./library’, errno:</h3><p>‘./library’删除的数据库文件夹下面还有东西，需要手动删除。<br>参考文章:<a href=\"https://www.cnblogs.com/ivictor/p/5917370.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ivictor/p/5917370.html</a>.</p>\n","site":{"data":{}},"length":161,"excerpt":"","more":"<h3 id=\"数据库删除报错：ERROR-1010-HY000-Error-dropping-database-can’t-rmdir-‘-library’-errno\"><a href=\"#数据库删除报错：ERROR-1010-HY000-Error-dropping-database-can’t-rmdir-‘-library’-errno\" class=\"headerlink\" title=\"数据库删除报错：ERROR 1010 (HY000): Error dropping database (can’t rmdir ‘./library’, errno:\"></a>数据库删除报错：ERROR 1010 (HY000): Error dropping database (can’t rmdir ‘./library’, errno:</h3><p>‘./library’删除的数据库文件夹下面还有东西，需要手动删除。<br>参考文章:<a href=\"https://www.cnblogs.com/ivictor/p/5917370.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ivictor/p/5917370.html</a>.</p>\n"},{"title":" mysql联合主键","date":"2020-01-07T03:55:42.000Z","_content":"\n mysql联合主键\n\n<!--more-->\n\n把（列名1，列名2）设置联合主键。将其看成一个有序对。这个有序对不能重复！就是不能有两条记录列名1，列名2都是一样的。\n\n添加语法如下：\n\n```\n ALTER TABLE table_name ADD CONSTRAINT 别名 PRIMARY KEY(列名1，列名2)；\n```","source":"_posts/mysql联合主键.md","raw":"---\ntitle: ' mysql联合主键'\ndate: 2020-01-07 11:55:42 \ncategories: mysql\ntags: mysql\n---\n\n mysql联合主键\n\n<!--more-->\n\n把（列名1，列名2）设置联合主键。将其看成一个有序对。这个有序对不能重复！就是不能有两条记录列名1，列名2都是一样的。\n\n添加语法如下：\n\n```\n ALTER TABLE table_name ADD CONSTRAINT 别名 PRIMARY KEY(列名1，列名2)；\n```","slug":"mysql联合主键","published":1,"updated":"2020-06-16T03:55:53.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7deqv1000wlwqa4iqhh0jz","content":"<p> mysql联合主键</p>\n<a id=\"more\"></a>\n\n<p>把（列名1，列名2）设置联合主键。将其看成一个有序对。这个有序对不能重复！就是不能有两条记录列名1，列名2都是一样的。</p>\n<p>添加语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD CONSTRAINT 别名 PRIMARY KEY(列名1，列名2)；</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":131,"excerpt":"<p> mysql联合主键</p>","more":"<p>把（列名1，列名2）设置联合主键。将其看成一个有序对。这个有序对不能重复！就是不能有两条记录列名1，列名2都是一样的。</p>\n<p>添加语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD CONSTRAINT 别名 PRIMARY KEY(列名1，列名2)；</span><br></pre></td></tr></table></figure>"},{"title":"sql获取当前插入表的id","date":"2019-12-05T14:39:55.000Z","_content":"\n sql获取当前插入表的id\n\n<!--more-->\n\nsql语句：\n\n```\nselect last_insert_id();\n```\n\n动态sql:\n\n```\n        <selectKey keyProperty=\"userId\" keyColumn=\"id\" resultType=\"int\" order=\"AFTER\">\n            select last_insert_id();\n        </selectKey>\n```","source":"_posts/sql获取当前插入表的id.md","raw":"---\ntitle: sql获取当前插入表的id\ndate: 2019-12-05 22:39:55 \ncategories: mysql\ntags: mysql\n---\n\n sql获取当前插入表的id\n\n<!--more-->\n\nsql语句：\n\n```\nselect last_insert_id();\n```\n\n动态sql:\n\n```\n        <selectKey keyProperty=\"userId\" keyColumn=\"id\" resultType=\"int\" order=\"AFTER\">\n            select last_insert_id();\n        </selectKey>\n```","slug":"sql获取当前插入表的id","published":1,"updated":"2020-06-16T03:55:53.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7deqv30010lwqa47h82loc","content":"<p> sql获取当前插入表的id</p>\n<a id=\"more\"></a>\n\n<p>sql语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select last_insert_id();</span><br></pre></td></tr></table></figure>\n\n<p>动态sql:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;selectKey keyProperty&#x3D;&quot;userId&quot; keyColumn&#x3D;&quot;id&quot; resultType&#x3D;&quot;int&quot; order&#x3D;&quot;AFTER&quot;&gt;</span><br><span class=\"line\">    select last_insert_id();</span><br><span class=\"line\">&lt;&#x2F;selectKey&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":238,"excerpt":"<p> sql获取当前插入表的id</p>","more":"<p>sql语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select last_insert_id();</span><br></pre></td></tr></table></figure>\n\n<p>动态sql:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;selectKey keyProperty&#x3D;&quot;userId&quot; keyColumn&#x3D;&quot;id&quot; resultType&#x3D;&quot;int&quot; order&#x3D;&quot;AFTER&quot;&gt;</span><br><span class=\"line\">    select last_insert_id();</span><br><span class=\"line\">&lt;&#x2F;selectKey&gt;</span><br></pre></td></tr></table></figure>"},{"title":"swaggerv1接口文档UI界面的方法点不开，只能点统一展开，关闭","date":"2019-12-05T02:02:42.000Z","_content":"\n swagger接口文档UI界面的方法点不开，只能点统一展开，关闭\n解决方法：将@Api(value=\"\")注解里面的中文换成英文，成功点开每个方法\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191205100059614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)","source":"_posts/swagger接口文档UI界面的方法点不开，只能点统一展开，关闭.md","raw":"---\ntitle: swaggerv1接口文档UI界面的方法点不开，只能点统一展开，关闭\ndate: 2019-12-05 10:02:42 \ncategories: swagger\ntags: swagger\n---\n\n swagger接口文档UI界面的方法点不开，只能点统一展开，关闭\n解决方法：将@Api(value=\"\")注解里面的中文换成英文，成功点开每个方法\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191205100059614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)","slug":"swagger接口文档UI界面的方法点不开，只能点统一展开，关闭","published":1,"updated":"2020-06-16T03:55:53.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7deqv40012lwqa0g6f6p9s","content":"<p> swagger接口文档UI界面的方法点不开，只能点统一展开，关闭<br>解决方法：将@Api(value=””)注解里面的中文换成英文，成功点开每个方法<br><img src=\"https://img-blog.csdnimg.cn/20191205100059614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"length":72,"excerpt":"","more":"<p> swagger接口文档UI界面的方法点不开，只能点统一展开，关闭<br>解决方法：将@Api(value=””)注解里面的中文换成英文，成功点开每个方法<br><img src=\"https://img-blog.csdnimg.cn/20191205100059614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"项目启动报错","date":"2020-05-15T14:12:39.000Z","_content":"\n导入一个web项目，跑起来的时候报”org.xml.sax.SAXNotRecognizedException:Feature:http://apache.org/xml/features/val”。原因：原项目用的是jdk1.7而现在用的是1.8.换成jdk1.7后成功运行","source":"_posts/org-xml-sax-SAXNotRecognizedException-Feature-http-apache-org-xml-features-val.md","raw":"---\ntitle: '项目启动报错'\ndate: 2020-05-15 22:12:39\ncategories: jdk\ntags: jdk\n---\n\n导入一个web项目，跑起来的时候报”org.xml.sax.SAXNotRecognizedException:Feature:http://apache.org/xml/features/val”。原因：原项目用的是jdk1.7而现在用的是1.8.换成jdk1.7后成功运行","slug":"org-xml-sax-SAXNotRecognizedException-Feature-http-apache-org-xml-features-val","published":1,"updated":"2020-07-04T01:56:27.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7deqv50015lwqa12pm9ewv","content":"<p>导入一个web项目，跑起来的时候报”org.xml.sax.SAXNotRecognizedException:Feature:<a href=\"http://apache.org/xml/features/val”。原因：原项目用的是jdk1.7而现在用的是1.8.换成jdk1.7后成功运行\" target=\"_blank\" rel=\"noopener\">http://apache.org/xml/features/val”。原因：原项目用的是jdk1.7而现在用的是1.8.换成jdk1.7后成功运行</a></p>\n","site":{"data":{}},"length":138,"excerpt":"","more":"<p>导入一个web项目，跑起来的时候报”org.xml.sax.SAXNotRecognizedException:Feature:<a href=\"http://apache.org/xml/features/val”。原因：原项目用的是jdk1.7而现在用的是1.8.换成jdk1.7后成功运行\" target=\"_blank\" rel=\"noopener\">http://apache.org/xml/features/val”。原因：原项目用的是jdk1.7而现在用的是1.8.换成jdk1.7后成功运行</a></p>\n"},{"title":"windows下升级node.js, 在cmd 运行n stable报错bash不是内部或外部命令，也不是可运行的程序 或批处理文件","date":"2020-01-08T02:31:27.000Z","_content":"\nwindows下升级node.js, 在cmd 运行n stable报错bash不是内部或外部命令，也不是可运行的程序 或批处理文件。\n\n<!--more-->\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108102152449.png)\n在GitHub官网，搜索gnvm，下载\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108102414994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108102504659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n放在node.js的安装目录下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108102646281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n然后打开cmd命令行窗口，输入：gnvm update latest，等待更新。\n当然也可以直接覆盖.\n参考文章：\n[https://jingyan.baidu.com/album/9158e000fc556ea2541228e2.html?picindex=1](https://jingyan.baidu.com/album/9158e000fc556ea2541228e2.html?picindex=1).","source":"_posts/windows下升级node-js-在cmd-运行n-stable报错bash不是内部或外部命令，也不是可运行的程序-或批处理文件.md","raw":"---\ntitle: 'windows下升级node.js, 在cmd 运行n stable报错bash不是内部或外部命令，也不是可运行的程序 或批处理文件'\ndate: 2020-01-08 10:31:27 \ncategories: node\ntags: node\n---\n\nwindows下升级node.js, 在cmd 运行n stable报错bash不是内部或外部命令，也不是可运行的程序 或批处理文件。\n\n<!--more-->\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108102152449.png)\n在GitHub官网，搜索gnvm，下载\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108102414994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108102504659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n放在node.js的安装目录下\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200108102646281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n然后打开cmd命令行窗口，输入：gnvm update latest，等待更新。\n当然也可以直接覆盖.\n参考文章：\n[https://jingyan.baidu.com/album/9158e000fc556ea2541228e2.html?picindex=1](https://jingyan.baidu.com/album/9158e000fc556ea2541228e2.html?picindex=1).","slug":"windows下升级node-js-在cmd-运行n-stable报错bash不是内部或外部命令，也不是可运行的程序-或批处理文件","published":1,"updated":"2020-06-16T03:55:53.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7deqv60018lwqaehhd629n","content":"<p>windows下升级node.js, 在cmd 运行n stable报错bash不是内部或外部命令，也不是可运行的程序 或批处理文件。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200108102152449.png\" alt=\"在这里插入图片描述\"><br>在GitHub官网，搜索gnvm，下载<br><img src=\"https://img-blog.csdnimg.cn/20200108102414994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20200108102504659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>放在node.js的安装目录下</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200108102646281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>然后打开cmd命令行窗口，输入：gnvm update latest，等待更新。<br>当然也可以直接覆盖.<br>参考文章：<br><a href=\"https://jingyan.baidu.com/album/9158e000fc556ea2541228e2.html?picindex=1\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/album/9158e000fc556ea2541228e2.html?picindex=1</a>.</p>\n","site":{"data":{}},"length":223,"excerpt":"<p>windows下升级node.js, 在cmd 运行n stable报错bash不是内部或外部命令，也不是可运行的程序 或批处理文件。</p>","more":"<p><img src=\"https://img-blog.csdnimg.cn/20200108102152449.png\" alt=\"在这里插入图片描述\"><br>在GitHub官网，搜索gnvm，下载<br><img src=\"https://img-blog.csdnimg.cn/20200108102414994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20200108102504659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>放在node.js的安装目录下</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200108102646281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>然后打开cmd命令行窗口，输入：gnvm update latest，等待更新。<br>当然也可以直接覆盖.<br>参考文章：<br><a href=\"https://jingyan.baidu.com/album/9158e000fc556ea2541228e2.html?picindex=1\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/album/9158e000fc556ea2541228e2.html?picindex=1</a>.</p>"},{"title":"《thinking in java》读书笔记","date":"2019-12-02T12:39:55.000Z","_content":"\n记录今天一些学习《JAVA编程思想》中读到的让我深思和值得记录的点\n\n<!--more-->\n\n 1，每个对象对可以很好的完成一项任务，但它并不试图做更多的事情\n 2，继承：is-a,接口：is-like-a\n 3，前期绑定：编译器对具体的函数调用\n      后期绑定：编译器不知道具体执行的代码。只确定被调用的方法存在，（y用一段特殊的代码代替具体方法的绝对地址调用）到执行时才确定。\n 4，参数化类型：<type>如：\n\n```\nArrayList<User> users=new ArrayList<User>;\n```\napplet:只在浏览器中运行的小程序。\nIntranet:企业内部网","source":"_posts/《thinking-in-java》读书笔记.md","raw":"---\ntitle: 《thinking in java》读书笔记\ndate: 2019-12-02 20:39:55 \ncategories: \n  - 读书笔记\n    - thinKing in java\ntags: 笔记\n---\n\n记录今天一些学习《JAVA编程思想》中读到的让我深思和值得记录的点\n\n<!--more-->\n\n 1，每个对象对可以很好的完成一项任务，但它并不试图做更多的事情\n 2，继承：is-a,接口：is-like-a\n 3，前期绑定：编译器对具体的函数调用\n      后期绑定：编译器不知道具体执行的代码。只确定被调用的方法存在，（y用一段特殊的代码代替具体方法的绝对地址调用）到执行时才确定。\n 4，参数化类型：<type>如：\n\n```\nArrayList<User> users=new ArrayList<User>;\n```\napplet:只在浏览器中运行的小程序。\nIntranet:企业内部网","slug":"《thinking-in-java》读书笔记","published":1,"updated":"2020-06-16T03:55:53.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7deqv7001blwqa4gdn2lsx","content":"<p>记录今天一些学习《JAVA编程思想》中读到的让我深思和值得记录的点</p>\n<a id=\"more\"></a>\n\n<p> 1，每个对象对可以很好的完成一项任务，但它并不试图做更多的事情<br> 2，继承：is-a,接口：is-like-a<br> 3，前期绑定：编译器对具体的函数调用<br>      后期绑定：编译器不知道具体执行的代码。只确定被调用的方法存在，（y用一段特殊的代码代替具体方法的绝对地址调用）到执行时才确定。<br> 4，参数化类型：<type>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;User&gt; users&#x3D;new ArrayList&lt;User&gt;;</span><br></pre></td></tr></table></figure>\n<p>applet:只在浏览器中运行的小程序。<br>Intranet:企业内部网</p>\n","site":{"data":{}},"length":269,"excerpt":"<p>记录今天一些学习《JAVA编程思想》中读到的让我深思和值得记录的点</p>","more":"<p> 1，每个对象对可以很好的完成一项任务，但它并不试图做更多的事情<br> 2，继承：is-a,接口：is-like-a<br> 3，前期绑定：编译器对具体的函数调用<br>      后期绑定：编译器不知道具体执行的代码。只确定被调用的方法存在，（y用一段特殊的代码代替具体方法的绝对地址调用）到执行时才确定。<br> 4，参数化类型：<type>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;User&gt; users&#x3D;new ArrayList&lt;User&gt;;</span><br></pre></td></tr></table></figure>\n<p>applet:只在浏览器中运行的小程序。<br>Intranet:企业内部网</p>"},{"title":"《thinking in java》读书笔记2：对象","date":"2019-12-04T13:05:30.000Z","_content":"\nBigInteger:支持任意精度的整数\nBigDecimal:支持任何精度的定点数\njava的作用域由{ }决定，\n\n<!--more-->\n\n#### java基本成员变量默认值\nboolean:false, char：'\\u0000'(null), byte:0, short: 0, int：0，long: 0L, float: 0.0f, double:0.0d\n#### javadoc\njavadoc 命令只能出现在\"/**\"注释中出现，主要有两种方式。\n1，文档标签,\n（1）独立文档标签：以\"@\"开头\n （2）行内文档标签：同样以\"@\"开头，但是要括在\"{}\"内。\n2，嵌入html\n如: \n\n```\n/**\n*<ol>\n*<li>item one\n*</ol>\n*/\n```","source":"_posts/《thinking-in-java》读书笔记2：对象.md","raw":"---\ntitle: 《thinking in java》读书笔记2：对象\ndate: 2019-12-04 21:05:30\ncategories:\n  - 读书笔记\n    - thinKing in java\ntags: 笔记\n---\n\nBigInteger:支持任意精度的整数\nBigDecimal:支持任何精度的定点数\njava的作用域由{ }决定，\n\n<!--more-->\n\n#### java基本成员变量默认值\nboolean:false, char：'\\u0000'(null), byte:0, short: 0, int：0，long: 0L, float: 0.0f, double:0.0d\n#### javadoc\njavadoc 命令只能出现在\"/**\"注释中出现，主要有两种方式。\n1，文档标签,\n（1）独立文档标签：以\"@\"开头\n （2）行内文档标签：同样以\"@\"开头，但是要括在\"{}\"内。\n2，嵌入html\n如: \n\n```\n/**\n*<ol>\n*<li>item one\n*</ol>\n*/\n```","slug":"《thinking-in-java》读书笔记2：对象","published":1,"updated":"2020-06-16T03:55:53.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7deqv8001elwqa214s32la","content":"<p>BigInteger:支持任意精度的整数<br>BigDecimal:支持任何精度的定点数<br>java的作用域由{ }决定，</p>\n<a id=\"more\"></a>\n\n<h4 id=\"java基本成员变量默认值\"><a href=\"#java基本成员变量默认值\" class=\"headerlink\" title=\"java基本成员变量默认值\"></a>java基本成员变量默认值</h4><p>boolean:false, char：’\\u0000’(null), byte:0, short: 0, int：0，long: 0L, float: 0.0f, double:0.0d</p>\n<h4 id=\"javadoc\"><a href=\"#javadoc\" class=\"headerlink\" title=\"javadoc\"></a>javadoc</h4><p>javadoc 命令只能出现在”/**”注释中出现，主要有两种方式。<br>1，文档标签,<br>（1）独立文档标签：以”@”开头<br> （2）行内文档标签：同样以”@”开头，但是要括在”{}”内。<br>2，嵌入html<br>如: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">*&lt;ol&gt;</span><br><span class=\"line\">*&lt;li&gt;item one</span><br><span class=\"line\">*&lt;&#x2F;ol&gt;</span><br><span class=\"line\">*&#x2F;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":322,"excerpt":"<p>BigInteger:支持任意精度的整数<br>BigDecimal:支持任何精度的定点数<br>java的作用域由{ }决定，</p>","more":"<h4 id=\"java基本成员变量默认值\"><a href=\"#java基本成员变量默认值\" class=\"headerlink\" title=\"java基本成员变量默认值\"></a>java基本成员变量默认值</h4><p>boolean:false, char：’\\u0000’(null), byte:0, short: 0, int：0，long: 0L, float: 0.0f, double:0.0d</p>\n<h4 id=\"javadoc\"><a href=\"#javadoc\" class=\"headerlink\" title=\"javadoc\"></a>javadoc</h4><p>javadoc 命令只能出现在”/**”注释中出现，主要有两种方式。<br>1，文档标签,<br>（1）独立文档标签：以”@”开头<br> （2）行内文档标签：同样以”@”开头，但是要括在”{}”内。<br>2，嵌入html<br>如: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">*&lt;ol&gt;</span><br><span class=\"line\">*&lt;li&gt;item one</span><br><span class=\"line\">*&lt;&#x2F;ol&gt;</span><br><span class=\"line\">*&#x2F;</span><br></pre></td></tr></table></figure>"},{"title":"使用dhcp始终无法连接mysql的问题解决","date":"2019-11-21T08:22:03.000Z","_content":"\n把mysql的时区加8\n\n<!--more-->\n\n把mysql的时区加8\n\n```\n     set global time_zone = '+8:00';\n```\n\n参考链接：\n[https://blog.csdn.net/zqb765720343/article/details/80076020:](https://blog.csdn.net/zqb765720343/article/details/80076020)","source":"_posts/使用dhcp始终无法连接mysql的问题解决.md","raw":"---\ntitle: 使用dhcp始终无法连接mysql的问题解决\ndate: 2019-11-21 16:22:03\ncategories: mysql\ntags: mysql\n---\n\n把mysql的时区加8\n\n<!--more-->\n\n把mysql的时区加8\n\n```\n     set global time_zone = '+8:00';\n```\n\n参考链接：\n[https://blog.csdn.net/zqb765720343/article/details/80076020:](https://blog.csdn.net/zqb765720343/article/details/80076020)","slug":"使用dhcp始终无法连接mysql的问题解决","published":1,"updated":"2020-06-16T03:55:53.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7deqv9001hlwqafdw9g5xl","content":"<p>把mysql的时区加8</p>\n<a id=\"more\"></a>\n\n<p>把mysql的时区加8</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set global time_zone &#x3D; &#39;+8:00&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>参考链接：<br><a href=\"https://blog.csdn.net/zqb765720343/article/details/80076020\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zqb765720343/article/details/80076020:</a></p>\n","site":{"data":{}},"length":128,"excerpt":"<p>把mysql的时区加8</p>","more":"<p>把mysql的时区加8</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set global time_zone &#x3D; &#39;+8:00&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>参考链接：<br><a href=\"https://blog.csdn.net/zqb765720343/article/details/80076020\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zqb765720343/article/details/80076020:</a></p>"},{"title":"使用eclipse导入myeclipse项目无法识别为web项目问题的解决","date":"2020-05-15T14:27:55.000Z","_content":"\n原因eclipse默认的web目录为webcontent,而myeclipse的为webRoot,导致无法识别\n\n<!--more-->\n\n解决办法：\n在eclipse中右击项目根路径，在弹出的对话框中，选择 Properties：![在这里插入图片描述](https://img-blog.csdnimg.cn/2020051522170285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n\n选择 Project Facets，点击右边的“Convert to faceted form...”链接：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200515222409927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n勾选 Java 和 Dynamic Web Module ：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200515222615606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n\n点击“ Further Configuration availabe ” 的链接 ，更改 Content Directory 名字为你的 webRoot 目录名字即可","source":"_posts/使用eclipse导入myeclipse项目无法识别为web项目问题的解决.md","raw":"---\ntitle: 使用eclipse导入myeclipse项目无法识别为web项目问题的解决\ndate: 2020-05-15 22:27:55 \ncategories: eclipse\ntags: eclipse\n---\n\n原因eclipse默认的web目录为webcontent,而myeclipse的为webRoot,导致无法识别\n\n<!--more-->\n\n解决办法：\n在eclipse中右击项目根路径，在弹出的对话框中，选择 Properties：![在这里插入图片描述](https://img-blog.csdnimg.cn/2020051522170285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n\n选择 Project Facets，点击右边的“Convert to faceted form...”链接：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200515222409927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n勾选 Java 和 Dynamic Web Module ：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200515222615606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n\n点击“ Further Configuration availabe ” 的链接 ，更改 Content Directory 名字为你的 webRoot 目录名字即可","slug":"使用eclipse导入myeclipse项目无法识别为web项目问题的解决","published":1,"updated":"2020-06-16T03:55:53.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7deqvc001klwqaaxrz0otk","content":"<p>原因eclipse默认的web目录为webcontent,而myeclipse的为webRoot,导致无法识别</p>\n<a id=\"more\"></a>\n\n<p>解决办法：<br>在eclipse中右击项目根路径，在弹出的对话框中，选择 Properties：<img src=\"https://img-blog.csdnimg.cn/2020051522170285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>选择 Project Facets，点击右边的“Convert to faceted form…”链接：<br><img src=\"https://img-blog.csdnimg.cn/20200515222409927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>勾选 Java 和 Dynamic Web Module ：<br><img src=\"https://img-blog.csdnimg.cn/20200515222615606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>点击“ Further Configuration availabe ” 的链接 ，更改 Content Directory 名字为你的 webRoot 目录名字即可</p>\n","site":{"data":{}},"length":242,"excerpt":"<p>原因eclipse默认的web目录为webcontent,而myeclipse的为webRoot,导致无法识别</p>","more":"<p>解决办法：<br>在eclipse中右击项目根路径，在弹出的对话框中，选择 Properties：<img src=\"https://img-blog.csdnimg.cn/2020051522170285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>选择 Project Facets，点击右边的“Convert to faceted form…”链接：<br><img src=\"https://img-blog.csdnimg.cn/20200515222409927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>勾选 Java 和 Dynamic Web Module ：<br><img src=\"https://img-blog.csdnimg.cn/20200515222615606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>点击“ Further Configuration availabe ” 的链接 ，更改 Content Directory 名字为你的 webRoot 目录名字即可</p>"},{"title":"区分项目中的数据实体目录 entity，dto,vo","date":"2020-03-06T02:29:19.000Z","_content":"\n1、entity 里的每一个字段，与数据库相对应，\n2、vo 里的每一个字段，是和你前台 html 页面相对应，\n3、dto 这是用来转换从 entity 到 vo，或者从 vo 到 entity 的中间的东西 。（DTO中拥有的字段应该是entity中或者是vo中的一个子集）\n[参考文章：https://www.cnblogs.com/vegetableDD/p/11732495.html](https://www.cnblogs.com/vegetableDD/p/11732495.html)","source":"_posts/区分项目中的数据实体目录-entity，dto-vo.md","raw":"---\ntitle: '区分项目中的数据实体目录 entity，dto,vo'\ndate: 2020-03-06 10:29:19\ncategories: java规范\ntags: java规范\n---\n\n1、entity 里的每一个字段，与数据库相对应，\n2、vo 里的每一个字段，是和你前台 html 页面相对应，\n3、dto 这是用来转换从 entity 到 vo，或者从 vo 到 entity 的中间的东西 。（DTO中拥有的字段应该是entity中或者是vo中的一个子集）\n[参考文章：https://www.cnblogs.com/vegetableDD/p/11732495.html](https://www.cnblogs.com/vegetableDD/p/11732495.html)","slug":"区分项目中的数据实体目录-entity，dto-vo","published":1,"updated":"2020-06-16T03:55:53.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7deqve001nlwqa0ogwekc1","content":"<p>1、entity 里的每一个字段，与数据库相对应，<br>2、vo 里的每一个字段，是和你前台 html 页面相对应，<br>3、dto 这是用来转换从 entity 到 vo，或者从 vo 到 entity 的中间的东西 。（DTO中拥有的字段应该是entity中或者是vo中的一个子集）<br><a href=\"https://www.cnblogs.com/vegetableDD/p/11732495.html\" target=\"_blank\" rel=\"noopener\">参考文章：https://www.cnblogs.com/vegetableDD/p/11732495.html</a></p>\n","site":{"data":{}},"length":180,"excerpt":"","more":"<p>1、entity 里的每一个字段，与数据库相对应，<br>2、vo 里的每一个字段，是和你前台 html 页面相对应，<br>3、dto 这是用来转换从 entity 到 vo，或者从 vo 到 entity 的中间的东西 。（DTO中拥有的字段应该是entity中或者是vo中的一个子集）<br><a href=\"https://www.cnblogs.com/vegetableDD/p/11732495.html\" target=\"_blank\" rel=\"noopener\">参考文章：https://www.cnblogs.com/vegetableDD/p/11732495.html</a></p>\n"},{"title":"在学Spring Aop 发现的注意点","date":"2019-11-18T13:16:33.000Z","_content":"\n## 基于xml\n有两种方式可以实现：1环绕通知; 2前置通知，后置通知，最终通知，异常通知\n\n<!--more-->\n\n### 1环绕通知\n配置环绕通知\n### 2前置通知，后置通知，最终通知，异常通知\n\n\n\n<!--配置aop-->\n    <aop:config>\n        <!--切入点表达式-->\n        <aop:pointcut id=\"pr\" expression=\"execution(作用范围)\"></aop:pointcut>\n        <aop:aspect id=\"txAdvice\" ref=\"txManager\">\n            <!--前置通知-->\n            <aop:before method=\"beginTransaction\" pointcut-ref=\"pr\"></aop:before>\n            <!--后置通知-->\n            <aop:after-returning method=\"commit\" pointcut-ref=\"pr\"></aop:after-returning>\n            <!--异常通知-->\n            <aop:after-throwing method=\"rollback\" pointcut-ref=\"pr\"></aop:after-throwing>\n            <!--最终通知-->\n            <aop:after method=\"release\" pointcut-ref=\"pr\"></aop:after>\n        </aop:aspect>\n\n    </aop:config>\n### 基于注解\n只能使用环绕通知\n如果使用前置通知，后置通知，最终通知，异常通知会因为执行顺序问题导致错误\n```\n @Around(\"pt1()\")\n    public Object aroundAdvice(ProceedingJoinPoint pjp){\n        Object rtValue = null;\n        try {\n            //1.获取参数\n            Object[] params = pjp.getParams();\n            //2.开启事务\n            this.beginTransaction();\n            //3.执行方法\n            rtValue = pjp.proceed(params);\n            //4.提交事务\n            this.commit();\n            //返回结果\n            return  rtValue;\n        }catch (Throwable e){\n            //5.回滚事务\n            this.rollback();\n            throw new RuntimeException(e);\n        }finally {\n            //6.释放资源\n            this.release();\n        }\n    }\n```","source":"_posts/在学Spring-Aop-发现的注意点.md","raw":"---\ntitle: 在学Spring Aop 发现的注意点\ndate: 2019-11-18 21:16:33 \ncategories: Spring\ntags: Spring\n---\n\n## 基于xml\n有两种方式可以实现：1环绕通知; 2前置通知，后置通知，最终通知，异常通知\n\n<!--more-->\n\n### 1环绕通知\n配置环绕通知\n### 2前置通知，后置通知，最终通知，异常通知\n\n\n\n<!--配置aop-->\n    <aop:config>\n        <!--切入点表达式-->\n        <aop:pointcut id=\"pr\" expression=\"execution(作用范围)\"></aop:pointcut>\n        <aop:aspect id=\"txAdvice\" ref=\"txManager\">\n            <!--前置通知-->\n            <aop:before method=\"beginTransaction\" pointcut-ref=\"pr\"></aop:before>\n            <!--后置通知-->\n            <aop:after-returning method=\"commit\" pointcut-ref=\"pr\"></aop:after-returning>\n            <!--异常通知-->\n            <aop:after-throwing method=\"rollback\" pointcut-ref=\"pr\"></aop:after-throwing>\n            <!--最终通知-->\n            <aop:after method=\"release\" pointcut-ref=\"pr\"></aop:after>\n        </aop:aspect>\n\n    </aop:config>\n### 基于注解\n只能使用环绕通知\n如果使用前置通知，后置通知，最终通知，异常通知会因为执行顺序问题导致错误\n```\n @Around(\"pt1()\")\n    public Object aroundAdvice(ProceedingJoinPoint pjp){\n        Object rtValue = null;\n        try {\n            //1.获取参数\n            Object[] params = pjp.getParams();\n            //2.开启事务\n            this.beginTransaction();\n            //3.执行方法\n            rtValue = pjp.proceed(params);\n            //4.提交事务\n            this.commit();\n            //返回结果\n            return  rtValue;\n        }catch (Throwable e){\n            //5.回滚事务\n            this.rollback();\n            throw new RuntimeException(e);\n        }finally {\n            //6.释放资源\n            this.release();\n        }\n    }\n```","slug":"在学Spring-Aop-发现的注意点","published":1,"updated":"2020-06-16T03:55:53.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7deqvh001qlwqa2mh93ah4","content":"<h2 id=\"基于xml\"><a href=\"#基于xml\" class=\"headerlink\" title=\"基于xml\"></a>基于xml</h2><p>有两种方式可以实现：1环绕通知; 2前置通知，后置通知，最终通知，异常通知</p>\n<a id=\"more\"></a>\n\n<h3 id=\"1环绕通知\"><a href=\"#1环绕通知\" class=\"headerlink\" title=\"1环绕通知\"></a>1环绕通知</h3><p>配置环绕通知</p>\n<h3 id=\"2前置通知，后置通知，最终通知，异常通知\"><a href=\"#2前置通知，后置通知，最终通知，异常通知\" class=\"headerlink\" title=\"2前置通知，后置通知，最终通知，异常通知\"></a>2前置通知，后置通知，最终通知，异常通知</h3><!--配置aop-->\n<pre><code>&lt;aop:config&gt;\n    &lt;!--切入点表达式--&gt;\n    &lt;aop:pointcut id=&quot;pr&quot; expression=&quot;execution(作用范围)&quot;&gt;&lt;/aop:pointcut&gt;\n    &lt;aop:aspect id=&quot;txAdvice&quot; ref=&quot;txManager&quot;&gt;\n        &lt;!--前置通知--&gt;\n        &lt;aop:before method=&quot;beginTransaction&quot; pointcut-ref=&quot;pr&quot;&gt;&lt;/aop:before&gt;\n        &lt;!--后置通知--&gt;\n        &lt;aop:after-returning method=&quot;commit&quot; pointcut-ref=&quot;pr&quot;&gt;&lt;/aop:after-returning&gt;\n        &lt;!--异常通知--&gt;\n        &lt;aop:after-throwing method=&quot;rollback&quot; pointcut-ref=&quot;pr&quot;&gt;&lt;/aop:after-throwing&gt;\n        &lt;!--最终通知--&gt;\n        &lt;aop:after method=&quot;release&quot; pointcut-ref=&quot;pr&quot;&gt;&lt;/aop:after&gt;\n    &lt;/aop:aspect&gt;\n\n&lt;/aop:config&gt;</code></pre><h3 id=\"基于注解\"><a href=\"#基于注解\" class=\"headerlink\" title=\"基于注解\"></a>基于注解</h3><p>只能使用环绕通知<br>如果使用前置通知，后置通知，最终通知，异常通知会因为执行顺序问题导致错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Around(&quot;pt1()&quot;)</span><br><span class=\"line\">   public Object aroundAdvice(ProceedingJoinPoint pjp)&#123;</span><br><span class=\"line\">       Object rtValue &#x3D; null;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           &#x2F;&#x2F;1.获取参数</span><br><span class=\"line\">           Object[] params &#x3D; pjp.getParams();</span><br><span class=\"line\">           &#x2F;&#x2F;2.开启事务</span><br><span class=\"line\">           this.beginTransaction();</span><br><span class=\"line\">           &#x2F;&#x2F;3.执行方法</span><br><span class=\"line\">           rtValue &#x3D; pjp.proceed(params);</span><br><span class=\"line\">           &#x2F;&#x2F;4.提交事务</span><br><span class=\"line\">           this.commit();</span><br><span class=\"line\">           &#x2F;&#x2F;返回结果</span><br><span class=\"line\">           return  rtValue;</span><br><span class=\"line\">       &#125;catch (Throwable e)&#123;</span><br><span class=\"line\">           &#x2F;&#x2F;5.回滚事务</span><br><span class=\"line\">           this.rollback();</span><br><span class=\"line\">           throw new RuntimeException(e);</span><br><span class=\"line\">       &#125;finally &#123;</span><br><span class=\"line\">           &#x2F;&#x2F;6.释放资源</span><br><span class=\"line\">           this.release();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1340,"excerpt":"<h2 id=\"基于xml\"><a href=\"#基于xml\" class=\"headerlink\" title=\"基于xml\"></a>基于xml</h2><p>有两种方式可以实现：1环绕通知; 2前置通知，后置通知，最终通知，异常通知</p>","more":"<h3 id=\"1环绕通知\"><a href=\"#1环绕通知\" class=\"headerlink\" title=\"1环绕通知\"></a>1环绕通知</h3><p>配置环绕通知</p>\n<h3 id=\"2前置通知，后置通知，最终通知，异常通知\"><a href=\"#2前置通知，后置通知，最终通知，异常通知\" class=\"headerlink\" title=\"2前置通知，后置通知，最终通知，异常通知\"></a>2前置通知，后置通知，最终通知，异常通知</h3><!--配置aop-->\n<pre><code>&lt;aop:config&gt;\n    &lt;!--切入点表达式--&gt;\n    &lt;aop:pointcut id=&quot;pr&quot; expression=&quot;execution(作用范围)&quot;&gt;&lt;/aop:pointcut&gt;\n    &lt;aop:aspect id=&quot;txAdvice&quot; ref=&quot;txManager&quot;&gt;\n        &lt;!--前置通知--&gt;\n        &lt;aop:before method=&quot;beginTransaction&quot; pointcut-ref=&quot;pr&quot;&gt;&lt;/aop:before&gt;\n        &lt;!--后置通知--&gt;\n        &lt;aop:after-returning method=&quot;commit&quot; pointcut-ref=&quot;pr&quot;&gt;&lt;/aop:after-returning&gt;\n        &lt;!--异常通知--&gt;\n        &lt;aop:after-throwing method=&quot;rollback&quot; pointcut-ref=&quot;pr&quot;&gt;&lt;/aop:after-throwing&gt;\n        &lt;!--最终通知--&gt;\n        &lt;aop:after method=&quot;release&quot; pointcut-ref=&quot;pr&quot;&gt;&lt;/aop:after&gt;\n    &lt;/aop:aspect&gt;\n\n&lt;/aop:config&gt;</code></pre><h3 id=\"基于注解\"><a href=\"#基于注解\" class=\"headerlink\" title=\"基于注解\"></a>基于注解</h3><p>只能使用环绕通知<br>如果使用前置通知，后置通知，最终通知，异常通知会因为执行顺序问题导致错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Around(&quot;pt1()&quot;)</span><br><span class=\"line\">   public Object aroundAdvice(ProceedingJoinPoint pjp)&#123;</span><br><span class=\"line\">       Object rtValue &#x3D; null;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           &#x2F;&#x2F;1.获取参数</span><br><span class=\"line\">           Object[] params &#x3D; pjp.getParams();</span><br><span class=\"line\">           &#x2F;&#x2F;2.开启事务</span><br><span class=\"line\">           this.beginTransaction();</span><br><span class=\"line\">           &#x2F;&#x2F;3.执行方法</span><br><span class=\"line\">           rtValue &#x3D; pjp.proceed(params);</span><br><span class=\"line\">           &#x2F;&#x2F;4.提交事务</span><br><span class=\"line\">           this.commit();</span><br><span class=\"line\">           &#x2F;&#x2F;返回结果</span><br><span class=\"line\">           return  rtValue;</span><br><span class=\"line\">       &#125;catch (Throwable e)&#123;</span><br><span class=\"line\">           &#x2F;&#x2F;5.回滚事务</span><br><span class=\"line\">           this.rollback();</span><br><span class=\"line\">           throw new RuntimeException(e);</span><br><span class=\"line\">       &#125;finally &#123;</span><br><span class=\"line\">           &#x2F;&#x2F;6.释放资源</span><br><span class=\"line\">           this.release();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>"},{"title":"戴尔惠普华硕笔记本Fn键反了，按F1、F2等键出来Fn+F1、F2的效果","date":"2020-03-02T13:21:04.000Z","_content":"\n惠普笔记本，几天按f12调试的时候，笔记本直接睡眠了，试验了一番发现Fn键反了按F12等键出来Fn+F2的效果，按F1到F12等键出来Fn+F1到F12的效果。在网上寻找一番答案发现是是fn键被锁住了。\n找到键盘上的一个Fnlock（缩写FnLk）或Numlock键，然后按Fn+Fnlock/Numlock解锁\n[参考文章:\nhttps://jingyan.baidu.com/article/ff41162594df7f12e48237ee.html](https://jingyan.baidu.com/article/ff41162594df7f12e48237ee.html).","source":"_posts/戴尔惠普华硕笔记本Fn键反了，按F1、F2等键出来Fn-F1、F2的效果.md","raw":"---\ntitle: 戴尔惠普华硕笔记本Fn键反了，按F1、F2等键出来Fn+F1、F2的效果\ndate: 2020-03-02 21:21:04 \ncategories: \n\t- 电脑问题\n\t\t- 键盘\ntags: 键盘\n---\n\n惠普笔记本，几天按f12调试的时候，笔记本直接睡眠了，试验了一番发现Fn键反了按F12等键出来Fn+F2的效果，按F1到F12等键出来Fn+F1到F12的效果。在网上寻找一番答案发现是是fn键被锁住了。\n找到键盘上的一个Fnlock（缩写FnLk）或Numlock键，然后按Fn+Fnlock/Numlock解锁\n[参考文章:\nhttps://jingyan.baidu.com/article/ff41162594df7f12e48237ee.html](https://jingyan.baidu.com/article/ff41162594df7f12e48237ee.html).","slug":"戴尔惠普华硕笔记本Fn键反了，按F1、F2等键出来Fn-F1、F2的效果","published":1,"updated":"2020-06-16T03:55:53.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7deqvi001tlwqagqqtbumy","content":"<p>惠普笔记本，几天按f12调试的时候，笔记本直接睡眠了，试验了一番发现Fn键反了按F12等键出来Fn+F2的效果，按F1到F12等键出来Fn+F1到F12的效果。在网上寻找一番答案发现是是fn键被锁住了。<br>找到键盘上的一个Fnlock（缩写FnLk）或Numlock键，然后按Fn+Fnlock/Numlock解锁<br><a href=\"https://jingyan.baidu.com/article/ff41162594df7f12e48237ee.html\" target=\"_blank\" rel=\"noopener\">参考文章:<br>https://jingyan.baidu.com/article/ff41162594df7f12e48237ee.html</a>.</p>\n","site":{"data":{}},"length":224,"excerpt":"","more":"<p>惠普笔记本，几天按f12调试的时候，笔记本直接睡眠了，试验了一番发现Fn键反了按F12等键出来Fn+F2的效果，按F1到F12等键出来Fn+F1到F12的效果。在网上寻找一番答案发现是是fn键被锁住了。<br>找到键盘上的一个Fnlock（缩写FnLk）或Numlock键，然后按Fn+Fnlock/Numlock解锁<br><a href=\"https://jingyan.baidu.com/article/ff41162594df7f12e48237ee.html\" target=\"_blank\" rel=\"noopener\">参考文章:<br>https://jingyan.baidu.com/article/ff41162594df7f12e48237ee.html</a>.</p>\n"},{"title":"解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题","date":"2019-12-08T05:50:04.000Z","_content":"\n解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题\n\n<!--more-->\n\n执行保存操作，执行插入语句\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134343121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n发现插入的数据，中文在数据库中变成了问号\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134506604.png)\n在数据库中执行以下插入语句：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134633703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n发现没问题：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134717513.png)\n于是检查一下自己的连接配置，发现url中没有加utf-8，于是加上：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134847707.png)\n再次执行程序保存操作，发现问题解决：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134937709.png)","source":"_posts/解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题.md","raw":"---\ntitle: 解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题\ndate: 2019-12-08 13:50:04\ncategories: mysql\ntags: mysql\n---\n\n解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题\n\n<!--more-->\n\n执行保存操作，执行插入语句\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134343121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n发现插入的数据，中文在数据库中变成了问号\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134506604.png)\n在数据库中执行以下插入语句：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134633703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70)\n发现没问题：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134717513.png)\n于是检查一下自己的连接配置，发现url中没有加utf-8，于是加上：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134847707.png)\n再次执行程序保存操作，发现问题解决：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191208134937709.png)","slug":"解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题","published":1,"updated":"2020-06-16T03:55:53.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7deqvj001wlwqa1l1sdcu4","content":"<p>解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题</p>\n<a id=\"more\"></a>\n\n<p>执行保存操作，执行插入语句<br><img src=\"https://img-blog.csdnimg.cn/20191208134343121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>发现插入的数据，中文在数据库中变成了问号<br><img src=\"https://img-blog.csdnimg.cn/20191208134506604.png\" alt=\"在这里插入图片描述\"><br>在数据库中执行以下插入语句：<br><img src=\"https://img-blog.csdnimg.cn/20191208134633703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>发现没问题：<br><img src=\"https://img-blog.csdnimg.cn/20191208134717513.png\" alt=\"在这里插入图片描述\"><br>于是检查一下自己的连接配置，发现url中没有加utf-8，于是加上：<br><img src=\"https://img-blog.csdnimg.cn/20191208134847707.png\" alt=\"在这里插入图片描述\"><br>再次执行程序保存操作，发现问题解决：<br><img src=\"https://img-blog.csdnimg.cn/20191208134937709.png\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"length":138,"excerpt":"<p>解决程序中执行插入语句，mysql数据库表插入的中文变成问号的问题</p>","more":"<p>执行保存操作，执行插入语句<br><img src=\"https://img-blog.csdnimg.cn/20191208134343121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>发现插入的数据，中文在数据库中变成了问号<br><img src=\"https://img-blog.csdnimg.cn/20191208134506604.png\" alt=\"在这里插入图片描述\"><br>在数据库中执行以下插入语句：<br><img src=\"https://img-blog.csdnimg.cn/20191208134633703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODg0OTcy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>发现没问题：<br><img src=\"https://img-blog.csdnimg.cn/20191208134717513.png\" alt=\"在这里插入图片描述\"><br>于是检查一下自己的连接配置，发现url中没有加utf-8，于是加上：<br><img src=\"https://img-blog.csdnimg.cn/20191208134847707.png\" alt=\"在这里插入图片描述\"><br>再次执行程序保存操作，发现问题解决：<br><img src=\"https://img-blog.csdnimg.cn/20191208134937709.png\" alt=\"在这里插入图片描述\"></p>"},{"title":" 阿里云centos7 运行tomcat 之后远程无法访问的解决","date":"2020-01-17T07:05:57.000Z","_content":"\n在安装好 jdk tomcat,并且配好环境变量之后返现远程通过8080无法访问\n解决方法如下：\n\n<!--more-->\n\n#### 1 查看在服务器本地是否能够访问\n\n```\n curl -i http://localhost:8080\n```\n看一下有没有数据返回，比较慢可能需要等待几分钟时间\n#### 2 添加安全组规则\n在阿里云的控制添加安全组规则：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200117145259792.png)\n### 3在服务器放开放防火墙firewall端口\n查看8080在firewall是否开启。发现没有开启\n```\n firewall-cmd --query-port=8080/tcp\nno\n```\n添加8080\n\n```\n firewall-cmd --add-port=8080/tcp --permanent\n```\n重新载入防火墙\n\n```\nfirewall-cmd --reload\n```\n查询8080端口是否开启成功：\n\n```\nfirewall-cmd --query-port=8080/tcp\n```\n参考文章：\n[Linux下Centos7对外开放端口：](https://blog.csdn.net/realjh/article/details/82048492)\n[https://blog.csdn.net/realjh/article/details/82048492](https://blog.csdn.net/realjh/article/details/82048492)","source":"_posts/阿里云centos7-运行tomcat-之后远程无法访问的解决.md","raw":"---\ntitle: ' 阿里云centos7 运行tomcat 之后远程无法访问的解决'\ndate: 2020-01-17 15:05:57 \ncategories: \n\t- linux\n\t\t- centos\ntags: 阿里云服务器\n---\n\n在安装好 jdk tomcat,并且配好环境变量之后返现远程通过8080无法访问\n解决方法如下：\n\n<!--more-->\n\n#### 1 查看在服务器本地是否能够访问\n\n```\n curl -i http://localhost:8080\n```\n看一下有没有数据返回，比较慢可能需要等待几分钟时间\n#### 2 添加安全组规则\n在阿里云的控制添加安全组规则：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200117145259792.png)\n### 3在服务器放开放防火墙firewall端口\n查看8080在firewall是否开启。发现没有开启\n```\n firewall-cmd --query-port=8080/tcp\nno\n```\n添加8080\n\n```\n firewall-cmd --add-port=8080/tcp --permanent\n```\n重新载入防火墙\n\n```\nfirewall-cmd --reload\n```\n查询8080端口是否开启成功：\n\n```\nfirewall-cmd --query-port=8080/tcp\n```\n参考文章：\n[Linux下Centos7对外开放端口：](https://blog.csdn.net/realjh/article/details/82048492)\n[https://blog.csdn.net/realjh/article/details/82048492](https://blog.csdn.net/realjh/article/details/82048492)","slug":"阿里云centos7-运行tomcat-之后远程无法访问的解决","published":1,"updated":"2020-06-16T03:55:53.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc7deqvk001zlwqa4vmndg52","content":"<p>在安装好 jdk tomcat,并且配好环境变量之后返现远程通过8080无法访问<br>解决方法如下：</p>\n<a id=\"more\"></a>\n\n<h4 id=\"1-查看在服务器本地是否能够访问\"><a href=\"#1-查看在服务器本地是否能够访问\" class=\"headerlink\" title=\"1 查看在服务器本地是否能够访问\"></a>1 查看在服务器本地是否能够访问</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -i http:&#x2F;&#x2F;localhost:8080</span><br></pre></td></tr></table></figure>\n<p>看一下有没有数据返回，比较慢可能需要等待几分钟时间</p>\n<h4 id=\"2-添加安全组规则\"><a href=\"#2-添加安全组规则\" class=\"headerlink\" title=\"2 添加安全组规则\"></a>2 添加安全组规则</h4><p>在阿里云的控制添加安全组规则：<br><img src=\"https://img-blog.csdnimg.cn/20200117145259792.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"3在服务器放开放防火墙firewall端口\"><a href=\"#3在服务器放开放防火墙firewall端口\" class=\"headerlink\" title=\"3在服务器放开放防火墙firewall端口\"></a>3在服务器放开放防火墙firewall端口</h3><p>查看8080在firewall是否开启。发现没有开启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> firewall-cmd --query-port&#x3D;8080&#x2F;tcp</span><br><span class=\"line\">no</span><br></pre></td></tr></table></figure>\n<p>添加8080</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;8080&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure>\n<p>重新载入防火墙</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<p>查询8080端口是否开启成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --query-port&#x3D;8080&#x2F;tcp</span><br></pre></td></tr></table></figure>\n<p>参考文章：<br><a href=\"https://blog.csdn.net/realjh/article/details/82048492\" target=\"_blank\" rel=\"noopener\">Linux下Centos7对外开放端口：</a><br><a href=\"https://blog.csdn.net/realjh/article/details/82048492\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/realjh/article/details/82048492</a></p>\n","site":{"data":{}},"length":464,"excerpt":"<p>在安装好 jdk tomcat,并且配好环境变量之后返现远程通过8080无法访问<br>解决方法如下：</p>","more":"<h4 id=\"1-查看在服务器本地是否能够访问\"><a href=\"#1-查看在服务器本地是否能够访问\" class=\"headerlink\" title=\"1 查看在服务器本地是否能够访问\"></a>1 查看在服务器本地是否能够访问</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -i http:&#x2F;&#x2F;localhost:8080</span><br></pre></td></tr></table></figure>\n<p>看一下有没有数据返回，比较慢可能需要等待几分钟时间</p>\n<h4 id=\"2-添加安全组规则\"><a href=\"#2-添加安全组规则\" class=\"headerlink\" title=\"2 添加安全组规则\"></a>2 添加安全组规则</h4><p>在阿里云的控制添加安全组规则：<br><img src=\"https://img-blog.csdnimg.cn/20200117145259792.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"3在服务器放开放防火墙firewall端口\"><a href=\"#3在服务器放开放防火墙firewall端口\" class=\"headerlink\" title=\"3在服务器放开放防火墙firewall端口\"></a>3在服务器放开放防火墙firewall端口</h3><p>查看8080在firewall是否开启。发现没有开启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> firewall-cmd --query-port&#x3D;8080&#x2F;tcp</span><br><span class=\"line\">no</span><br></pre></td></tr></table></figure>\n<p>添加8080</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;8080&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure>\n<p>重新载入防火墙</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<p>查询8080端口是否开启成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --query-port&#x3D;8080&#x2F;tcp</span><br></pre></td></tr></table></figure>\n<p>参考文章：<br><a href=\"https://blog.csdn.net/realjh/article/details/82048492\" target=\"_blank\" rel=\"noopener\">Linux下Centos7对外开放端口：</a><br><a href=\"https://blog.csdn.net/realjh/article/details/82048492\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/realjh/article/details/82048492</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckc7dequc0001lwqaaghy6rdi","category_id":"ckc7dequk0004lwqaddj95qj9","_id":"ckc7dequs000flwqa3t94gsz5"},{"post_id":"ckc7dequg0003lwqadz6377d4","category_id":"ckc7dequp000alwqa2b0ycu3g","_id":"ckc7dequv000mlwqabkxm785c"},{"post_id":"ckc7dequm0007lwqacx84aob4","category_id":"ckc7dequp000alwqa2b0ycu3g","_id":"ckc7dequz000rlwqa4elkfkyu"},{"post_id":"ckc7dequn0008lwqadbqcdsug","category_id":"ckc7dequv000llwqacjf27xzp","_id":"ckc7deqv2000ylwqadm86fza8"},{"post_id":"ckc7dequo0009lwqaduaz6oiy","category_id":"ckc7dequv000llwqacjf27xzp","_id":"ckc7deqv40013lwqahyylegok"},{"post_id":"ckc7dequq000dlwqadj7ehe83","category_id":"ckc7deqv2000xlwqa7kwo0q6j","_id":"ckc7deqv7001alwqa1o1p376e"},{"post_id":"ckc7dequt000ilwqagjjo8uz5","category_id":"ckc7deqv2000xlwqa7kwo0q6j","_id":"ckc7deqv9001glwqa2c0dhzsp"},{"post_id":"ckc7dequu000klwqa3qxpa2t3","category_id":"ckc7deqv2000xlwqa7kwo0q6j","_id":"ckc7deqve001mlwqacqou1ry6"},{"post_id":"ckc7dequw000olwqa5pyv5mh5","category_id":"ckc7deqv2000xlwqa7kwo0q6j","_id":"ckc7deqvi001slwqaenlqbbbd"},{"post_id":"ckc7dequx000qlwqa3bbze9hv","category_id":"ckc7deqv2000xlwqa7kwo0q6j","_id":"ckc7deqvk001ylwqahutbfybz"},{"post_id":"ckc7deqvh001qlwqa2mh93ah4","category_id":"ckc7dequv000llwqacjf27xzp","_id":"ckc7deqvp0023lwqa33vv92in"},{"post_id":"ckc7deqvj001wlwqa1l1sdcu4","category_id":"ckc7deqvi001rlwqa15wwhpt6","_id":"ckc7deqvp0025lwqac0wa2k3i"},{"post_id":"ckc7deqv0000ulwqahcmc70iv","category_id":"ckc7deqvi001rlwqa15wwhpt6","_id":"ckc7deqvq0028lwqabho65014"},{"post_id":"ckc7deqv1000wlwqa4iqhh0jz","category_id":"ckc7deqvi001rlwqa15wwhpt6","_id":"ckc7deqvq002blwqa42mh82ju"},{"post_id":"ckc7deqv30010lwqa47h82loc","category_id":"ckc7deqvi001rlwqa15wwhpt6","_id":"ckc7deqvr002elwqahimk07rd"},{"post_id":"ckc7deqv40012lwqa0g6f6p9s","category_id":"ckc7deqvq002alwqactsu9rgy","_id":"ckc7deqvs002ilwqa68nx83f1"},{"post_id":"ckc7deqv50015lwqa12pm9ewv","category_id":"ckc7deqvr002flwqa5ls74sah","_id":"ckc7deqvt002mlwqa4w4v1zjo"},{"post_id":"ckc7deqv60018lwqaehhd629n","category_id":"ckc7deqvs002jlwqae5za0bk0","_id":"ckc7deqvu002qlwqa30523xp3"},{"post_id":"ckc7deqv7001blwqa4gdn2lsx","category_id":"ckc7deqvt002nlwqablkf5i1z","_id":"ckc7deqvw002vlwqafbzz45q0"},{"post_id":"ckc7deqv8001elwqa214s32la","category_id":"ckc7deqvt002nlwqablkf5i1z","_id":"ckc7deqvx002zlwqadqq31tml"},{"post_id":"ckc7deqv9001hlwqafdw9g5xl","category_id":"ckc7deqvi001rlwqa15wwhpt6","_id":"ckc7deqvy0032lwqad953abjs"},{"post_id":"ckc7deqvc001klwqaaxrz0otk","category_id":"ckc7deqvx002ylwqac1z65ip2","_id":"ckc7deqvz0036lwqah42p65qq"},{"post_id":"ckc7deqve001nlwqa0ogwekc1","category_id":"ckc7deqvy0033lwqabqftd122","_id":"ckc7deqw0003alwqa46xxhywu"},{"post_id":"ckc7deqvi001tlwqagqqtbumy","category_id":"ckc7deqvz0037lwqabxjtb0l7","_id":"ckc7deqw1003elwqaf2rug9hx"},{"post_id":"ckc7deqvk001zlwqa4vmndg52","category_id":"ckc7deqw0003blwqaaiuc6yit","_id":"ckc7deqw2003glwqa55lfe03f"}],"PostTag":[{"post_id":"ckc7dequc0001lwqaaghy6rdi","tag_id":"ckc7dequl0005lwqad1js6bva","_id":"ckc7dequp000clwqa95wb8yfz"},{"post_id":"ckc7dequg0003lwqadz6377d4","tag_id":"ckc7dequp000blwqa4av6bnsm","_id":"ckc7dequu000jlwqa529pb4rb"},{"post_id":"ckc7dequm0007lwqacx84aob4","tag_id":"ckc7dequs000hlwqaavnv8ar4","_id":"ckc7dequx000plwqag9o61phi"},{"post_id":"ckc7dequn0008lwqadbqcdsug","tag_id":"ckc7dequv000nlwqa6288h54v","_id":"ckc7deqv1000vlwqac27k89y4"},{"post_id":"ckc7dequo0009lwqaduaz6oiy","tag_id":"ckc7dequv000nlwqa6288h54v","_id":"ckc7deqv30011lwqaegdqbka0"},{"post_id":"ckc7dequq000dlwqadj7ehe83","tag_id":"ckc7deqv2000zlwqabj5t5vw8","_id":"ckc7deqv60017lwqa3e73bp7v"},{"post_id":"ckc7dequt000ilwqagjjo8uz5","tag_id":"ckc7deqv2000zlwqabj5t5vw8","_id":"ckc7deqv8001dlwqa50hpeyq5"},{"post_id":"ckc7dequu000klwqa3qxpa2t3","tag_id":"ckc7deqv2000zlwqabj5t5vw8","_id":"ckc7deqvc001jlwqa8o6h54b3"},{"post_id":"ckc7dequw000olwqa5pyv5mh5","tag_id":"ckc7deqv2000zlwqabj5t5vw8","_id":"ckc7deqvh001plwqa6krnh6s0"},{"post_id":"ckc7deqvh001qlwqa2mh93ah4","tag_id":"ckc7dequv000nlwqa6288h54v","_id":"ckc7deqvj001vlwqac98m3k41"},{"post_id":"ckc7dequx000qlwqa3bbze9hv","tag_id":"ckc7deqv2000zlwqabj5t5vw8","_id":"ckc7deqvk001xlwqa63bw7gh8"},{"post_id":"ckc7deqvj001wlwqa1l1sdcu4","tag_id":"ckc7deqvj001ulwqahowmdgnf","_id":"ckc7deqvp0022lwqadmfxae6e"},{"post_id":"ckc7deqv0000ulwqahcmc70iv","tag_id":"ckc7deqvj001ulwqahowmdgnf","_id":"ckc7deqvp0024lwqahoc0a2f4"},{"post_id":"ckc7deqv1000wlwqa4iqhh0jz","tag_id":"ckc7deqvj001ulwqahowmdgnf","_id":"ckc7deqvq0029lwqa3pze84xx"},{"post_id":"ckc7deqv30010lwqa47h82loc","tag_id":"ckc7deqvj001ulwqahowmdgnf","_id":"ckc7deqvr002dlwqaepn1aq0e"},{"post_id":"ckc7deqv40012lwqa0g6f6p9s","tag_id":"ckc7deqvr002clwqa0fwl2qe5","_id":"ckc7deqvs002hlwqa5x725awl"},{"post_id":"ckc7deqv50015lwqa12pm9ewv","tag_id":"ckc7deqvr002glwqa0tkeai1g","_id":"ckc7deqvs002llwqacqbb5mh3"},{"post_id":"ckc7deqv60018lwqaehhd629n","tag_id":"ckc7deqvs002klwqa7i8fea6a","_id":"ckc7deqvu002plwqa20gr5e9d"},{"post_id":"ckc7deqv7001blwqa4gdn2lsx","tag_id":"ckc7deqvu002olwqaawdoeaws","_id":"ckc7deqvw002tlwqagac41ohl"},{"post_id":"ckc7deqv8001elwqa214s32la","tag_id":"ckc7deqvu002olwqaawdoeaws","_id":"ckc7deqvx002xlwqafi3l3b1p"},{"post_id":"ckc7deqv9001hlwqafdw9g5xl","tag_id":"ckc7deqvj001ulwqahowmdgnf","_id":"ckc7deqvy0031lwqa40b1eczq"},{"post_id":"ckc7deqvc001klwqaaxrz0otk","tag_id":"ckc7deqvy0030lwqa0bgl4vdz","_id":"ckc7deqvz0035lwqa6b72c127"},{"post_id":"ckc7deqve001nlwqa0ogwekc1","tag_id":"ckc7deqvy0034lwqa1zefe9jr","_id":"ckc7deqvz0039lwqabg0g5v8c"},{"post_id":"ckc7deqvi001tlwqagqqtbumy","tag_id":"ckc7deqvz0038lwqacz6z4lnh","_id":"ckc7deqw1003dlwqa1ekrgzmj"},{"post_id":"ckc7deqvk001zlwqa4vmndg52","tag_id":"ckc7deqw0003clwqabkohc0wb","_id":"ckc7deqw1003flwqa6fak91i2"}],"Tag":[{"name":"http","_id":"ckc7dequl0005lwqad1js6bva"},{"name":"docker","_id":"ckc7dequp000blwqa4av6bnsm"},{"name":"Dockerfile","_id":"ckc7dequs000hlwqaavnv8ar4"},{"name":"Spring","_id":"ckc7dequv000nlwqa6288h54v"},{"name":"mybatis","_id":"ckc7deqv2000zlwqabj5t5vw8"},{"name":"mysql","_id":"ckc7deqvj001ulwqahowmdgnf"},{"name":"swagger","_id":"ckc7deqvr002clwqa0fwl2qe5"},{"name":"jdk","_id":"ckc7deqvr002glwqa0tkeai1g"},{"name":"node","_id":"ckc7deqvs002klwqa7i8fea6a"},{"name":"笔记","_id":"ckc7deqvu002olwqaawdoeaws"},{"name":"eclipse","_id":"ckc7deqvy0030lwqa0bgl4vdz"},{"name":"java规范","_id":"ckc7deqvy0034lwqa1zefe9jr"},{"name":"键盘","_id":"ckc7deqvz0038lwqacz6z4lnh"},{"name":"阿里云服务器","_id":"ckc7deqw0003clwqabkohc0wb"}]}}